let e;function n(e){return e&&e.__esModule?e.default:e}var t,r,i,a,o="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{};const s=(e,n,t)=>(e||(e=[]),e[0]=n,e[1]=t,e),f=(e,n,t,r)=>(e||(e=[]),e[0]=n,e[1]=t,e[2]=r,e),l=(e,n=e=>void 0!==e?": "+e:"")=>class extends Error{origMessage;constructor(t){super(e(t)+n(t)),this.origMessage=void 0!==t?String(t):""}},u=l(()=>"illegal arity"),c=e=>{throw new u(e)},d=(e,n)=>null!=e&&"function"==typeof e[n],p=e=>d(e,"xform")?e.xform():e,m=e=>null!=e&&"function"==typeof e[Symbol.iterator],v=(e,n)=>[e[0],e[1],n],h=Symbol(),g=()=>{},b=e=>e,x=e=>null!=e&&"function"!=typeof e&&void 0!==e.length;class _{value;constructor(e){this.value=e}deref(){return this.value}}const y=e=>new _(e),w=e=>e instanceof _,S=e=>e instanceof _?e:new _(e),M=e=>e instanceof _?e.deref():e,A=e=>2===e.length?[void 0,e[1]]:3===e.length?[e[1],e[2]]:c(e.length);function T(...e){let n=e[0],t=n[0],r=n[1],i=n[2],a=null==(e=A(e))[0]?t():e[0],o=e[1];return M(r(d(o,"$reduce")?o.$reduce(i,a):x(o)?O(i,a,o):F(i,a,o)))}const O=(e,n,t)=>{for(let r=0,i=t.length;r<i;r++)if(w(n=e(n,t[r]))){n=n.deref();break}return n},F=(e,n,t)=>{for(let r of t)if(w(n=e(n,r))){n=n.deref();break}return n},E=(e,n)=>[e,b,n];function*D(e,n){let t=p(e)([g,g,(e,n)=>n])[2];for(let e of n){let n=t(h,e);if(w(n)){(n=M(n.deref()))!==h&&(yield n);return}n!==h&&(yield n)}}const C=(e,n,t=D)=>{let r=n.length-1;return m(n[r])?n.length>1?t(e.apply(null,n.slice(0,r)),n[r]):t(e(),n[0]):void 0};function k(e,n){return m(n)?D(k(e),n):n=>{let t=n[2];return v(n,(n,r)=>t(n,e(r)))}}class R{from;to;step;constructor(e,n,t){void 0===e?(e=0,n=1/0):void 0===n&&(n=e,e=0),t=void 0===t?e<n?1:-1:t,this.from=e,this.to=n,this.step=t}*[Symbol.iterator](){let{from:e,to:n,step:t}=this;if(t>0)for(;e<n;)yield e,e+=t;else if(t<0)for(;e>n;)yield e,e+=t}$reduce(e,n){let t=this.step;if(t>0)for(let r=this.from,i=this.to;r<i&&!w(n);r+=t)n=e(n,r);else for(let r=this.from,i=this.to;r>i&&!w(n);r+=t)n=e(n,r);return n}}const L=(e,n,t)=>{let r,i;switch(t.length){case 4:i=t[3],r=t[2];break;case 3:i=t[2];break;case 2:return k(n=>e(t[0],t[1],n));default:c(t.length)}return n(p(t[0])(t[1]),r,i)};function*z(...e){let n=e.map(e=>e[Symbol.iterator]());for(;;){let e=[];for(let t of n){let n=t.next();if(n.done)return;e.push(n.value)}yield e}}const P=l(()=>"unsupported operation"),N=e=>{throw new P(e)},G=(e=0)=>{let n;let t=[,,,,,],r=(...r)=>{let i=t[r[e].length]||n;return i?i(...r):N(`no impl for vec size ${r[e].length}`)};return r.add=(e,n)=>t[e]=n,r.default=e=>n=e,r.impl=e=>t[e]||n,r},U="o,a,b",I=e=>([n,t])=>`${n}=${t}${e}n;`,B=e=>n=>n>1?`${e}[i${e}+${n}*s${e}]`:1==n?`${e}[i${e}+s${e}]`:`${e}[i${e}]`,K=e=>k(B(e),new R(void 0,void 0,void 0)),$=e=>k(n=>`${e}[${n}]`,new R(void 0,void 0,void 0)),V=(e,n,t,r="a",i="",a="",o="",s=!1)=>{var f;let l;return[a,function e(...n){return L(e,T,n)}(function(...e){return(function e(...n){let[t,r,i,a,o,s,f,l,u,d]=n;switch(n.length){case 0:c(0);case 1:return t;case 2:return(...e)=>t(r(...e));case 3:return(...e)=>t(r(i(...e)));case 4:return(...e)=>t(r(i(a(...e))));case 5:return(...e)=>t(r(i(a(o(...e)))));case 6:return(...e)=>t(r(i(a(o(s(...e))))));case 7:return(...e)=>t(r(i(a(o(s(f(...e)))))));case 8:return(...e)=>t(r(i(a(o(s(f(l(...e))))))));case 9:return(...e)=>t(r(i(a(o(s(f(l(u(...e)))))))));default:let p=(...e)=>t(r(i(a(o(s(f(l(u(d(...e))))))))));return 10===n.length?p:e(p,...n.slice(10))}}).apply(null,e=e.map(p))}(function e(n,t){return m(t)?function*(e,n){let t=p(e)(E(()=>[],(e,n)=>(e.push(n),e))),r=t[1],i=t[2];for(let e of n){let n=i([],e);if(w(n)){yield*M(r(n.deref()));return}n.length&&(yield*n)}yield*M(r([]))}(e(n),t):e=>{let t=e[2],r=n;return v(e,(e,n)=>--r>0?t(e,n):0===r?S(t(e,n)):y(e))}}(e),function e(...n){return C(e,n)||(e=>{let t=e[2],r=n[0],i=n[1]||0;return v(e,(e,n)=>t(e,r(i++,n)))})}((e,t)=>n(t,e))),(f=(f=i)||"",l=!0,E(()=>"",(e,n)=>(e=l?e+n:e+f+n,l=!1,e))),z.apply(null,t.split(",").map(s?K:$))),o,""!==r?`return ${r};`:""]},j=(e,n,t="a",r,i,a=!1)=>[r,"for(let i=a.length;--i>=0;) {",e(n.split(",").map(a?e=>`${e}[i${e}+i*s${e}]`:e=>`${e}[i]`)),"}",i,null!==t?`return ${t};`:""],H=(e,n)=>`!${e} && (${e}=${n.split(",")[1]});`,W=(e,n,t,r=t,i="a",a,o,s,f=!1)=>Function(t,V(e,n,r,i,a,o,s,f).join("")),q=(e,n,t=n,r="a",i,a,o=!1)=>Function(n,j(e,t,r,i,a,o).join("")),Y=(e,n=U,t,r="o",i=1,a)=>{t=t||n,a=null!=a?a:H(r,n);let o=G(i),s=i=>o.add(i,W(i,e,n,t,r,"",a));return o.default(q(e,n,t,r,a)),[o,s(2),s(3),s(4)]},Q=e=>Y(I(e),"o,a,n"),[X,J,Z,ee]=Y(([e,n,t])=>`${e}=${n}+(${t}-${n})*n;`,"o,a,b,n"),en=Array.prototype.reduce,et=(e,n,t)=>void 0===t?en.call(n,e):en.call(n,e,t),er=(e,n,t=[])=>et((t,r,i)=>(t[i]=e(r,i,n,t),t),n,t||n);var ei=(e,n)=>(e%n+n)%n;const ea=(e,n,t=n.length)=>t||0===t?n[ei(e,t)]:ei(e,n),{fill:eo}=Array.prototype,{isFinite:es}=Number,{floor:ef}=Math,el=(e=0,n,t,r)=>eo.call(es(e)?Array(ef(e)):e,n,t,r),eu=[[-1,-1],[-1,4],[4,-1]],ec=eu.length,ed=eu.flat(),ep=n("/**\n * Default `gpgpu` vertex shader.\n *\n * @see [@epok.tech/gl-screen-triangle/uv-texture.vert.glsl](https://github.com/keeffEoghan/gl-screen-triangle/tree/master/uv-texture.vert.glsl)\n */\n\nprecision highp float;\n#define GLSLIFY 1\n\n/**\n * Uses the default prefix namespace; replaced with any given prefix if this\n * shader's used during `toStep`.\n *\n * @see {@link const.preDef}\n * @see {@link step.toStep}\n */\nattribute vec2 gpgpu_position;\n\nvarying vec2 gpgpu_uv;\n\nvoid main() {\n  // Texture coordinates, range `[0, 1]`, y-axis points upwards.\n  gpgpu_uv = (gpgpu_position*0.5)+0.5;\n  gl_Position = vec4(gpgpu_position, 0, 1);\n}\n"),em=()=>[...ed],ev="gpgpu_",eh=4,eg=()=>[eh],eb=/[0-9\.]+/,ex=()=>({color:[0,0,0,0],depth:1,stencil:0}),e_=()=>({copy:!0}),ey=Array.prototype.forEach,ew=(e,n)=>(ey.call(n,e),n),{isInteger:eS}=Number,{isArray:eM}=Array,eA=(e,n=eh)=>1<=e||e<=n||!!console.error(`\`gl-gpgpu\`: the given value (${e}) exceeds the range of channels available, \`[1, ${n}]\` inclusive.`,e,n),eT=(e,n=e)=>(function(e={},n=e){let{derives:t,passes:r,textures:i,valueToTexture:a}=e;if(!t&&0!==t)return n;let o=n.reads=[],s=n.readsToValue=[],f={},l=e=>f[e]??=er((n,t)=>({step:e,value:t}),a),u=(n,r)=>function i(f,u,c){let d=0,p=u;if(!0===t||eS(t)||({value:p=p,step:d=d}=u),!0===p)return et(i,l(d),f);let m=a[p];if(!(eS(d)&&eS(m)))return console.error("`mapSamples`: invalid map for sample",t,e,n,r,u,c,d,m,p);let v=f||[],h=v.findIndex(([e,n])=>e===d&&n===m);return((o[n]??=[])[r]??=[]).push(h<0?v.push([d,m])-1:h),((s[n]??=[])[r]??=[]).push(p),v},c=e=>(n,r)=>{let i=eM(t)?t[r]:t;return i||0===i?i!==t&&eM(i)?et(u(e,r),i,n):u(e,r)(n,i):n};return n.samples=er((e,n)=>et((e,t)=>et(c(n),i[t],e),e,null),r,[]),n})(function(e={},n=e){let{values:t=eg(),buffersMax:r=1,channelsMax:i=eh,packed:a=function(e,n=eh,t=[]){er((e,n)=>n,e,t).length=e.length;let r=n,i=0,a=0,o=1/0;for(let s=0;i<e.length;){let f=i+s,l=e[t[f]];if(!eA(l,n))break;let u=r-l;if(u>=0&&u<o&&(o=u,a=f),0!==o&&f<e.length-1)++s;else{let f=t[a];t[a]=t[i],t[i]=f,(r-=e[f])>0||(r=n),a=++i,o=1/0,s=0}}return t}(t,i)}=e;n.values=t,n.buffersMax=r,n.channelsMax=i,n.packed=a;let o=n.passes=[[]],s=n.textures=[[]],f=n.valueToTexture=[],l=n.valueToPass=[],u=n.textureToPass=[],c=!!r,d=0,p=a?e=>a[e]:e=>e,m=a?(e,n)=>t[n]:e=>e;return et((e,n,t)=>{let a=p(t),v=m(n,a);if(!eA(v,i))return e;let h=o.length-1,g=o[h],b=s.length-1,x=s[b];return(d+=v)>i?(d=v,b=s.push(x=[])-1,c&&g.length>=r&&(h=o.push(g=[])-1),g.push(b),u.push(h)):0===g.length&&(g.push(b),u.push(h)),x.push(a),f[a]=b,l[a]=h,e},t,n)}(e,n),n),{floor:eO}=Math,{isFinite:eF,isInteger:eE}=Number;function eD(e){let{width:n,w:t,x:r,shape:i,size:a,side:o,0:s}=e;return n??t??r??(i&&eD(i))??(a&&eD(a))??o??s??(eF(e)?e:null)}function eC(e){let{height:n,h:t,y:r,shape:i,size:a,side:o,1:s}=e;return n??t??r??(i&&eC(i))??(a&&eC(a))??o??s??(eF(e)?e:null)}const ek=(e=1,n=1)=>e?.entries??(eD(e)??1)*(eC(n)??1),eR=e=>er((e,n)=>n,el(eE(e)?e:ek(e)),0),eL=e=>eF(e)?2**e:null;function ez(e,n=[]){let t=eL(e.scale),[r,i]=n;return n[0]=eO(eD(e)??t??r??512),n[1]=eO(eC(e)??t??i??512),n}const{max:eP}=Math,{isInteger:eN}=Number,eG=(e,n)=>e>2&&n>1,eU=(e,n,t)=>(e||(e=[]),e[0]=n,e[1]=t,e),eI=(e,n,t,r,i)=>(e||(e=[]),e[0]=n,e[1]=t,e[2]=r,e[3]=i,e);function eB(e={},n=e.uniforms??={}){let{steps:t,maps:r,pre:i=ev,bound:a=1}=e,{textures:o}=r,s=t.length??t,f=o.length,l=[],u=[];n[i+"stepNow"]=(e,n)=>n.stepNow,n[i+"stateShape"]=(e,{size:{shape:n,merge:t}})=>n?eI(l,...n,...t?.shape??n):eI(l),n[i+"viewShape"]=({drawingBufferWidth:e,drawingBufferHeight:n})=>eU(u,e,n),n[i+"states"]=(e,n)=>n.merge?.all?.texture??null;let c=e=>ew((t,r)=>n[i+`states[${e*f+r}]`]=(n,{merge:t,stepNow:i=0,bound:o=a,textures:s})=>t?null:ea(i-o-e,s)?.[r]?.texture,o);for(let e=0,n=s-a;e<n;++e)c(e);return n}const[{length:eK},{length:e$}]="[object {type}]".split("{type}"),eV=e=>toString.call(e).slice(eK,-e$),ej="rgba",eH={},eW=JSON.stringify;function eq(e,n,t="",r=e?.macros){if((r??!0)===!0)return null;if(!r)return"";let i=eV(r);return"String"===i?r:"Function"===i?eq(e,n,t,r(e,n,t,r)):r instanceof Object&&n in r?eq(e,n,t,r[n]):t?eq(e,n?n+"_"+t:t,"",r):null}const eY=(e,n,t,r="",i=e)=>`const int ${n}_l = ${t.length};`+et((t,a,o)=>t+" \\\n"+(r&&r+" ")+e+` ${n}_${o} = ${i}(${a.join?.(", ")??a});`,t,""),eQ=(e,n,t,r="",i=e)=>eY(e,n,t,r,i)+"\n\n"+`/**
`+` * Index function \`${n}_i\` (e.g: \`${n}_i(0)\`) may be slow.
`+` * Use name (e.g: \`${n}_0\`) if possible.
`+` */
`+`#define ${n}_i(i) ${et((e,t,r)=>r?`((i == ${r})? ${n}_${r} : ${e})`:`${n}_${r}`,t,"")}
`,eX=(e,n,t,r="",i=e)=>eY(e,n,t,r,i)+" \\\n"+(r&&r+" ")+e+` ${n}[${n}_l];`+et((e,t,r)=>e+" \\\n"+n+`[${r}] = ${n}_${r};`,t,"")+"\n"+`#define ${n}_i(i) ${n}[i]
`,eJ=(e,n,t,r="",i=e)=>eY(e,n,t,r,i)+" \\\n"+(r&&r+" ")+e+` ${n}[${n}_l] = ${i}[${n}_l](${et((e,t,r)=>(e&&e+", ")+n+"_"+r,t,"")});
`+`#define ${n}_i(i) ${n}[i]
`,eZ=(e,n,t,r="",i=1,a)=>(i>=3?eJ:"const"===r.trim()?eQ:eX)(e,n,t,r,a),e0=(e,n)=>eq(e,"",n)??function(e,n){let t="values",r=eq(e,t,n);if(null!=r)return r;let{maps:i,steps:a,bound:o=1,size:s,pre:f=ev,cache:l=eH}=e,{values:u,textures:c,passes:{length:d},alias:p}=i,m=a.length??a,v=s?.entries,h=l&&`macro@${t}@${f}|${o}|${eW(u)}|${eW(c)}|${m}|${d}|${v}|${eW(p)}`;return r=l?.[h]??et((e,n,t,r,i=0)=>et((e,n)=>{let r=e+`#define ${f}texture_${n} ${t}
`+`#define ${f}channels_${n} ${ej.slice(i,i+=u[n])}

`;if(!p)return r;let a=p[n];return r+`#define ${f}texture_${a} ${f}texture_${n}
`+`#define ${f}channels_${a} ${f}channels_${n}

`},n,e),c,"")+(v?`#define ${f}entries ${v}
`:"")+`#define ${f}textures ${c.length}
`+`#define ${f}passes ${d}
`+`#define ${f}stepsPast ${m-o}
`+`#define ${f}steps ${m}
`+`#define ${f}bound ${o}

`,l?l[h]=r:r}(e,n)+function(e,n){let t="output",r=eq(e,t,n);if(null!=r)return r;let{passNow:i,maps:a,pre:o=ev,cache:s=eH}=e,{values:f,textures:l,passes:u,alias:c}=a,d=u[i],p=s&&`macro@${t}@${o}|${i}|${eW(f)}|${eW(l)}|${eW(u)}|${eW(c)}`;return r=s?.[p]??`#define ${o}passNow ${i}
${et((e,n,t,r,i=0)=>et((e,r)=>{let a=e+"\n"+`#define ${o}bound_${r} ${n}
`+`#define ${o}attach_${r} ${t}
`+`#define ${o}output_${r} gl_FragData[${o}attach_${r}].${ej.slice(i,i+=f[r])}
`;if(!c)return a;let s=c[r];return a+"\n"+`#define ${o}bound_${s} ${o}bound_${r}
`+`#define ${o}attach_${s} ${o}attach_${r}
`+`#define ${o}output_${s} ${o}output_${r}
`},l[n],e),d,"")}
`,s?s[p]=r:r}(e,n)+function(e,n){let t="samples",r=eq(e,t,n);if(null!=r)return r;let{passNow:i=0,maps:a,steps:o,bound:s=1,glsl:f,pre:l=ev,cache:u=eH}=e,{samples:c,reads:d,readsToValue:p,alias:m}=a,v=c?.[i],h=d?.[i],g=p?.[i],b=m?(o.length??o)-s:null,x=u&&`macro@${t}@${l}|${i}|${eW(v)}|${eW(h)}|${eW(g)}|${eW(m)}|${b}|${f}`;return r=u?.[x]??(v?`#define ${l}useSamples${" \\\n"+eZ("ivec2",l+"samples",v,"const",f)}
`:"")+(h?et((e,n,t)=>{let r=`${e}#define ${l}useReads_${t}${" \\\n"+eZ("int",l+"reads_"+t,n,"const",f)}
`;if(!m)return r;let i=g[t],a=m[t],o=`${l}reads_${a}`,s=`${l}reads_${t}`;return r+`/**
`+` * Alias reads, depends on index reads \`${l}useReads_${t}\`.
`+` * If using both alias and index reads, only use this not both.
`+` */
`+`#define ${l}useReads_${a} \\
${l}useReads_${t}${et((e,n,t)=>{let r;let a=m[i[t]],f=v[n][0],l=b-f-1,u=`${s}_${t}`;return e+" \\\n"+(e.indexOf(r=`const int ${o}_${a}_new_${f}`)>=0?"":`/** Alias and step past, count from new to old. */${" \\\n"+r} = ${u}; \\
`)+(e.indexOf(r=`const int ${o}_${a}_old_${l}`)>=0?"":`/** Alias and step last, count from old to new. */${" \\\n"+r} = ${u}; \\
`)+(f||e.indexOf(r=`const int ${o}_${a}_new`)>=0?"":`/** Alias with implied newest step past. */${" \\\n"+r} = ${u}; \\
`)+(f||e.indexOf(r=`const int ${o}_${a}`)>=0?"":`/** Alias with implied newest. */${" \\\n"+r} = ${u}; \\
`)+(l||e.indexOf(r=`const int ${o}_${a}_old`)>=0?"":`/** Alias with implied oldest step last. */${" \\\n"+r} = ${u}; \\
`)},n,n.length?" \\\n":"")} \\
const int ${o}_l = ${s}_l; \\
int ${o}_i(int i) { return ${s}_i(i); }

`},h,""):""),u?u[x]=r:r}(e,n)+function(e,n){let t="taps",r=eq(e,t,n);if(null!=r)return r;let{passNow:i=0,maps:a,merge:o,glsl:s,pre:f=ev,cache:l=eH}=e,u=a.samples?.[i],c=!o,d=l&&`macro@${t}@${f}|${i}|${eW(u)}|${c}|${s}`;if(null!=(r=l?.[d]))return r;let p=s>=3,m="texture"+(p?"":"2D"),v=f+"tapState",h="#define "+v,g="stepBy, textureBy",b=`#define ${v}(uv) \\
`+v,x=`#define ${v}By(uv, ${g}) \\
`+v,_=f+"samples_",y="_"+f,w=l[t+":tapsSamples"]??=[];return r=(c?"":`#define ${f}mergedStates

`)+((w.length=u?.length??0)?(c?`/**
 * States in a \`sampler2D[]\`; looks up 1D index and 2D \`uv\`.
 * Past steps go later in the list.
 * Pass constant array index values; \`textures\`.
 * Use \`${f}data\` list; ignore temporary \`${y}\` names.
 */
`+h+"s(uv, states, textures) \\\n"+`const int ${y}tlI = int(textures);`+" \\\n"+`vec2 ${y}uvI = vec2(uv);`+" \\\n"+eZ("vec4",f+"data",er((e,n)=>m+`(states[(int(${_+n}.s)*${y}tlI)+int(${_+n}.t)], ${y}uvI)`,u,w),"",s)+"\n"+`/**
`+` * States may also be sampled by shifted step/texture.
`+` * Pass constant array index values; \`textures, ${g}\`.
`+` * Use \`${f}data\` list; ignore temporary \`${y}\` names.
`+` */
`+h+`sBy(uv, states, textures, ${g})`+" \\\n"+`const int ${y}tlIB = int(textures);`+" \\\n"+`ivec2 ${y}byIB = ivec2(${g});`+" \\\n"+`vec2 ${y}uvIB = vec2(uv);`+" \\\n"+eZ("vec4",f+"data",er((e,n)=>m+"(states["+`((int(${_+n}.s)+${y}byIB.s)*${y}tlIB)+`+`int(${_+n}.t)+${y}byIB.t`+`], ${y}uvIB)`,u,w),"",s)+"\n"+`/** Preferred aliases: index suits states array constant access. */
`+b+`s(uv, ${f}states, ${f}textures)
`+x+`sBy(uv, ${f}states, ${f}textures, ${g})
`:`/**
 * States merged in a \`sampler2D\`.
 * Scales the 2D \`uv\` lookup over \`[textures, steps]\`.
 * Step from now into the past going upwards in the texture.
 * Use \`${f}data\` list; ignore temporary \`${y}\` names.
 */
`+h+"2(uv, states, stepNow, steps, textures) \\\n"+`vec2 ${y}l2 = vec2(textures, steps);`+" \\\n"+`vec2 ${y}uv2 = vec2(uv)/${y}l2;`+" \\\n"+`vec2 ${y}s2 = vec2(1, -1)/${y}l2;`+" \\\n"+`vec2 ${y}i2 = vec2(0, 1)-vec2(0, stepNow);`+" \\\n"+eZ("vec4",f+"data",er((e,n)=>m+"(states, "+`fract(${y}uv2+fract((vec2(${_+n}).ts+${y}i2)*${y}s2)))`,u,w),"",s)+"\n"+`/**
`+` * States may also be sampled by shifted step/texture.
`+` * Use \`${f}data\` list; ignore temporary \`${y}\` names.
`+` */
`+h+`2By(uv, states, stepNow, steps, textures, ${g})`+" \\\n"+`vec2 ${y}l2B = vec2(textures, steps);`+" \\\n"+`vec2 ${y}uv2B = vec2(uv)/${y}l2B;`+" \\\n"+`vec2 ${y}s2B = vec2(1, -1)/${y}l2B;`+" \\\n"+`vec2 ${y}i2B = vec2(${g}).ts+vec2(0, 1)-vec2(0, stepNow);`+" \\\n"+eZ("vec4",f+"data",er((e,n)=>m+"(states, "+`fract(${y}uv2B+fract((vec2(${_+n}).ts+${y}i2B)*${y}s2B)))`,u,w),"",s)+"\n"+(p?`/**
 * States merged to \`sampler3D\` or \`sampler2DArray\`.
 * 2D \`uv\` to 3D.
 * Scales \`x\` over \`textures\`, \`z\` over \`steps\` as:
 * - \`sampler3D\`: the number of steps; depth, \`[0, 1]\`.
 * - \`sampler2DArray\`: \`1\` or less; layer, \`[0, steps-1]\`.
 * Use \`${f}data\` list; ignore temporary \`${y}\` names.
 */
`+h+"3(uv, states, stepNow, steps, textures) \\\n"+`vec2 ${y}l3 = vec2(textures, steps);`+" \\\n"+`vec2 ${y}uv3 = vec2(uv)/${y}l3;`+" \\\n"+`float ${y}sx3 = 1.0/${y}l3.x;`+" \\\n"+`float ${y}s3 = -float(stepNow);`+" \\\n"+`float ${y}sz3 = -1.0/${y}l3;`+" \\\n"+eZ("vec4",f+"data",er((e,n)=>m+"(states, fract(vec3("+`${y}uv3.x+(float(${_+n}.t)*${y}sx3), ${y}uv3.y, `+`(float(${_+n}.s)+${y}s3)*${y}sz3)))`,u,w),"",s)+"\n"+`/**
`+` * States may also be sampled by shifted step/texture.
`+` * Use \`${f}data\` list; ignore temporary \`${y}\` names.
`+` */
`+h+`3By(uv, states, stepNow, steps, textures, ${g})`+" \\\n"+`vec2 ${y}l3B = vec2(textures, steps);`+" \\\n"+`vec2 ${y}uv3B = (vec2(uv)+vec2(textureBy, 0))/${y}l3B;`+" \\\n"+`float ${y}sx3B = 1.0/${y}l3B.x;`+" \\\n"+`float ${y}s3B = float(stepBy)-float(stepNow);`+" \\\n"+`float ${y}sz3B = -1.0/${y}l3B;`+" \\\n"+eZ("vec4",f+"data",er((e,n)=>m+"(states, fract(vec3("+`${y}uv3B.x+(float(${_+n}.t)*${y}sx3B), ${y}uv3B.y, `+`(float(${_+n}.s)+${y}s3B)*${y}sz3B)))`,u,w),"",s)+"\n/** Preferred aliases: 3D suits merged texture in `GLSL` 3+. */\n"+b+`3(uv, ${f}states, ${f}stepNow, ${f}steps, ${f}textures)
`+x+`3By(uv, ${f}states, ${f}stepNow, ${f}steps, ${f}textures, ${g})
`:"/** Preferred aliases: 2D suits merged texture in `GLSL` < 1. */\n"+b+`2(uv, ${f}states, ${f}stepNow, ${f}steps, ${f}textures)
`+x+`2By(uv, ${f}states, ${f}stepNow, ${f}steps, ${f}textures, ${g})
`))+"\n":""),l?l[d]=r:r}(e,n),{call:e1}=Function,e2={},e3=({passes:e,stepNow:n,passNow:t})=>ea(n,e)?.[t],e4=(e,n,t)=>e.call===e1?e(n,t):e;function e5(e){let{merge:n,stepNow:t,size:r,copyImage:i=e2.copyImageDef??=e_()}=e,{color:a,map:o}=e3(e),{all:{texture:s},next:f}=n,l=s?.subimage,{color:u}=f,c=f.framebuffer;if(c?.call!==Function.call&&(c=c?.call),!(l&&c&&a&&o&&(t||0===t)))return s;let{steps:d,width:p,height:m}=r,v=t%d*m;return ew((e,n)=>(f.color=e)&&c.call(c,f).use.call(c,()=>l.call(s,i,o[n]*p,v)),a),f.color=u,c.call(c,f),s}const{isFinite:e6}=Number,e8=e=>e6(e)?e:parseFloat(e?.match?.(eb)?.[0]??e,10);var e9=function(e,n={},t=n){let{maxDrawbuffers:r,glsl:i}=e.limits??e,{maps:a={},glsl:o=i}=n,{buffersMax:s}=a;return t.glsl=e8(o),a.buffersMax??=r,n.maps=eT(a,t.maps??={}),!function({texture:e,framebuffer:n},t={},r=t){let i;let{maps:a,steps:o=2,type:s="float",min:f="nearest",mag:l="nearest",wrap:u="clamp",depth:c=!1,stencil:d=!1}=t,p=ez(t),[m,v]=p,{values:h=a.values=eg(),channelsMin:g=a.channelsMin=4,buffersMax:b=a.buffersMax=1,textures:x,passes:_}=a,y=o.length??o,{merge:w=eG(y,x.length)}=t;r.steps=o,r.merge=w,r.type=s,r.min=f,r.mag=l,r.wrap=u,r.depth=c,r.stencil=d,r.width=m,r.height=v;let S=b||null,M=(e,n)=>et((e,n)=>eP(e,et((e,n)=>e+h[n],x[n],0)),e,n),A=w?et((e,n)=>M(n,e),_,g):null,T=r.size={type:s,channelsMin:A??g,steps:y,passes:0,framebuffers:0,textures:0,colors:0,shape:p,width:m,height:v,entries:m*v},O=r.textures=[],F=r.passes=[],E=(n,t,r,i,a)=>(o,c,d,p)=>{let m={channels:n,width:t,height:r,type:s,min:f,mag:l,wrap:u},v=c,h=p?.[v];h||(h=e?.(m),v=T.textures++);let g=eN(i),b=eN(a),_=eN(o);return m.texture=h,m.entry=v,g&&(m.step=i),b&&(m.color=T.colors++,m.pass=a),_&&(m.map=x[m.index=o]),g&&b&&_?((O[i]??=[])[o]=m).texture:m},D=(e,t)=>(r,a)=>{let o=null!=t?0:A??(r?M(r,g):g),s={depth:c,stencil:d,width:m,height:v,color:t??(r?er(E(o,m,v,e,a),r,w?i??=[]:[]):[])};s.framebuffer=S&&n?.(s),s.entry=S&&T.framebuffers++,r&&(s.map=r,s.pass=T.passes++);let f=eN(e),l=eN(a);return f&&(s.step=e),l&&(s.index=a),r&&f&&l?((F[e]??=[])[a]=s).framebuffer:s};if(r.steps=er((e,n)=>e||er(D(n),_),eN(o)?el(o):o,0),!w)return;let{all:C,next:k}=w,R=ez(w,[x.length*m,y*v]),[L,z]=R;r.merge={all:C??E(A,L,z)(),next:k??D(null,i[0])()},T.merge={width:L,height:z,shape:R,entries:L*z}}(e,n,t),eB(n,t.uniforms??={}),!function(e,n={},t=n){let{buffer:r,clear:i,command:a=e}=e,{merge:o,pipeline:s,verts:f,frag:l,frags:u,uniforms:c,attributes:d,maps:p,pre:m=ev,vert:v=ep.replaceAll(ev,m||""),count:h=ec,positions:g=em()}=n;if(t.pre=m,t.vert=v,t.count=h,t.positions=r(g),f||u){let{passNow:e}=n;f&&(t.verts=f),u&&(t.frags=u),ew((e,t)=>{n.passNow=t,f&&(f[t]??=e0(n,"vert")+e4(v,null,n)),u&&(u[t]??=e0(n,"frag")+e4(l,null,n))},p.passes),n.passNow=e}t.pass=a(t.pipeline={vert(e,t){let{passNow:r,step:{vert:i=v,verts:a=f}}=n;return a?.[r]??e0(t,"vert")+e4(i,e,t)},frag(e,t){let{passNow:r,step:{frag:i=l,frags:a=u}}=n;return a?.[r]??e0(t,"frag")+e4(i,e,t)},framebuffer:(e,n)=>e3(n)?.framebuffer,count:h,uniforms:c,attributes:{[m+"position"]:(e,n)=>n.positions,...d},depth:{enable:!1},...s}),o&&((t.merge=o).update??=e5),t.step=(e=t)=>{let{steps:n,merge:r,pass:a,onPass:o,onStep:s,stepMax:f=8192,clearPass:l=e2.clearPassDef??=ex()}=e,{stepNow:u=0}=e;u=e.stepNow=(u+1)%(f||1/0);let c=r?.update,d=s?.(e,ea(u,n))??e;return ew((e,n)=>{d.passNow=n;let t=o?.(d,e)??d;(l.framebuffer=e3(t)?.framebuffer)&&i(l),a(t),c?.(t)},d.maps.passes),delete l.framebuffer,e}}(e,n,t),(n.maps=a).buffersMax=s,t};const e7={diff:"-",dt:"-","⏳":"-",pause:0,"⏸":0,add:"+","⏭":"+"},ne=e7.diff,nn={[e7.diff]:Date.now,[e7.add]:1e3/60};function nt(e,n,t=e){var r,i,a;let{time:o=0,step:s=ne,now:f}=e,l=null!==(r=e7[s])&&void 0!==r?r:s,u=l===e7.diff,c=null!==(a=null!==(i=null!=n?n:f)&&void 0!==i?i:nn[l])&&void 0!==a?a:l,d=l?(u?0:o)+(isNaN(c)?c():c):o,p=d-o;return t?(t.time=d,t.dt=p,t.step=s,t):u?p:d}const nr=(e,n,t)=>e<n?n:e>t?t:e,[ni,na,no,ns]=Q("+"),nf=Math.PI/180,nl=e=>e*nf;var nu={},nc={};nc.CGS={},nc.CGS.SPEED_OF_LIGHT=29979245800,nc.CGS.GRAVITATIONAL_CONSTANT=6673e-11,nc.CGS.PLANCKS_CONSTANT_H=662606896e-35,nc.CGS.PLANCKS_CONSTANT_HBAR=105457162825e-38,nc.CGS.ASTRONOMICAL_UNIT=0xd9b18cb4eac,nc.CGS.LIGHT_YEAR=946053620707e6,nc.CGS.PARSEC=308567758135e7,nc.CGS.GRAV_ACCEL=980.665,nc.CGS.ELECTRON_VOLT=1602176487e-21,nc.CGS.MASS_ELECTRON=910938188e-36,nc.CGS.MASS_MUON=188353109e-33,nc.CGS.MASS_PROTON=167262158e-32,nc.CGS.MASS_NEUTRON=167492716e-32,nc.CGS.RYDBERG=217987196968e-22,nc.CGS.BOLTZMANN=13806504e-23,nc.CGS.MOLAR_GAS=83144720,nc.CGS.STANDARD_GAS_VOLUME=22710.981,nc.CGS.MINUTE=60,nc.CGS.HOUR=3600,nc.CGS.DAY=86400,nc.CGS.WEEK=604800,nc.CGS.INCH=2.54,nc.CGS.FOOT=30.48,nc.CGS.YARD=91.44,nc.CGS.MILE=160934.4,nc.CGS.NAUTICAL_MILE=185200,nc.CGS.FATHOM=182.88,nc.CGS.MIL=.00254,nc.CGS.POINT=.0352777777778,nc.CGS.TEXPOINT=.0351459803515,nc.CGS.MICRON=1e-4,nc.CGS.ANGSTROM=1e-8,nc.CGS.HECTARE=1e8,nc.CGS.ACRE=40468564.2241,nc.CGS.BARN=1e-24,nc.CGS.LITER=1e3,nc.CGS.US_GALLON=3785.41178402,nc.CGS.QUART=946.352946004,nc.CGS.PINT=473.176473002,nc.CGS.CUP=236.588236501,nc.CGS.FLUID_OUNCE=29.5735295626,nc.CGS.TABLESPOON=14.7867647813,nc.CGS.TEASPOON=4.92892159375,nc.CGS.CANADIAN_GALLON=4546.09,nc.CGS.UK_GALLON=4546.092,nc.CGS.MILES_PER_HOUR=44.704,nc.CGS.KILOMETERS_PER_HOUR=27.7777777778,nc.CGS.KNOT=51.4444444444,nc.CGS.POUND_MASS=453.59237,nc.CGS.OUNCE_MASS=28.349523125,nc.CGS.TON=907184.74,nc.CGS.METRIC_TON=1e6,nc.CGS.UK_TON=1016046.9088,nc.CGS.TROY_OUNCE=31.103475,nc.CGS.CARAT=.2,nc.CGS.UNIFIED_ATOMIC_MASS=1660538782e-33,nc.CGS.GRAM_FORCE=980.665,nc.CGS.POUND_FORCE=444822.161526,nc.CGS.KILOPOUND_FORCE=444822161.526,nc.CGS.POUNDAL=13825.5,nc.CGS.CALORIE=41868e3,nc.CGS.BTU=10550558526.2,nc.CGS.THERM=105506e10,nc.CGS.HORSEPOWER=7457e6,nc.CGS.BAR=1e6,nc.CGS.STD_ATMOSPHERE=1013250,nc.CGS.TORR=1333.22368421,nc.CGS.METER_OF_MERCURY=1333223.68421,nc.CGS.INCH_OF_MERCURY=33863.8815789,nc.CGS.INCH_OF_WATER=2490.889,nc.CGS.PSI=68947.5729317,nc.CGS.POISE=1,nc.CGS.STOKES=1,nc.CGS.STILB=1,nc.CGS.LUMEN=1,nc.CGS.LUX=1e-4,nc.CGS.PHOT=1,nc.CGS.FOOTCANDLE=.001076,nc.CGS.LAMBERT=1,nc.CGS.FOOTLAMBERT=.00107639104,nc.CGS.CURIE=37e9,nc.CGS.ROENTGEN=258e-9,nc.CGS.RAD=100,nc.CGS.SOLAR_MASS=198892e28,nc.CGS.BOHR_RADIUS=5291772083e-18,nc.CGS.NEWTON=1e5,nc.CGS.DYNE=1,nc.CGS.JOULE=1e7,nc.CGS.ERG=1,nc.CGS.STEFAN_BOLTZMANN_CONSTANT=567040047374e-16,nc.CGS.THOMSON_CROSS_SECTION=665245893699e-36,nc.CGSM={},nc.CGSM.SPEED_OF_LIGHT=29979245800,nc.CGSM.GRAVITATIONAL_CONSTANT=6673e-11,nc.CGSM.PLANCKS_CONSTANT_H=662606896e-35,nc.CGSM.PLANCKS_CONSTANT_HBAR=105457162825e-38,nc.CGSM.ASTRONOMICAL_UNIT=0xd9b18cb4eac,nc.CGSM.LIGHT_YEAR=946053620707e6,nc.CGSM.PARSEC=308567758135e7,nc.CGSM.GRAV_ACCEL=980.665,nc.CGSM.ELECTRON_VOLT=1602176487e-21,nc.CGSM.MASS_ELECTRON=910938188e-36,nc.CGSM.MASS_MUON=188353109e-33,nc.CGSM.MASS_PROTON=167262158e-32,nc.CGSM.MASS_NEUTRON=167492716e-32,nc.CGSM.RYDBERG=217987196968e-22,nc.CGSM.BOLTZMANN=13806504e-23,nc.CGSM.MOLAR_GAS=83144720,nc.CGSM.STANDARD_GAS_VOLUME=22710.981,nc.CGSM.MINUTE=60,nc.CGSM.HOUR=3600,nc.CGSM.DAY=86400,nc.CGSM.WEEK=604800,nc.CGSM.INCH=2.54,nc.CGSM.FOOT=30.48,nc.CGSM.YARD=91.44,nc.CGSM.MILE=160934.4,nc.CGSM.NAUTICAL_MILE=185200,nc.CGSM.FATHOM=182.88,nc.CGSM.MIL=.00254,nc.CGSM.POINT=.0352777777778,nc.CGSM.TEXPOINT=.0351459803515,nc.CGSM.MICRON=1e-4,nc.CGSM.ANGSTROM=1e-8,nc.CGSM.HECTARE=1e8,nc.CGSM.ACRE=40468564.2241,nc.CGSM.BARN=1e-24,nc.CGSM.LITER=1e3,nc.CGSM.US_GALLON=3785.41178402,nc.CGSM.QUART=946.352946004,nc.CGSM.PINT=473.176473002,nc.CGSM.CUP=236.588236501,nc.CGSM.FLUID_OUNCE=29.5735295626,nc.CGSM.TABLESPOON=14.7867647813,nc.CGSM.TEASPOON=4.92892159375,nc.CGSM.CANADIAN_GALLON=4546.09,nc.CGSM.UK_GALLON=4546.092,nc.CGSM.MILES_PER_HOUR=44.704,nc.CGSM.KILOMETERS_PER_HOUR=27.7777777778,nc.CGSM.KNOT=51.4444444444,nc.CGSM.POUND_MASS=453.59237,nc.CGSM.OUNCE_MASS=28.349523125,nc.CGSM.TON=907184.74,nc.CGSM.METRIC_TON=1e6,nc.CGSM.UK_TON=1016046.9088,nc.CGSM.TROY_OUNCE=31.103475,nc.CGSM.CARAT=.2,nc.CGSM.UNIFIED_ATOMIC_MASS=1660538782e-33,nc.CGSM.GRAM_FORCE=980.665,nc.CGSM.POUND_FORCE=444822.161526,nc.CGSM.KILOPOUND_FORCE=444822161.526,nc.CGSM.POUNDAL=13825.5,nc.CGSM.CALORIE=41868e3,nc.CGSM.BTU=10550558526.2,nc.CGSM.THERM=105506e10,nc.CGSM.HORSEPOWER=7457e6,nc.CGSM.BAR=1e6,nc.CGSM.STD_ATMOSPHERE=1013250,nc.CGSM.TORR=1333.22368421,nc.CGSM.METER_OF_MERCURY=1333223.68421,nc.CGSM.INCH_OF_MERCURY=33863.8815789,nc.CGSM.INCH_OF_WATER=2490.889,nc.CGSM.PSI=68947.5729317,nc.CGSM.POISE=1,nc.CGSM.STOKES=1,nc.CGSM.STILB=1,nc.CGSM.LUMEN=1,nc.CGSM.LUX=1e-4,nc.CGSM.PHOT=1,nc.CGSM.FOOTCANDLE=.001076,nc.CGSM.LAMBERT=1,nc.CGSM.FOOTLAMBERT=.00107639104,nc.CGSM.CURIE=37e9,nc.CGSM.ROENTGEN=258e-10,nc.CGSM.RAD=100,nc.CGSM.SOLAR_MASS=198892e28,nc.CGSM.BOHR_RADIUS=5291772083e-18,nc.CGSM.NEWTON=1e5,nc.CGSM.DYNE=1,nc.CGSM.JOULE=1e7,nc.CGSM.ERG=1,nc.CGSM.STEFAN_BOLTZMANN_CONSTANT=567040047374e-16,nc.CGSM.THOMSON_CROSS_SECTION=665245893699e-36,nc.CGSM.BOHR_MAGNETON=927400899e-29,nc.CGSM.NUCLEAR_MAGNETON=505078317e-32,nc.CGSM.ELECTRON_MAGNETIC_MOMENT=928476362e-29,nc.CGSM.PROTON_MAGNETIC_MOMENT=1410606633e-32,nc.CGSM.FARADAY=9648.53429775,nc.CGSM.ELECTRON_CHARGE=1602176487e-29,nc.MKS={},nc.MKS.SPEED_OF_LIGHT=299792458,nc.MKS.GRAVITATIONAL_CONSTANT=6673e-14,nc.MKS.PLANCKS_CONSTANT_H=662606896e-42,nc.MKS.PLANCKS_CONSTANT_HBAR=105457162825e-45,nc.MKS.ASTRONOMICAL_UNIT=149597870691,nc.MKS.LIGHT_YEAR=946053620707e4,nc.MKS.PARSEC=308567758135e5,nc.MKS.GRAV_ACCEL=9.80665,nc.MKS.ELECTRON_VOLT=1602176487e-28,nc.MKS.MASS_ELECTRON=910938188e-39,nc.MKS.MASS_MUON=188353109e-36,nc.MKS.MASS_PROTON=167262158e-35,nc.MKS.MASS_NEUTRON=167492716e-35,nc.MKS.RYDBERG=217987196968e-29,nc.MKS.BOLTZMANN=13806504e-30,nc.MKS.MOLAR_GAS=8.314472,nc.MKS.STANDARD_GAS_VOLUME=.022710981,nc.MKS.MINUTE=60,nc.MKS.HOUR=3600,nc.MKS.DAY=86400,nc.MKS.WEEK=604800,nc.MKS.INCH=.0254,nc.MKS.FOOT=.3048,nc.MKS.YARD=.9144,nc.MKS.MILE=1609.344,nc.MKS.NAUTICAL_MILE=1852,nc.MKS.FATHOM=1.8288,nc.MKS.MIL=254e-7,nc.MKS.POINT=352777777778e-15,nc.MKS.TEXPOINT=351459803515e-15,nc.MKS.MICRON=1e-6,nc.MKS.ANGSTROM=1e-10,nc.MKS.HECTARE=1e4,nc.MKS.ACRE=4046.85642241,nc.MKS.BARN=1e-28,nc.MKS.LITER=.001,nc.MKS.US_GALLON=.00378541178402,nc.MKS.QUART=946352946004e-15,nc.MKS.PINT=473176473002e-15,nc.MKS.CUP=236588236501e-15,nc.MKS.FLUID_OUNCE=295735295626e-16,nc.MKS.TABLESPOON=147867647813e-16,nc.MKS.TEASPOON=492892159375e-17,nc.MKS.CANADIAN_GALLON=.00454609,nc.MKS.UK_GALLON=.004546092,nc.MKS.MILES_PER_HOUR=.44704,nc.MKS.KILOMETERS_PER_HOUR=.277777777778,nc.MKS.KNOT=.514444444444,nc.MKS.POUND_MASS=.45359237,nc.MKS.OUNCE_MASS=.028349523125,nc.MKS.TON=907.18474,nc.MKS.METRIC_TON=1e3,nc.MKS.UK_TON=1016.0469088,nc.MKS.TROY_OUNCE=.031103475,nc.MKS.CARAT=2e-4,nc.MKS.UNIFIED_ATOMIC_MASS=1660538782e-36,nc.MKS.GRAM_FORCE=.00980665,nc.MKS.POUND_FORCE=4.44822161526,nc.MKS.KILOPOUND_FORCE=4448.22161526,nc.MKS.POUNDAL=.138255,nc.MKS.CALORIE=4.1868,nc.MKS.BTU=1055.05585262,nc.MKS.THERM=105506e3,nc.MKS.HORSEPOWER=745.7,nc.MKS.BAR=1e5,nc.MKS.STD_ATMOSPHERE=101325,nc.MKS.TORR=133.322368421,nc.MKS.METER_OF_MERCURY=133322.368421,nc.MKS.INCH_OF_MERCURY=3386.38815789,nc.MKS.INCH_OF_WATER=249.0889,nc.MKS.PSI=6894.75729317,nc.MKS.POISE=.1,nc.MKS.STOKES=1e-4,nc.MKS.STILB=1e4,nc.MKS.LUMEN=1,nc.MKS.LUX=1,nc.MKS.PHOT=1e4,nc.MKS.FOOTCANDLE=10.76,nc.MKS.LAMBERT=1e4,nc.MKS.FOOTLAMBERT=10.7639104,nc.MKS.CURIE=37e9,nc.MKS.ROENTGEN=258e-6,nc.MKS.RAD=.01,nc.MKS.SOLAR_MASS=198892e25,nc.MKS.BOHR_RADIUS=5291772083e-20,nc.MKS.NEWTON=1,nc.MKS.DYNE=1e-5,nc.MKS.JOULE=1,nc.MKS.ERG=1e-7,nc.MKS.STEFAN_BOLTZMANN_CONSTANT=567040047374e-19,nc.MKS.THOMSON_CROSS_SECTION=665245893699e-40,nc.MKS.BOHR_MAGNETON=927400899e-32,nc.MKS.NUCLEAR_MAGNETON=505078317e-35,nc.MKS.ELECTRON_MAGNETIC_MOMENT=928476362e-32,nc.MKS.PROTON_MAGNETIC_MOMENT=1410606633e-35,nc.MKS.FARADAY=96485.3429775,nc.MKS.ELECTRON_CHARGE=1602176487e-28,nc.MKS.VACUUM_PERMITTIVITY=8854187817e-21,nc.MKS.VACUUM_PERMEABILITY=125663706144e-17,nc.MKS.DEBYE=333564095198e-41,nc.MKS.GAUSS=1e-4,nc.MKSA={},nc.MKSA.SPEED_OF_LIGHT=299792458,nc.MKSA.GRAVITATIONAL_CONSTANT=6673e-14,nc.MKSA.PLANCKS_CONSTANT_H=662606896e-42,nc.MKSA.PLANCKS_CONSTANT_HBAR=105457162825e-45,nc.MKSA.ASTRONOMICAL_UNIT=149597870691,nc.MKSA.LIGHT_YEAR=946053620707e4,nc.MKSA.PARSEC=308567758135e5,nc.MKSA.GRAV_ACCEL=9.80665,nc.MKSA.ELECTRON_VOLT=1602176487e-28,nc.MKSA.MASS_ELECTRON=910938188e-39,nc.MKSA.MASS_MUON=188353109e-36,nc.MKSA.MASS_PROTON=167262158e-35,nc.MKSA.MASS_NEUTRON=167492716e-35,nc.MKSA.RYDBERG=217987196968e-29,nc.MKSA.BOLTZMANN=13806504e-30,nc.MKSA.MOLAR_GAS=8.314472,nc.MKSA.STANDARD_GAS_VOLUME=.022710981,nc.MKSA.MINUTE=60,nc.MKSA.HOUR=3600,nc.MKSA.DAY=86400,nc.MKSA.WEEK=604800,nc.MKSA.INCH=.0254,nc.MKSA.FOOT=.3048,nc.MKSA.YARD=.9144,nc.MKSA.MILE=1609.344,nc.MKSA.NAUTICAL_MILE=1852,nc.MKSA.FATHOM=1.8288,nc.MKSA.MIL=254e-7,nc.MKSA.POINT=352777777778e-15,nc.MKSA.TEXPOINT=351459803515e-15,nc.MKSA.MICRON=1e-6,nc.MKSA.ANGSTROM=1e-10,nc.MKSA.HECTARE=1e4,nc.MKSA.ACRE=4046.85642241,nc.MKSA.BARN=1e-28,nc.MKSA.LITER=.001,nc.MKSA.US_GALLON=.00378541178402,nc.MKSA.QUART=946352946004e-15,nc.MKSA.PINT=473176473002e-15,nc.MKSA.CUP=236588236501e-15,nc.MKSA.FLUID_OUNCE=295735295626e-16,nc.MKSA.TABLESPOON=147867647813e-16,nc.MKSA.TEASPOON=492892159375e-17,nc.MKSA.CANADIAN_GALLON=.00454609,nc.MKSA.UK_GALLON=.004546092,nc.MKSA.MILES_PER_HOUR=.44704,nc.MKSA.KILOMETERS_PER_HOUR=.277777777778,nc.MKSA.KNOT=.514444444444,nc.MKSA.POUND_MASS=.45359237,nc.MKSA.OUNCE_MASS=.028349523125,nc.MKSA.TON=907.18474,nc.MKSA.METRIC_TON=1e3,nc.MKSA.UK_TON=1016.0469088,nc.MKSA.TROY_OUNCE=.031103475,nc.MKSA.CARAT=2e-4,nc.MKSA.UNIFIED_ATOMIC_MASS=1660538782e-36,nc.MKSA.GRAM_FORCE=.00980665,nc.MKSA.POUND_FORCE=4.44822161526,nc.MKSA.KILOPOUND_FORCE=4448.22161526,nc.MKSA.POUNDAL=.138255,nc.MKSA.CALORIE=4.1868,nc.MKSA.BTU=1055.05585262,nc.MKSA.THERM=105506e3,nc.MKSA.HORSEPOWER=745.7,nc.MKSA.BAR=1e5,nc.MKSA.STD_ATMOSPHERE=101325,nc.MKSA.TORR=133.322368421,nc.MKSA.METER_OF_MERCURY=133322.368421,nc.MKSA.INCH_OF_MERCURY=3386.38815789,nc.MKSA.INCH_OF_WATER=249.0889,nc.MKSA.PSI=6894.75729317,nc.MKSA.POISE=.1,nc.MKSA.STOKES=1e-4,nc.MKSA.STILB=1e4,nc.MKSA.LUMEN=1,nc.MKSA.LUX=1,nc.MKSA.PHOT=1e4,nc.MKSA.FOOTCANDLE=10.76,nc.MKSA.LAMBERT=1e4,nc.MKSA.FOOTLAMBERT=10.7639104,nc.MKSA.CURIE=37e9,nc.MKSA.ROENTGEN=258e-6,nc.MKSA.RAD=.01,nc.MKSA.SOLAR_MASS=198892e25,nc.MKSA.BOHR_RADIUS=5291772083e-20,nc.MKSA.NEWTON=1,nc.MKSA.DYNE=1e-5,nc.MKSA.JOULE=1,nc.MKSA.ERG=1e-7,nc.MKSA.STEFAN_BOLTZMANN_CONSTANT=567040047374e-19,nc.MKSA.THOMSON_CROSS_SECTION=665245893699e-40,nc.MKSA.BOHR_MAGNETON=927400899e-32,nc.MKSA.NUCLEAR_MAGNETON=505078317e-35,nc.MKSA.ELECTRON_MAGNETIC_MOMENT=928476362e-32,nc.MKSA.PROTON_MAGNETIC_MOMENT=1410606633e-35,nc.MKSA.FARADAY=96485.3429775,nc.MKSA.ELECTRON_CHARGE=1602176487e-28,nc.MKSA.VACUUM_PERMITTIVITY=8854187817e-21,nc.MKSA.VACUUM_PERMEABILITY=125663706144e-17,nc.MKSA.DEBYE=333564095198e-41,nc.MKSA.GAUSS=1e-4,nc.NUM={},nc.NUM.FINE_STRUCTURE=.007297352533,nc.NUM.AVOGADRO=602214199e15,nc.NUM.YOTTA=1e24,nc.NUM.ZETTA=1e21,nc.NUM.EXA=1e18,nc.NUM.PETA=1e15,nc.NUM.TERA=1e12,nc.NUM.GIGA=1e9,nc.NUM.MEGA=1e6,nc.NUM.KILO=1e3,nc.NUM.MILLI=.001,nc.NUM.MICRO=1e-6,nc.NUM.NANO=1e-9,nc.NUM.PICO=1e-12,nc.NUM.FEMTO=1e-15,nc.NUM.ATTO=1e-18,nc.NUM.ZEPTO=1e-21,nc.NUM.YOCTO=1e-24,nu=nc;var nd={},np={},nm={},nv={},nh=nv={};function ng(){throw Error("setTimeout has not been defined")}function nb(){throw Error("clearTimeout has not been defined")}function nx(e){if(t===setTimeout)return setTimeout(e,0);if((t===ng||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(n){try{return t.call(null,e,0)}catch(n){return t.call(this,e,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:ng}catch(e){t=ng}try{r="function"==typeof clearTimeout?clearTimeout:nb}catch(e){r=nb}}();var n_=[],ny=!1,nw=-1;function nS(){ny&&i&&(ny=!1,i.length?n_=i.concat(n_):nw=-1,n_.length&&nM())}function nM(){if(!ny){var e=nx(nS);ny=!0;for(var n=n_.length;n;){for(i=n_,n_=[];++nw<n;)i&&i[nw].run();nw=-1,n=n_.length}i=null,ny=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===nb||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(n){try{return r.call(null,e)}catch(n){return r.call(this,e)}}}(e)}}function nA(e,n){this.fun=e,this.array=n}function nT(){}nh.nextTick=function(e){var n=Array(arguments.length-1);if(arguments.length>1)for(var t=1;t<arguments.length;t++)n[t-1]=arguments[t];n_.push(new nA(e,n)),1!==n_.length||ny||nx(nM)},nA.prototype.run=function(){this.fun.apply(null,this.array)},nh.title="browser",nh.browser=!0,nh.env={},nh.argv=[],nh.version="",nh.versions={},nh.on=nT,nh.addListener=nT,nh.once=nT,nh.off=nT,nh.removeListener=nT,nh.removeAllListeners=nT,nh.emit=nT,nh.prependListener=nT,nh.prependOnceListener=nT,nh.listeners=function(e){return[]},nh.binding=function(e){throw Error("process.binding is not supported")},nh.cwd=function(){return"/"},nh.chdir=function(e){throw Error("process.chdir is not supported")},nh.umask=function(){return 0},(function(){var e,n,t,r;"undefined"!=typeof performance&&null!==performance&&performance.now?nm=function(){return performance.now()}:null!=nv&&nv.hrtime?(nm=function(){return(e()-r)/1e6},n=nv.hrtime,r=(e=function(){var e;return 1e9*(e=n())[0]+e[1]})()-1e9*nv.uptime()):Date.now?(nm=function(){return Date.now()-t},t=Date.now()):(nm=function(){return new Date().getTime()-t},t=new Date().getTime())}).call(nm);for(var nO="undefined"==typeof window?o:window,nF=["moz","webkit"],nE="AnimationFrame",nD=nO["request"+nE],nC=nO["cancel"+nE]||nO["cancelRequest"+nE],nk=0;!nD&&nk<nF.length;nk++)nD=nO[nF[nk]+"Request"+nE],nC=nO[nF[nk]+"Cancel"+nE]||nO[nF[nk]+"CancelRequest"+nE];if(!nD||!nC){var nR=0,nL=0,nz=[],nP=1e3/60;nD=function(e){if(0===nz.length){var n=nm(),t=Math.max(0,nP-(n-nR));nR=t+n,setTimeout(function(){var e=nz.slice(0);nz.length=0;for(var n=0;n<e.length;n++)if(!e[n].cancelled)try{e[n].callback(nR)}catch(e){setTimeout(function(){throw e},0)}},Math.round(t))}return nz.push({handle:++nL,callback:e,cancelled:!1}),nL},nC=function(e){for(var n=0;n<nz.length;n++)nz[n].handle===e&&(nz[n].cancelled=!0)}}(np=function(e){return nD.call(nO,e)}).cancel=function(){nC.apply(nO,arguments)},np.polyfill=function(e){e||(e=nO),e.requestAnimationFrame=nD,e.cancelAnimationFrame=nC};var nN={};nN=o.performance&&o.performance.now?function(){return performance.now()}:Date.now||function(){return+new Date};var nG={},nU={},nI="";nU=function(e,n){if("string"!=typeof e)throw TypeError("expected a string");if(1===n)return e;if(2===n)return e+e;var t=e.length*n;if(a!==e||void 0===a)a=e,nI="";else if(nI.length>=t)return nI.substr(0,t);for(;t>nI.length&&n>1;)1&n&&(nI+=e),n>>=1,e+=e;return nI+=e,nI=nI.substr(0,t)};var nB={},nK=Object.getOwnPropertySymbols,n$=Object.prototype.hasOwnProperty,nV=Object.prototype.propertyIsEnumerable;nB=!function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var n={},t=0;t<10;t++)n["_"+String.fromCharCode(t)]=t;var r=Object.getOwnPropertyNames(n).map(function(e){return n[e]});if("0123456789"!==r.join(""))return!1;var i={};if("abcdefghijklmnopqrst".split("").forEach(function(e){i[e]=e}),"abcdefghijklmnopqrst"!==Object.keys(Object.assign({},i)).join(""))return!1;return!0}catch(e){return!1}}()?function(e,n){for(var t,r,i=function(e){if(null==e)throw TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),a=1;a<arguments.length;a++){for(var o in t=Object(arguments[a]))n$.call(t,o)&&(i[o]=t[o]);if(nK){r=nK(t);for(var s=0;s<r.length;s++)nV.call(t,r[s])&&(i[r[s]]=t[r[s]])}}return i}:Object.assign;var nj={};function nH(e,n){var t={};return t[e]=n,t}function nW(e){return e}function nq(e,n){return e?nU(e,n):""}function nY(e){return e?"\n":""}function nQ(e,n,t,r){for(var i=nq(t,r+1),a=nY(t),o=t?" ":"",s="",f=0,l=e.length;f<l;f++)for(var u=0,c=n.length;u<c;u++)s+=i+e[f]+(0===e[f].indexOf("@")?" ":":")+o+n[u]+";"+a;return s}nj=function(e){return null==e?[]:Array.isArray(e)?e:[e]},nG=function(e,n){function t(e,t){return nj(e).reduce(function(e,r){return e.concat(n.property(r,t))},[])}function r(e,t){return nj(e).reduce(function(e,r){return e.concat(n.value(r,t))},[])}return"number"==typeof(n=nB({indent:"",property:nW,value:nW,selector:nW},n)).indent&&(n.indent=nU(" ",n.indent)),nj(e).map(function(e){return function e(i,a){var o="";return Object.keys(i).forEach(function(s){var f=i[s];if("string"==typeof f||Array.isArray(f)&&f.length&&"object"!=typeof f[0]){o+=nQ(t(s,f),r(f,s),n.indent,a-1);return}if(Array.isArray(f)){f.forEach(function(n){o+=e(nH(s,n),a)});return}nj(s).reduce(function(e,t){return e.concat(n.selector(t,f))},[]).forEach(function(l){var u,c;o+=nq(u=n.indent,a)+l+(u?" ":"")+"{"+nY(u),Object.keys(f).forEach(function(f){var l=i[s][f];"object"!=typeof l||Array.isArray(l)?o+=nQ(t(f,l),r(l,f),n.indent,a):o+=e(nH(f,l),a+1)}),o+=nq(c=n.indent,a)+"}"+nY(c)})}),o}(e,0)}).join(nY(n.indent))},nd=function e(n){if(!(this instanceof e))return new e(n);"string"==typeof n&&(n=nX[n]?{position:n}:{container:n}),(n=n||{}).container?"string"==typeof n.container?this.container=document.querySelector(n.container):this.container=n.container:this.container=document.body||document.documentElement,this.element=document.createElement("div"),this.element.className="fps",this.element.innerHTML='<div class="fps-bg"></div><canvas class="fps-canvas"></canvas><span class="fps-text">fps <span class="fps-value">60.0</span></span>',this.container.appendChild(this.element),this.canvas=this.element.querySelector(".fps-canvas"),this.textEl=this.element.querySelector(".fps-text"),this.valueEl=this.element.querySelector(".fps-value"),this.bgEl=this.element.querySelector(".fps-bg");var t=n.css||n.style||"";"object"==typeof t&&(t=nG(t));var r="";r=nX[n.position]||nX["top-left"],this.element.style.cssText=["line-height: 1;","position: fixed;","font-family: Roboto, sans-serif;","z-index: 1;","font-weight: 300;","font-size: small;","padding: 1rem;",r,n.color?"color:"+n.color:"",t].join(""),this.canvas.style.cssText="position: relative;width: 2em;height: 1em;display: block;float: left;margin-right: .333em;",this.bgEl.style.cssText="position: absolute;height: 1em;width: 2em;background: currentcolor;opacity: .1;",this.canvas.width=parseInt(getComputedStyle(this.canvas).width)||1,this.canvas.height=parseInt(getComputedStyle(this.canvas).height)||1,this.context=this.canvas.getContext("2d");var i=this.context,a=this.canvas.width,o=this.canvas.height,s=0,f=0,l=n.values||Array(this.canvas.width),u=n.period||1e3,c=n.max||100,d=this;np(function e(){s++;var n=nN();if(n-f>u){f=n,l.push(s/(c*u*.001)),l=l.slice(-a),s=0,i.clearRect(0,0,a,o),i.fillStyle=getComputedStyle(d.canvas).color;for(var t=a;t--;){var r=l[t];if(null==r)break;i.fillRect(t,o-o*r,1,o*r)}d.valueEl.innerHTML=(l[l.length-1]*c).toFixed(1)}np(e)})};var nX={"top-left":"left: 0; top: 0;","top-right":"right: 0; top: 0;","bottom-right":"right: 0; bottom: 0;","bottom-left":"left: 0; bottom: 0;"};const{max:nJ}=Math;var nZ=(e=1,n=2,t=1)=>nJ(1,e-n+1)*n*t,n0={};n0="/** Grid fragment shader. */\n\n#ifdef GL_EXT_draw_buffers\n  #extension GL_EXT_draw_buffers : require\n#endif\n\nprecision highp float;\n#define GLSLIFY 1\n\ngrid_useSamples\n\n#ifdef grid_output_motionFull\n  grid_useReads_motionFull\n#endif\n#ifdef grid_output_motionBase\n  grid_useReads_motionBase\n#endif\n\n/** @todo `gl-gpgpu` should skip passes with no output; here for mass. */\n#if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n  #ifdef grid_mergedStates\n    uniform sampler2D grid_states;\n  #else\n    uniform sampler2D grid_states[grid_stepsPast*grid_textures];\n  #endif\n\n  uniform float grid_stepNow;\n#endif\n#if defined(grid_output_motionFull)\n  uniform vec4 grid_stateShape;\n#endif\n\n#if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n  uniform vec3 g;\n  uniform float dt;\n\n  uniform vec2 rescaleMass;\n  uniform vec2 rescaleMotion;\n\n  float when_gt_1540259130(float x, float y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec2 when_gt_1540259130(vec2 x, vec2 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec3 when_gt_1540259130(vec3 x, vec3 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec4 when_gt_1540259130(vec4 x, vec4 y) {\n  return max(sign(x - y), 0.0);\n}\n\n  /**\n * Convenience to sample entries safely at their texel center.\n *\n * @param {vec2} `uv` UV texture sample coordinate, expect range `[0, 1]`.\n * @param {float|int|vec2|ivec2} `[size=1.0]` Texture's size, expect\n *   `[width, height]`, or if given a scalar interpret both as `side`.\n * @param {float|vec2} `[offset=0.5]` Texel offset, expect range `[0, 1]`.\n *\n * @returns {vec2} The UV with offset to texel center, expect range\n *   `[0+offset, 1-offset]`/`[0+offset.x, 1-offset.y]`.\n */\n\nvec2 offsetUV(vec2 uv, float size, float offset) {\n  return ((uv*(size-1.0))+offset)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, float offset) {\n  return ((uv*(size-1.0))+offset)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, vec2 offset) {\n  return ((uv*(size-1.0))+offset)/size;\n}\n\nvec2 offsetUV(vec2 uv, int size, float offset) {\n  return offsetUV(uv, float(size), offset);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, float offset) {\n  return offsetUV(uv, vec2(size), offset);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, vec2 offset) {\n  return offsetUV(uv, vec2(size), offset);\n}\n\nvec2 offsetUV(vec2 uv, float size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, vec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, int size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, ivec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv) { return offsetUV(uv, 1.0, 0.5); }\n\n  /** Exponential notation packed into a vector. */\nfloat exponent(vec2 basePower) { return basePower.s*pow(1e1, basePower.t); }\n\n#endif\n#if defined(grid_output_motionFull)\n  uniform vec4 boundsIn;\n  uniform float boundsHit;\n\n  float when_lt_2281831123(float x, float y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec2 when_lt_2281831123(vec2 x, vec2 y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec3 when_lt_2281831123(vec3 x, vec3 y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec4 when_lt_2281831123(vec4 x, vec4 y) {\n  return max(sign(y - x), 0.0);\n}\n\n  \n\nfloat when_ge_529295689(float x, float y) {\n  return 1.0 - when_lt_2281831123(x, y);\n}\n\nvec2 when_ge_529295689(vec2 x, vec2 y) {\n  return 1.0 - when_lt_2281831123(x, y);\n}\n\nvec3 when_ge_529295689(vec3 x, vec3 y) {\n  return 1.0 - when_lt_2281831123(x, y);\n}\n\nvec4 when_ge_529295689(vec4 x, vec4 y) {\n  return 1.0 - when_lt_2281831123(x, y);\n}\n\n#endif\n\nvarying vec2 grid_uv;\n\nconst vec2 v0 = vec2(0);\n\n#if defined(grid_output_motionFull)\n  const float hitStop = 0.0;\n  const float hitBack = 1.0;\n  const float hitBounce = 2.0;\n#endif\n\nvoid main() {\n  #if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n    #ifdef readMass\n    #elif defined(grid_output_motionFull)\n      #define readMass grid_reads_motionFull_mass\n    #elif defined(grid_output_motionBase)\n      #define readMass grid_reads_motionBase_mass\n    #endif\n\n    // grid_tapState(grid_uv);\n    grid_tapState(offsetUV(grid_uv, grid_stateShape.xy));\n\n    float rescaledMass = exponent(rescaleMass);\n    float rescaledMotion = exponent(rescaleMotion);\n\n    float mass = rescaledMass*grid_data[readMass].grid_channels_mass;\n    float on = when_gt_1540259130(mass, 0.0);\n    float massScale = 1.0/mix(1.0, mass, on);\n  #endif\n\n  #ifdef grid_output_motionFull\n    vec2 motionFull = rescaledMotion*\n      grid_data[grid_reads_motionFull_motionFull].grid_channels_motionFull;\n\n    motionFull *= massScale;\n\n    /** External forces. */\n    motionFull += normalize(g.xy-grid_uv)*g.z*dt;\n\n    /** Boundaries. */\n\n    vec2 at = grid_uv*grid_stateShape.xy;\n\n    vec4 boundsTo = vec4(boundsIn.xy, boundsIn.zw+grid_stateShape.xy)-at.xyxy;\n\n    vec4 boundsOut = vec4(when_gt_1540259130(boundsTo.xy, v0)*when_lt_2281831123(motionFull, v0),\n      when_lt_2281831123(boundsTo.zw, v0)*when_gt_1540259130(motionFull, v0));\n\n    vec2 moveStop = v0;\n    vec2 moveBack = (boundsTo.xy*boundsOut.xy)+(boundsTo.zw*boundsOut.zw);\n    vec2 moveBounce = -motionFull;\n    float geStop = when_ge_529295689(boundsHit, hitStop);\n    float geBack = when_ge_529295689(boundsHit, hitBack);\n    float geBounce = when_ge_529295689(boundsHit, hitBounce);\n    vec2 moveHit = motionFull;\n\n    moveHit = mix(moveHit, moveStop, geStop);\n    moveHit = mix(moveHit, moveBack, geBack);\n    moveHit = mix(moveHit, moveBounce, geBounce);\n    motionFull = mix(motionFull, moveHit, boundsOut.xy+boundsOut.zw);\n\n    // grid_output_motionFull = (on*motionFull)/rescaledMotion;\n    grid_output_motionFull = motionFull/rescaledMotion;\n  #endif\n  #ifdef grid_output_motionBase\n    vec2 motionBase = rescaledMotion*\n      grid_data[grid_reads_motionBase_motionBase].grid_channels_motionBase;\n\n    // grid_output_motionBase = (on*motionBase*massScale)/rescaledMotion;\n    grid_output_motionBase = (motionBase*massScale)/rescaledMotion;\n  #endif\n}\n";var n1={};n1="/** Grid-to-points fragment shader. */\n\n#ifdef GL_EXT_draw_buffers\n  #extension GL_EXT_draw_buffers : require\n#endif\n\nprecision highp float;\n#define GLSLIFY 1\n\nstruct Kernel2 {\n  vec2 base;\n  vec2 diff;\n  // Only using `[i].xy` channels of each layer `i`; `vec2[3]` is tricky.\n  mat3 weights;\n};\n\nstruct UP2 {\n  mat2 u;\n  mat2 p;\n};\n\nstruct SVD2 {\n  mat2 u;\n  mat2 sigma;\n  mat2 v;\n};\n\npoints_useSamples\ngrid_useSamples\n\n#ifdef points_output_position\n  points_useReads_position\n#endif\n#ifdef points_output_motion\n  points_useReads_motion\n#endif\n#ifdef points_output_affine\n  points_useReads_affine\n#endif\n#ifdef points_output_deform\n  points_useReads_deform\n#endif\n\n#if defined(points_output_position) || defined(points_output_motion) || \\\n    defined(points_output_affine)\n  grid_useReads_mass\n#endif\n\n#if defined(points_output_position) || defined(points_output_motion) || \\\n    defined(points_output_affine) || defined(points_output_deform)\n  #ifdef points_mergedStates\n    uniform sampler2D points_states;\n  #else\n    uniform sampler2D points_states[points_stepsPast*points_textures];\n  #endif\n\n  uniform float points_stepNow;\n  uniform vec4 points_stateShape;\n#endif\n\n#if defined(points_output_position) || defined(points_output_motion) || \\\n    defined(points_output_affine)\n  #ifdef grid_mergedStates\n    uniform sampler2D grid_states;\n  #else\n    uniform sampler2D grid_states[grid_stepsPast*grid_textures];\n  #endif\n\n  uniform float grid_stepNow;\n  uniform vec4 grid_stateShape;\n#endif\n\n#if defined(points_output_mass)\n  /** @todo Move to looking up material types? */\n  uniform float mass;\n#endif\n#if defined(points_output_stress)\n  /** @todo Move to looking up material types? */\n  uniform float volume;\n#endif\n#if defined(points_output_position) || defined(points_output_motion)\n  /** Volume change threshold comparison. */\n  uniform vec2 volumeSplit;\n  /** ASFLIP motion adjustment. */\n  uniform float motionAdjust;\n  /** ASFLIP position adjustment range. */\n  uniform vec2 positionAdjusts;\n#endif\n#if defined(points_output_deform) || defined(points_output_stress)\n  /**\n  * Mechanics parameters.\n  *\n  * @todo Move to individual particles looking up material types?\n  */\n\n  /** Bulk modulus. */\n  uniform float bulkMod;\n  /** Shear modulus. */\n  uniform float shearMod;\n#endif\n#if defined(points_output_deform)\n  /**\n  * Plasticity parameters.\n  *\n  * @todo Move to individual particles looking up material types?\n  */\n  uniform float materialFriction;\n#endif\n#if defined(points_output_position)\n  uniform float boundsClamp;\n#endif\n#if defined(points_output_position) || defined(points_output_motion) || \\\n    defined(points_output_affine) || defined(points_output_deform) || \\\n    defined(points_output_stress)\n  uniform float spawnOnAny;\n  uniform float spawnOnOut;\n  uniform float spawnOnSlow;\n  uniform float spawnOnCentre;\n#endif\n#if defined(points_output_motion)\n  uniform vec2 wander;\n#endif\n\nuniform float dt;\n\nuniform vec4 bounds;\nuniform float chaos;\n\nuniform vec2 rescaleMass;\nuniform vec2 rescalePosition;\nuniform vec2 rescaleMotion;\nuniform vec2 rescaleAffine;\nuniform vec2 rescaleDeform;\nuniform vec2 rescaleStress;\n\nvarying vec2 points_uv;\n\nconst vec2 v0 = vec2(0);\nconst vec2 v1 = vec2(1);\nconst mat2 m0 = mat2(0);\n\nfloat when_lt_2281831123(float x, float y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec2 when_lt_2281831123(vec2 x, vec2 y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec3 when_lt_2281831123(vec3 x, vec3 y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec4 when_lt_2281831123(vec4 x, vec4 y) {\n  return max(sign(y - x), 0.0);\n}\n\nfloat when_gt_529295689(float x, float y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec2 when_gt_529295689(vec2 x, vec2 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec3 when_gt_529295689(vec3 x, vec3 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec4 when_gt_529295689(vec4 x, vec4 y) {\n  return max(sign(x - y), 0.0);\n}\n\nfloat when_le_184046362(float x, float y) {\n  return 1.0 - when_gt_529295689(x, y);\n}\n\nvec2 when_le_184046362(vec2 x, vec2 y) {\n  return 1.0 - when_gt_529295689(x, y);\n}\n\nvec3 when_le_184046362(vec3 x, vec3 y) {\n  return 1.0 - when_gt_529295689(x, y);\n}\n\nvec4 when_le_184046362(vec4 x, vec4 y) {\n  return 1.0 - when_gt_529295689(x, y);\n}\n\nfloat when_ge_782122993(float x, float y) {\n  return 1.0 - when_lt_2281831123(x, y);\n}\n\nvec2 when_ge_782122993(vec2 x, vec2 y) {\n  return 1.0 - when_lt_2281831123(x, y);\n}\n\nvec3 when_ge_782122993(vec3 x, vec3 y) {\n  return 1.0 - when_lt_2281831123(x, y);\n}\n\nvec4 when_ge_782122993(vec4 x, vec4 y) {\n  return 1.0 - when_lt_2281831123(x, y);\n}\n\n// Math.PI * 2\nconst float TAU = 6.28318530718;\n\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec2 map(vec2 value, vec2 inMin, vec2 inMax, vec2 outMin, vec2 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec3 map(vec3 value, vec3 inMin, vec3 inMax, vec3 outMin, vec3 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec4 map(vec4 value, vec4 inMin, vec4 inMax, vec4 outMin, vec4 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nfloat determinant(float m) {\n  return m;\n}\n\nfloat determinant(mat2 m) {\n  return m[0][0] * m[1][1] - m[0][1] * m[1][0]; \n}\n\nfloat determinant(mat3 m) {\n  return m[0][0] * (m[2][2]*m[1][1] - m[1][2]*m[2][1])\n       + m[0][1] * (m[1][2]*m[2][0] - m[2][2]*m[1][0])\n       + m[0][2] * (m[2][1]*m[1][0] - m[1][1]*m[2][0]);\n}\n\nfloat determinant(mat4 m) {\n  float\n      b00 = m[0][0] * m[1][1] - m[0][1] * m[1][0],\n      b01 = m[0][0] * m[1][2] - m[0][2] * m[1][0],\n      b02 = m[0][0] * m[1][3] - m[0][3] * m[1][0],\n      b03 = m[0][1] * m[1][2] - m[0][2] * m[1][1],\n      b04 = m[0][1] * m[1][3] - m[0][3] * m[1][1],\n      b05 = m[0][2] * m[1][3] - m[0][3] * m[1][2],\n      b06 = m[2][0] * m[3][1] - m[2][1] * m[3][0],\n      b07 = m[2][0] * m[3][2] - m[2][2] * m[3][0],\n      b08 = m[2][0] * m[3][3] - m[2][3] * m[3][0],\n      b09 = m[2][1] * m[3][2] - m[2][2] * m[3][1],\n      b10 = m[2][1] * m[3][3] - m[2][3] * m[3][1],\n      b11 = m[2][2] * m[3][3] - m[2][3] * m[3][2];\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\nfloat transpose(float m) {\n  return m;\n}\n\nmat2 transpose(mat2 m) {\n  return mat2(m[0][0], m[1][0],\n              m[0][1], m[1][1]);\n}\n\nmat3 transpose(mat3 m) {\n  return mat3(m[0][0], m[1][0], m[2][0],\n              m[0][1], m[1][1], m[2][1],\n              m[0][2], m[1][2], m[2][2]);\n}\n\nmat4 transpose(mat4 m) {\n  return mat4(m[0][0], m[1][0], m[2][0], m[3][0],\n              m[0][1], m[1][1], m[2][1], m[3][1],\n              m[0][2], m[1][2], m[2][2], m[3][2],\n              m[0][3], m[1][3], m[2][3], m[3][3]);\n}\n\n/**\n * Convenience to sample entries safely at their texel center.\n *\n * @param {vec2} `uv` UV texture sample coordinate, expect range `[0, 1]`.\n * @param {float|int|vec2|ivec2} `[size=1.0]` Texture's size, expect\n *   `[width, height]`, or if given a scalar interpret both as `side`.\n * @param {float|vec2} `[offset=0.5]` Texel offset, expect range `[0, 1]`.\n *\n * @returns {vec2} The UV with offset to texel center, expect range\n *   `[0+offset, 1-offset]`/`[0+offset.x, 1-offset.y]`.\n */\n\nvec2 offsetUV(vec2 uv, float size, float offset) {\n  return ((uv*(size-1.0))+offset)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, float offset) {\n  return ((uv*(size-1.0))+offset)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, vec2 offset) {\n  return ((uv*(size-1.0))+offset)/size;\n}\n\nvec2 offsetUV(vec2 uv, int size, float offset) {\n  return offsetUV(uv, float(size), offset);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, float offset) {\n  return offsetUV(uv, vec2(size), offset);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, vec2 offset) {\n  return offsetUV(uv, vec2(size), offset);\n}\n\nvec2 offsetUV(vec2 uv, float size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, vec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, int size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, ivec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv) { return offsetUV(uv, 1.0, 0.5); }\n\n// float trace(mat2 m) { return m[0][0]+m[1][1]; }\n\n#define createTrace(mat, n) \\\nfloat trace(mat m) { \\\n  float t = 0.0; \\\n   \\\n  for(int d = 0; d < n; ++d) { t += m[d][d]; } \\\n   \\\n  return t; \\\n}\n\ncreateTrace(mat2, 2)\ncreateTrace(mat3, 3)\ncreateTrace(mat4, 4)\n\n// mat2 outerProduct(vec2 v0, vec2 v1) { return mat2(v0*v1[0], v0*v1[1]); }\n\n#define createOuterProduct(vec, mat, n) \\\nmat outerProduct(vec v0, vec v1) { \\\n  mat m; \\\n   \\\n  for(int d = 0; d < n; ++d) { m[d] = v0*v1[d]; } \\\n   \\\n  return m; \\\n}\n\ncreateOuterProduct(vec2, mat2, 2)\ncreateOuterProduct(vec3, mat3, 3)\ncreateOuterProduct(vec4, mat4, 4)\n\n// float area(vec2 v) { return v.x*v.y; }\n\n#define createArea(vec, n) \\\nfloat area(vec v) { \\\n  float a = 1.0; \\\n   \\\n  for(int d = 0; d < n; ++d) { a *= v[d]; } \\\n   \\\n  return a; \\\n}\n\ncreateArea(vec2, 2)\ncreateArea(vec3, 3)\ncreateArea(vec4, 4)\n\n/** Exponential notation packed into a vector. */\nfloat exponent(vec2 basePower) { return basePower.s*pow(1e1, basePower.t); }\n\n#if defined(points_output_position) || defined(points_output_motion) || \\\n    defined(points_output_affine)\n  /**\n * Quadratic weight kernel.\n *\n * @see [Equation 123, The Material Point Method for Simulating Continuum\n *   Materials (mpm.graphics)](https://drive.google.com/open?id=1rI4gsBH3BstH7EYQA451Pb56MrJ7hVsu&usp=drive_fs)\n * @see [Incremental MPM](https://github.com/nialltl/incremental_mpm/blob/master/Assets/3.%20MLS_MPM_Fluid_Multithreaded/MLS_MPM_Fluid_Multithreaded.cs#L337-L344)\n * @see [MLS-MPM-88](https://github.com/yuanming-hu/taichi_mpm/blob/master/mls-mpm88-explained.cpp#L151-L158)\n *\n * @todo Test more and ensure this is the equivalent lookup.\n */\n\nstruct Kernel3 {\n  vec3 base;\n  vec3 diff;\n  mat3 weights;\n};\n\n/** The cell base for each kernel type. */\n#define createToBaseShare(t) \\\nt toBase(t at) { \\\n  t base; \\\n   \\\n  return toBase(at, base); \\\n}\n\n#ifdef kernelTypeCentre\n  #define createToBase(t) \\\n  t toBase(t at, out t base) { return (base = floor(at)); } \\\n  createToBaseShare(t)\n#else\n  /**\n   * @todo Test if this is correct for negative numbers, seems to create gaps\n   *   between positive and negative quadrants.\n   */\n  #define createToBase(t) \\\n  t toBase(t at, out t base) { return (base = floor(at-0.5)); } \\\n  createToBaseShare(t)\n#endif\n\ncreateToBase(float)\ncreateToBase(vec2)\ncreateToBase(vec3)\n\n/** The cell base for each kernel type. */\n#define createToDiffShare(t) \\\nt toDiff(t at, t base) { \\\n  t diff; \\\n   \\\n  return toDiff(at, base, diff); \\\n}\n\n#ifdef kernelTypeCentre\n  #define createToDiff(t) \\\n  t toDiff(t at, t base, out t diff) { return (diff = (at-base)-0.5); } \\\n  createToDiffShare(t)\n#else\n  #define createToDiff(t) \\\n  t toDiff(t at, t base, out t diff) { return (diff = at-base); } \\\n  createToDiffShare(t)\n#endif\n\ncreateToDiff(float)\ncreateToDiff(vec2)\ncreateToDiff(vec3)\n\nvec2 fillWeight(inout vec3 w, vec2 v) { return w.xy = v; }\nvec3 fillWeight(inout vec3 w, vec3 v) { return w = v; }\n\n#ifdef kernelTypeCentre\n  #define createToWeightsMain(vec) \\\n    vec w0 = 0.5-diff; \\\n    vec w1 = diff; \\\n    vec w2 = 0.5+diff;\n#else\n  #define createToWeightsMain(vec) \\\n    vec w0 = 1.5-diff; \\\n    vec w1 = diff-1.0; \\\n    vec w2 = diff-0.5;\n#endif\n\n#define createToWeights(vec, mat) \\\n \\\nmat toWeights(vec diff, out mat weights) { \\\n  createToWeightsMain(vec) \\\n   \\\n  fillWeight(weights[0], 0.5*(w0*w0)); \\\n  fillWeight(weights[1], 0.75-(w1*w1)); \\\n  fillWeight(weights[2], 0.5*(w2*w2)); \\\n   \\\n  return weights; \\\n} \\\n \\\nmat toWeights(vec diff) { \\\n  mat weights; \\\n   \\\n  return toWeights(diff, weights); \\\n}\n\ncreateToWeights(vec2, mat3)\ncreateToWeights(vec3, mat3)\n\n#define createToKernel(vec, mat, Kernel) \\\n \\\nKernel toKernel(vec at, out vec base, out vec diff, out mat weights) { \\\n  base = toBase(at, base); \\\n  diff = toDiff(at, base, diff); \\\n  weights = toWeights(diff, weights); \\\n   \\\n  return Kernel(base, diff, weights); \\\n} \\\n \\\nKernel toKernel(vec at, out vec base, out vec diff) { \\\n  mat weights; \\\n   \\\n  return toKernel(at, base, diff, weights); \\\n} \\\n \\\nKernel toKernel(vec at, out vec base) { \\\n  vec diff; \\\n   \\\n  return toKernel(at, base, diff); \\\n} \\\n \\\nKernel toKernel(vec at) { \\\n  vec base; \\\n   \\\n  return toKernel(at, base); \\\n}\n\ncreateToKernel(vec2, mat3, Kernel2)\ncreateToKernel(vec3, mat3, Kernel3)\n\n  /** The cell offset for each kernel type. */\n#define createToOffsetShare(t) \\\nt toOffset(t offset) { \\\n  t to; \\\n   \\\n  return toOffset(offset, to); \\\n}\n\n#ifdef kernelTypeCentre\n  #define createToOffset(t) \\\n  t toOffset(in t offset, out t to) { return (to = offset-1.0); } \\\n  createToOffsetShare(t)\n#else\n  #define createToOffset(t) \\\n  t toOffset(in t offset, out t to) { return (to = offset); } \\\n  createToOffsetShare(t)\n#endif\n\ncreateToOffset(float)\ncreateToOffset(vec2)\ncreateToOffset(vec3)\n\n  /**\n * The distance function for each kernel type.\n *\n * @see [Incremental MPM cell distance](https://github.com/nialltl/incremental_mpm/blob/master/Assets/3.%20MLS_MPM_Fluid_Multithreaded/MLS_MPM_Fluid_Multithreaded.cs#L187-L201)\n * @see [PyASFLIP cell distance](https://github.com/nepluno/pyasflip/blob/master/pyasflip.py#L320-L339)\n * @todo Not sure this is right, the scales might be off.\n * @todo Work out the algebra more nicely in terms of `offset` and `diff`.\n */\n\n#ifdef kernelTypeCentre\n  /**\n   * @example ```\n   * // Goal:\n   * dist(offset, base, at) = ((base+offset-1)-at)+0.5\n   * // From offset:\n   * offset = offset-1\n   * // Thus:\n   * dist(offset = offset-1, base, at) = ((base+offset)-at)+0.5\n   * // From weights:\n   * diff(base, at) = (at-base)-0.5\n   * // And:\n   * base(at) = floor(at)\n   * // @todo The rest\n   * ```\n   *\n   * @todo Derive the form `toDistance(offset, diff)`.\n   */\n  #define createToDistance(t) \\\n   \\\n  t toDistance(t offset, t base, t at) { \\\n    return ((base+offset)-at)+0.5; \\\n  } \\\n   \\\n  t toDistance(t offset, t diff);\n#else\n  \n\n  /**\n   * @example ```\n   * // Goal:\n   * dist(offset, diff) = offset-diff\n   * // From weights:\n   * diff(base, at) = at-base\n   * // Thus:\n   * dist(offset, base, at) = offset-diff(base, at) = offset-(at-base)\n   * ```\n   */\n  #define createToDistance(t) \\\n   \\\n  t toDistance(t offset, t diff) { return offset-diff; } \\\n   \\\n  t toDistance(t offset, t base, t at) { \\\n    return toDistance(offset, toDiff(at, base)); \\\n  }\n#endif\n\ncreateToDistance(float)\ncreateToDistance(vec2)\ncreateToDistance(vec3)\n\n#endif\n#if defined(points_output_deform) || defined(points_output_stress)\n  \n\n/**\n * Perform polar decomposition `(a = up)` for a 2D matrix.\n *\n * @param {mat2} a An input 2D matrix.\n *\n * @returns {struct} `to` Decomposed 2D matrices `u`, `p`.\n * @returns {mat2} `to.u` A 2D orthogonal matrix.\n * @returns {mat2} `to.p` A 2D positive or semi-positive definite matrix.\n *\n * @see [Taichi implementation of 2D matrix polar decomposition](https://github.com/taichi-dev/taichi/blob/e9f19b831c8a7b04a94ff5b06179bbe21f80a783/python/taichi/_funcs.py#L53-L96)\n * @see [Mathematical concept](https://en.wikipedia.org/wiki/Polar_decomposition)\n */\nUP2 toPolar(in mat2 a, out mat2 u, out mat2 p) {\n  UP2 to = UP2(mat2(1), a);\n  vec2 a0 = a[0];\n  vec2 a1 = a[1];\n  float a00 = a0[0];\n  float a01 = a0[1];\n  float a10 = a1[0];\n  float a11 = a1[1];\n\n  // If `a` is a zero matrix we simply return the pair `identity, a`.\n  if(abs(a00)+abs(a01)+abs(a10)+abs(a11) == 0.0) { return to; }\n\n  float aDet = determinant(a);\n  float flip = sign(aDet);\n  mat2 b = mat2(a00+(a11*flip), a01-(a10*flip), a10-(a01*flip), a11+(a00*flip));\n  // Here `det(b) != 0` if `a` is not the zero matrix.\n  float k = 1.0/sqrt(abs(determinant(b)));\n\n  to.u = b*k;\n  to.p = ((transpose(a)*a)+(abs(aDet)*mat2(1)))*k;\n\n  return to;\n}\n\nUP2 toPolar(in mat2 a) {\n  mat2 u;\n  mat2 p;\n\n  return toPolar(a, u, p);\n}\n\nconst float eps_1 = 1e-5;\n\n/**\n * Perform singular value decomposition `(a = us*transpose(v))` for a 2D matrix.\n *\n * @param {mat2} a An input 2D matrix.\n *\n * @returns {struct} `to` Decomposed 2D matrixes `u`, `s`, `v`.\n * @returns {mat2} `to.u` A 2D matrix.\n * @returns {mat2} `to.s` A 2D matrix.\n * @returns {mat2} `to.v` A 2D matrix.\n *\n * @see [Taichi Python code](https://github.com/taichi-dev/taichi/blob/e9f19b831c8a7b04a94ff5b06179bbe21f80a783/python/taichi/_funcs.py#L118-L157)\n * @see [Paper](https://www.seas.upenn.edu/~cffjiang/research/svd/svd.pdf)\n * @see [Mathematical concept](https://en.wikipedia.org/wiki/Singular_value_decomposition)\n */\nSVD2 toSVD(in mat2 a, out mat2 u, out mat2 sigma, out mat2 v) {\n  mat2 r;\n  mat2 s;\n\n  toPolar(a, r, s);\n\n  float vc = 1.0;\n  float vs = 0.0;\n  vec2 s0 = s[0];\n  float s01 = s0[1];\n  float s00 = s0[0];\n  float s11 = s[1][1];\n\n  if(abs(s01) >= eps_1) {\n    float tao = 0.5*(s00-s11);\n    float t = s01/(tao+(sqrt((tao*tao)+(s01*s01))*sign(tao)));\n\n    vs = -t*(vc = 1.0/sqrt((t*t)+1.0));\n\n    float vc2 = vc*vc;\n    float vs2 = vs*vs;\n    float term = 2.0*vc*vs*s01;\n\n    s00 = (vc2*s00)-term+(vs2*s11);\n    s11 = (vs2*s00)+term+(vc2*s11);\n  }\n\n  float f = when_lt_2281831123(s00, s11);\n\n  sigma = mat2(mix(s00, s11, f), 0, 0, mix(s11, s00, f));\n  v = mat2(mix(vc, -vs, f), mix(vs, vc, f), mix(-vs, -vc, f), mix(vc, -vs, f));\n\n  return SVD2(u = r*v, sigma, v);\n}\n\nSVD2 toSVD(in mat2 a) {\n  mat2 u;\n  mat2 sigma;\n  mat2 v;\n\n  return toSVD(a, u, sigma, v);\n}\n\n#endif\n#if defined(points_output_motion)\n  /**\n * @param {float} angle An angle, in radians, expects range `[0, 2*pi]`.\n * @param {float} depth A depth, expects range `[-1, 1]`.\n *\n * @see [Spherical distribution](https://observablehq.com/@rreusser/equally-distributing-points-on-a-sphere)\n */\nvec2 onSphere(float angle) { return vec2(cos(angle), sin(angle)); }\n\nvec3 onSphere(float angle, float depth) {\n  return vec3(sqrt(1.0-(depth*depth))*vec2(cos(angle), sin(angle)), depth);\n}\n\n#endif\n#if defined(points_output_deform)\n  /**\n * Project the singular values of the deformation gradient with Drucker-Prager\n * model. Determines the yield surface.\n *\n * @see [Yue et al. 2018]\n * @see [Taichi PyASFLIP](https://github.com/nepluno/pyasflip/blob/master/pyasflip.py#L206-L244)\n */\n\nconst float eps_0 = 1e-6;\n\nmat2 projectDruckerPrager(inout mat2 sigma,\n    float bulkMod, float shearMod, float friction) {\n  /**\n   * @todo Apply volume recovery, similar to damping.\n   *   Multiply the recorded volume with a rate below one for better stability.\n   *   Needs new material-point property `logSigma` and inputs `volumeRecovery`\n   *   and `volumeRecordLimit`.\n   */\n  // float jse = sigma[0][0]*sigma[1][1];\n  //\n  // for(int c = 0; c < 2; ++c) {\n  //   sigma[c][c] = max(eps, abs(sigma[c][c]*exp(logSigma*volumeRecovery)));\n  // }\n\n  float s00 = sigma[0][0];\n  float s11 = sigma[1][1];\n  float je = max(eps_0, s00*s11);\n\n  if(je >= 1.0) {\n    sigma[0][0] = sigma[1][1] = 1.0;\n\n    /**\n     * @todo Record the geometric mean of per-dimension expansions for later\n     *   volume recovery during compression, refer to [Gao et al. 2018].\n     *   Perform this operation in the log-space for better numerical stability.\n     *   For the same reason, set a limit on the recorded volume expansion.\n     */\n    // logSigma = min(volumeRecordLimit, logSigma+(log(max(eps, jse))*0.5));\n\n    return sigma;\n  }\n\n  /** Check if the stress is inside the feasible region. */\n  // logSigma = 0.0;\n\n  float je2 = je*je;\n  float s00p2 = s00*s00;\n  float s11p2 = s11*s11;\n  float traceB2 = (s00p2+s11p2)*0.5;\n  float yieldLimit = -friction*bulkMod*0.5*(je2-1.0);\n  vec2 bDev = vec2(s00p2, s11p2)-traceB2;\n  float yieldAt = shearMod*sqrt(((bDev[0]*bDev[0])+(bDev[1]*bDev[1]))/je);\n\n  if(yieldAt <= yieldLimit) { return sigma; }\n\n  /** Project to the yield surface. */\n  float bDet = s00p2*s11p2;\n  float bDetDev = bDev[0]*bDev[1];\n  float lambda1 = yieldLimit/max(eps_0, yieldAt);\n  float lambda0 = sqrt(max(0.0, bDet-(lambda1*lambda1*bDetDev)));\n\n  sigma[0][0] = sqrt(abs(lambda0+(lambda1*bDev[0])));\n  sigma[1][1] = sqrt(abs(lambda0+(lambda1*bDev[1])));\n\n  return sigma;\n}\n\n#endif\n#if defined(points_output_stress)\n  /**\n * Compute stress with Simo's [1988] neo-Hookean elasticity.\n *\n * @see [Taichi PyASFLIP](https://github.com/nepluno/pyasflip/blob/master/pyasflip.py#L247-L260)\n */\n\nmat2 neoHookeanElastic(mat2 u, mat2 sigma, float bulkMod, float shearMod) {\n  float s00 = sigma[0][0];\n  float s11 = sigma[1][1];\n  float j = s00*s11;\n  float shear = shearMod*sqrt(j);\n  float bulk = bulkMod*0.5*((j*j)-1.0);\n  float s00p2 = s00*s00;\n  float s11p2 = s11*s11;\n  float s2 = (s00p2+s11p2)*0.5;\n  mat2 stress = mat2(1);\n\n  stress[0][0] = (s00p2-s2)*shear;\n  stress[1][1] = (s11p2-s2)*shear;\n  stress = u*stress*transpose(u);\n  stress[0][0] += bulk;\n  stress[1][1] += bulk;\n\n  return stress;\n}\n\n#endif\n\nvoid main() {\n  #ifdef pReadPosition\n  #elif defined(points_output_position)\n    #define pReadPosition points_reads_position_position\n  #elif defined(points_output_motion)\n    #define pReadPosition points_reads_motion_position\n  #elif defined(points_output_affine)\n    #define pReadPosition points_reads_affine_position\n  #endif\n\n  #ifdef pReadMotion\n  #elif defined(points_output_position)\n    #define pReadMotion points_reads_position_motion\n  #elif defined(points_output_motion)\n    #define pReadMotion points_reads_motion_motion\n  #endif\n\n  #ifdef pReadMass\n  #elif defined(points_output_position)\n    #define pReadMass points_reads_position_mass\n  #endif\n\n  #ifdef pReadDeform\n  #elif defined(points_output_deform)\n    #define pReadDeform points_reads_deform_deform\n  #endif\n\n  #if defined(points_output_position) || defined(points_output_motion) || \\\n      defined(points_output_affine) || defined(points_output_deform)\n    points_tapState(offsetUV(points_uv, points_stateShape.xy));\n    // points_tapState(points_uv);\n  #endif\n\n  #if defined(points_output_position) || defined(points_output_motion) || \\\n      defined(points_output_affine)\n    float rescaledPosition = exponent(rescalePosition);\n    float rescaledMotion = exponent(rescaleMotion);\n\n    vec2 pPosition = rescaledPosition*\n      points_data[pReadPosition].points_channels_position;\n\n    /** Read grid material properties on 3 nodes in each axis. */\n    vec2 gMotionFull = v0;\n    vec2 gMotionBase = v0;\n    mat2 gAffine = m0;\n    vec2 cellAt = map(pPosition, bounds.xy, bounds.zw, v0, grid_stateShape.xy);\n    Kernel2 kernel = toKernel(cellAt);\n\n    for(int gx = 0; gx < 3; ++gx) {\n      for(int gy = 0; gy < 3; ++gy) {\n        vec2 offset = toOffset(vec2(gx, gy));\n        float weight = kernel.weights[gx].x*kernel.weights[gy].y;\n        vec2 st = (kernel.base+offset)/grid_stateShape.xy;\n\n        grid_tapState(offsetUV(st, grid_stateShape.xy));\n        // grid_tapState(st);\n\n        vec2 cMotionFull = rescaledMotion*\n          grid_data[grid_reads_mass_motionFull].grid_channels_motionFull;\n\n        vec2 cMotionBase = rescaledMotion*\n          grid_data[grid_reads_mass_motionBase].grid_channels_motionBase;\n\n        vec2 wmf = weight*cMotionFull;\n        vec2 wmb = weight*cMotionBase;\n\n        gMotionFull += wmf;\n        gMotionBase += wmb;\n\n        /** @todo Fix scaling, in both steps or one, differs to other way. */\n        // vec2 cellDist = toKernelDistance(offset, kernel.base, cellAt);\n        vec2 cellDist = toDistance(offset, kernel.base, cellAt)*\n          grid_stateShape.xy;\n\n        // gAffine += 4.0*outerProduct(grid_stateShape.xy*wmf, cellDist);\n        // gAffine += 4.0*outerProduct(wmf, grid_stateShape.xy*cellDist);\n        // gAffine += 4.0*outerProduct(wmf, cellDist);\n        gAffine += 4.0*weight*outerProduct(cMotionFull, cellDist);\n      }\n    }\n  #endif\n\n  #if defined(points_output_position) || defined(points_output_motion)\n    /**\n    * Mix grid and point velocities for ASFLIP, according to whether the\n    * material is separating.\n    * Mix full-grid-motion with particle-motion minus base-grid-motion - same\n    * as full-grid-motion but without stress or other effects applied, leaving\n    * only those effects when subtracted.\n    *\n    * @see [The ASFLIP paper](https://drive.google.com/open?id=1-3XumWRY5oFtWJdjrpzK9wjY19ukhJxQ&usp=drive_fs)\n    * @see [Taichi PyASFLIP implementation mixing old nodal motion](https://github.com/nepluno/pyasflip/blob/master/pyasflip.py#L410-L415)\n    */\n    vec2 pMotion = rescaledMotion*\n      points_data[pReadMotion].points_channels_motion;\n\n    vec2 motionSplit = motionAdjust*(pMotion-gMotionBase);\n  #endif\n\n  #if defined(points_output_motion)\n    vec2 motionTo = gMotionFull+motionSplit;\n\n    // Avoid slow spots, wander force.\n\n    float wanderOn = when_gt_529295689(wander.x, 0.0);\n    float wanderScale = wanderOn/mix(1.0, wander.x, wanderOn);\n    float wanderSlow = 1.0-clamp(dot(motionTo, motionTo)*wanderScale, 0.0, 1.0);\n\n    motionTo += wanderOn*wanderSlow*\n      (onSphere((points_uv.x*chaos*237.378)+(points_uv.y*chaos*348.13)*TAU)*wander.y);\n  #endif\n\n  #if defined(points_output_affine)\n    float rescaledAffine = exponent(rescaleAffine);\n    mat2 affineTo = gAffine;\n  #endif\n\n  #if defined(points_output_deform)\n    /**\n     * @todo Deformation and stress should ideally be calculated at the start of\n     *   the time-step not the end. Unsure if it matters much in practice, but\n     *   the output is used to calculate the position (deformation calculates\n     *   the volume which affects ASFLIP positional adjustment), it may be\n     *   better to move the deformation update to a separate step at the start\n     *   of each time-step.\n     *\n     * @see [Taichi PyASFLIP DruckerPrager plasticity, Neo-Hookean Elasticity](https://github.com/nepluno/pyasflip/blob/master/pyasflip.py#L324-L336)\n     */\n\n    float rescaledDeform = exponent(rescaleDeform);\n\n    mat2 pDeform = rescaledDeform*\n      mat2(points_data[pReadDeform].points_channels_deform);\n\n    mat2 deformTo = (mat2(1)+(dt*affineTo))*pDeform;\n\n    SVD2 deformSVD = toSVD(deformTo);\n\n    // Plasticity flow.\n    deformSVD.sigma = projectDruckerPrager(deformSVD.sigma,\n      bulkMod, shearMod, materialFriction);\n\n    // Reconstruct elastic deformation gradient after plasticity flow.\n    deformTo = deformSVD.u*deformSVD.sigma*transpose(deformSVD.v);\n  #endif\n\n  #if defined(points_output_position)\n    float rescaledMass = exponent(rescaleMass);\n    float pMass = rescaledMass*points_data[pReadMass].points_channels_mass;\n    /**\n     * @todo Try alternative volume ratio for materials where the stress depends\n     *   only on the volume ratio (e.g: weakly-compressible liquid), with large\n     *   timestep.\n     * @see [Equation 6 in ASFLIP paper](https://drive.google.com/open?id=1-3XumWRY5oFtWJdjrpzK9wjY19ukhJxQ&usp=drive_fs)\n     */\n    float volumeRatio = determinant(deformTo);\n    /** @todo Understand and test this material dilation term. */\n    float dilation = log(max(volumeSplit[0], volumeRatio))+(trace(affineTo)*dt);\n    float splitting = when_ge_782122993(dilation, volumeSplit[1]);\n    float positionAdjust = mix(positionAdjusts.x, positionAdjusts.y, splitting);\n    vec2 positionSplit = positionAdjust*motionSplit;\n    vec2 positionTo = pPosition+((gMotionFull+positionSplit)*dt);\n\n    // Boundaries.\n    positionTo = mix(positionTo,\n      clamp(positionTo, bounds.xy, bounds.zw), boundsClamp);\n  #endif\n\n  /**\n   * @todo Seem to have tracked down the volume/collision loss\n   *   clumping/compression issues to the `stress`, try to solve it.\n   */\n  #if defined(points_output_stress)\n    float rescaledStress = exponent(rescaleStress);\n\n    /**\n     * @todo This stress update is in grid-to-points just to avoid another\n     *   `toSVD(pDeform)` in the points-to-grid step; reconsider this?\n     */\n    #ifndef points_output_deform\n      SVD2 deformSVD = toSVD(pDeform);\n      // SVD2 deformSVD = toSVD(deformTo);\n    #endif\n\n    /**\n     * `D**-1` term for APIC transfers.\n     *\n     * @see [APIC transfer `D**-1` in paragraph after Eqn. 176](file:///Users/eoghanokeeffe/Library/CloudStorage/GoogleDrive-keeffeoghan@gmail.com/My%20Drive/Read/Fluid%20Continuum%20Physics/Material%20Point%20Method/The%20Material%20Point%20Method%20for%20Simulating%20Continuum%20Materials%20(mpm.graphics).pdf)\n     *\n     * @todo `D**-1` seems to be for points-to-grid transfers, not for\n     *   grid-to-points; should this use the inverse in grid-to-points, or does\n     *   it not matter, or does an issue arise from moving this stress step from\n     *   points-to-grid to grid-to-points?\n     */\n    float dInv = 4.0*area(grid_stateShape.xy);\n    // float dInv = 1.0/(4.0*area(grid_stateShape.xy));\n    // float dInv = 1.0;\n\n    /**\n     * Neo-Hookean elasticity stress to Cauchy stress.\n     *\n     * @see [MLS-MPM-88](https://github.com/yuanming-hu/taichi_mpm/blob/master/mls-mpm88-explained.cpp#L100)\n     * @see [Taichi PyASFLIP](https://github.com/nepluno/pyasflip/blob/master/pyasflip.py#L334)\n     * @see [Incremental MPM](https://github.com/nialltl/incremental_mpm/blob/master/Assets/2.%20MLS_MPM_NeoHookean_Multithreaded/MLS_MPM_NeoHookean_Multithreaded.cs#L262)\n     */\n    // mat2 stressTo = -dt*volume*volumeRatio*dInv*\n    mat2 stressTo = -dt*volume*dInv*\n      neoHookeanElastic(deformSVD.u, deformSVD.sigma, bulkMod, shearMod);\n  #endif\n\n  #if defined(points_output_position) || defined(points_output_motion) || \\\n      defined(points_output_affine) || defined(points_output_deform) || \\\n      defined(points_output_stress)\n    vec2 spawnOut = spawnOnOut*\n      (when_lt_2281831123(positionTo, bounds.xy)+when_lt_2281831123(bounds.zw, positionTo));\n\n    // Avoid slow spots, respawn.\n    float spawnSlow = spawnOnSlow*when_lt_2281831123(dot(motionTo, motionTo), spawnOnSlow);\n\n    // Avoid dead centre.\n    float spawnCentre = spawnOnCentre*\n      when_lt_2281831123(dot(positionTo, positionTo), spawnOnCentre);\n\n    float spawn = spawnOnAny*\n      when_gt_529295689(spawnOut.x+spawnOut.y+spawnSlow+spawnCentre, 0.0);\n\n    float keep = 1.0-spawn;\n  #endif\n\n  #ifdef points_output_position\n    points_output_position = mix(positionTo,\n        map(points_uv, v0, v1, bounds.xy, bounds.zw),\n        max(spawn, when_le_184046362(pMass, 0.0)))/\n      rescaledPosition;\n  #endif\n  #ifdef points_output_motion\n    points_output_motion = (motionTo*keep)/rescaledMotion;\n  #endif\n  #ifdef points_output_mass\n    points_output_mass = (mass*keep)/rescaledMass;\n  #endif\n  #ifdef points_output_affine\n    points_output_affine =\n      mix(vec4(0), vec4(affineTo), keep)/rescaledAffine;\n      // mix(vec4(mat2(1)), vec4(affineTo), keep)/rescaledAffine;\n      // mix(vec4(1, 0, 0, 1), vec4(affineTo), keep)/rescaledAffine;\n  #endif\n  #ifdef points_output_deform\n    points_output_deform =\n      // mix(vec4(0), vec4(deformTo), keep)/rescaledDeform;\n      // mix(vec4(mat2(1)), vec4(deformTo), keep)/rescaledDeform;\n      mix(vec4(1, 0, 0, 1), vec4(deformTo), keep)/rescaledDeform;\n  #endif\n  #ifdef points_output_stress\n    points_output_stress =\n      mix(vec4(0), vec4(stressTo), keep)/rescaledStress;\n      // mix(vec4(mat2(1)), vec4(stressTo), keep)/rescaledStress;\n      // mix(vec4(1, 0, 0, 1), vec4(stressTo), keep)/rescaledStress;\n  #endif\n}\n";var n2={};n2="/** Points-to-grid vertex shader. */\n\nprecision highp float;\n#define GLSLIFY 1\n\npoints_useSamples\npoints_useReads_position\n\n/** @todo Draw to all the needed grid passes. */\n\n#ifdef points_mergedStates\n  uniform sampler2D points_states;\n#else\n  uniform sampler2D points_states[points_stepsPast*points_textures];\n#endif\n\nuniform float points_stepNow;\nuniform vec4 points_stateShape;\n\nuniform vec4 grid_stateShape;\n\nattribute vec2 vertex;\nattribute float index;\nattribute float splat;\n\n#if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n  /** Advection scheme parameters. */\n  uniform float stretch;\n  uniform float turn;\n#endif\n\nuniform vec4 bounds;\nuniform vec2 widths;\n\nuniform vec2 rescaleAffine;\n\nvarying vec2 cellAt;\nvarying vec2 cellBase;\nvarying mat3 cellWeights;\n\n#ifdef points_grid_quads\n  varying vec2 cellIndex;\n#else\n  varying vec3 point;\n#endif\n\n#if defined(grid_output_mass) || defined(grid_output_motionFull) || \\\n    defined(grid_output_motionBase)\n  varying float mass;\n#endif\n#if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n  varying mat2 affine;\n  varying vec2 motion;\n#endif\n#if defined(grid_output_motionFull)\n  varying mat2 stress;\n#endif\n\nconst vec2 v0 = vec2(0);\nconst vec2 v1 = vec2(1);\nconst float kernelSize = 3.0;\n\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec2 map(vec2 value, vec2 inMin, vec2 inMax, vec2 outMin, vec2 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec3 map(vec3 value, vec3 inMin, vec3 inMax, vec3 outMin, vec3 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec4 map(vec4 value, vec4 inMin, vec4 inMax, vec4 outMin, vec4 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\n/**\n * Convenience to turn a 1D entry index into a 2D texture `UV` for sampling.\n * Note that this does not wrap the y-axis, so if the `index` exceeds the range\n * `[0, (size.x*size.y)-1]`, the result y-axis will exceed the range `[0, 1]`.\n *\n * @see {@link util/remain-div.glsl!}\n *\n * @param {float|int} `index` 1D index, expect range `[0, (size.x*size.y)-1]`.\n * @param {float|int|vec2|ivec2} `size` Texture's size, expect\n *   `[width, height]`, or if given a scalar interpret both as `side`.\n *\n * @returns {vec2} 2D `UV` texture sample coordinate, expect range `[0, 1]`.\n */\n\n/**\n * Equivalent to a _remainder_ operator; same as `mod` for same-signed operands,\n * but different for differently-signed operands, like JavaScript's `%`\n * operator.\n * Reuses the truncated division, and returns both; as both are useful in\n * various places, e.g: index conversion.\n *\n * @see [GLSL modulo](https://www.shaderific.com/glsl-functions#modulo)\n * @see [JS modulo/remainder](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder)\n *\n * @param {float|int} `x` The first remainder/divide operand, expect `x >= 0`.\n * @param {float|int} `y` The second remainder/divide operand, expect `y >= 0`.\n *\n * @returns {vec2|ivec2} The result as `[(remainder), (truncated division)]`;\n *   always a `vec2` if any operand is a `float`.\n */\n\nivec2 remainDiv(int x, int y) {\n  // Careful handling integer maths; decimals truncated, works like a\n  // _remainder_ operator, rather than `mod`.\n  int d = x/y;\n\n  return ivec2(x-(y*d), d);\n}\n\nvec2 remainDiv(float x, int y) {\n  int d = int(x)/y;\n\n  // Remainder; like `mod` but with truncated `d` not floored, reuses `d`.\n  // return vec2(mod(x, y), d);\n  return vec2(x-float(y*d), d);\n}\n\n/**\n * Assume higher accuracy is desired; if less computation with `int` is desired,\n * use `remainDiv(int(x), int(y))` or `vec2(remainDiv(int(x), int(y)))` instead.\n */\nvec2 remainDiv(float x, float y) { return remainDiv(x, int(y)); }\n\n/**\n * Assume higher accuracy is desired; if less computation with `int` is desired,\n * use `remainDiv(x, int(y))` or `vec2(remainDiv(x, int(y)))` instead.\n */\nvec2 remainDiv(int x, float y) { return remainDiv(float(x), y); }\n\nvec2 indexUV(float index, vec2 size) {\n  return remainDiv(index, size.x)/max(size-1.0, 1.0);\n}\n\nvec2 indexUV(int index, ivec2 size) {\n  return vec2(remainDiv(index, size.x))/max(vec2(size-1), 1.0);\n}\n\nvec2 indexUV(float index, ivec2 size) {\n  return remainDiv(index, size.x)/max(vec2(size-1), 1.0);\n}\n\nvec2 indexUV(int index, vec2 size) {\n  return remainDiv(index, size.x)/max(size-1.0, 1.0);\n}\n\nvec2 indexUV(float index, float size) {\n  return remainDiv(index, size)/max(size-1.0, 1.0);\n}\n\nvec2 indexUV(int index, float size) {\n  return remainDiv(index, size)/max(size-1.0, 1.0);\n}\n\nvec2 indexUV(float index, int size) {\n  return remainDiv(index, size)/max(float(size-1), 1.0);\n}\n\nvec2 indexUV(int index, int size) {\n  return vec2(remainDiv(index, size))/max(float(size-1), 1.0);\n}\n\n/**\n * Convenience to sample entries safely at their texel center.\n *\n * @param {vec2} `uv` UV texture sample coordinate, expect range `[0, 1]`.\n * @param {float|int|vec2|ivec2} `[size=1.0]` Texture's size, expect\n *   `[width, height]`, or if given a scalar interpret both as `side`.\n * @param {float|vec2} `[offset=0.5]` Texel offset, expect range `[0, 1]`.\n *\n * @returns {vec2} The UV with offset to texel center, expect range\n *   `[0+offset, 1-offset]`/`[0+offset.x, 1-offset.y]`.\n */\n\nvec2 offsetUV(vec2 uv, float size, float offset) {\n  return ((uv*(size-1.0))+offset)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, float offset) {\n  return ((uv*(size-1.0))+offset)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, vec2 offset) {\n  return ((uv*(size-1.0))+offset)/size;\n}\n\nvec2 offsetUV(vec2 uv, int size, float offset) {\n  return offsetUV(uv, float(size), offset);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, float offset) {\n  return offsetUV(uv, vec2(size), offset);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, vec2 offset) {\n  return offsetUV(uv, vec2(size), offset);\n}\n\nvec2 offsetUV(vec2 uv, float size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, vec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, int size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, ivec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv) { return offsetUV(uv, 1.0, 0.5); }\n\n#if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n  float transpose(float m) {\n  return m;\n}\n\nmat2 transpose(mat2 m) {\n  return mat2(m[0][0], m[1][0],\n              m[0][1], m[1][1]);\n}\n\nmat3 transpose(mat3 m) {\n  return mat3(m[0][0], m[1][0], m[2][0],\n              m[0][1], m[1][1], m[2][1],\n              m[0][2], m[1][2], m[2][2]);\n}\n\nmat4 transpose(mat4 m) {\n  return mat4(m[0][0], m[1][0], m[2][0], m[3][0],\n              m[0][1], m[1][1], m[2][1], m[3][1],\n              m[0][2], m[1][2], m[2][2], m[3][2],\n              m[0][3], m[1][3], m[2][3], m[3][3]);\n}\n\n#endif\n\n/**\n * Quadratic weight kernel.\n *\n * @see [Equation 123, The Material Point Method for Simulating Continuum\n *   Materials (mpm.graphics)](https://drive.google.com/open?id=1rI4gsBH3BstH7EYQA451Pb56MrJ7hVsu&usp=drive_fs)\n * @see [Incremental MPM](https://github.com/nialltl/incremental_mpm/blob/master/Assets/3.%20MLS_MPM_Fluid_Multithreaded/MLS_MPM_Fluid_Multithreaded.cs#L337-L344)\n * @see [MLS-MPM-88](https://github.com/yuanming-hu/taichi_mpm/blob/master/mls-mpm88-explained.cpp#L151-L158)\n *\n * @todo Test more and ensure this is the equivalent lookup.\n */\n\nstruct Kernel2 {\n  vec2 base;\n  vec2 diff;\n  // Only using `[i].xy` channels of each layer `i`; `vec2[3]` is tricky.\n  mat3 weights;\n};\n\nstruct Kernel3 {\n  vec3 base;\n  vec3 diff;\n  mat3 weights;\n};\n\n/** The cell base for each kernel type. */\n#define createToBaseShare(t) \\\nt toBase(t at) { \\\n  t base; \\\n   \\\n  return toBase(at, base); \\\n}\n\n#ifdef kernelTypeCentre\n  #define createToBase(t) \\\n  t toBase(t at, out t base) { return (base = floor(at)); } \\\n  createToBaseShare(t)\n#else\n  /**\n   * @todo Test if this is correct for negative numbers, seems to create gaps\n   *   between positive and negative quadrants.\n   */\n  #define createToBase(t) \\\n  t toBase(t at, out t base) { return (base = floor(at-0.5)); } \\\n  createToBaseShare(t)\n#endif\n\ncreateToBase(float)\ncreateToBase(vec2)\ncreateToBase(vec3)\n\n/** The cell base for each kernel type. */\n#define createToDiffShare(t) \\\nt toDiff(t at, t base) { \\\n  t diff; \\\n   \\\n  return toDiff(at, base, diff); \\\n}\n\n#ifdef kernelTypeCentre\n  #define createToDiff(t) \\\n  t toDiff(t at, t base, out t diff) { return (diff = (at-base)-0.5); } \\\n  createToDiffShare(t)\n#else\n  #define createToDiff(t) \\\n  t toDiff(t at, t base, out t diff) { return (diff = at-base); } \\\n  createToDiffShare(t)\n#endif\n\ncreateToDiff(float)\ncreateToDiff(vec2)\ncreateToDiff(vec3)\n\nvec2 fillWeight(inout vec3 w, vec2 v) { return w.xy = v; }\nvec3 fillWeight(inout vec3 w, vec3 v) { return w = v; }\n\n#ifdef kernelTypeCentre\n  #define createToWeightsMain(vec) \\\n    vec w0 = 0.5-diff; \\\n    vec w1 = diff; \\\n    vec w2 = 0.5+diff;\n#else\n  #define createToWeightsMain(vec) \\\n    vec w0 = 1.5-diff; \\\n    vec w1 = diff-1.0; \\\n    vec w2 = diff-0.5;\n#endif\n\n#define createToWeights(vec, mat) \\\n \\\nmat toWeights(vec diff, out mat weights) { \\\n  createToWeightsMain(vec) \\\n   \\\n  fillWeight(weights[0], 0.5*(w0*w0)); \\\n  fillWeight(weights[1], 0.75-(w1*w1)); \\\n  fillWeight(weights[2], 0.5*(w2*w2)); \\\n   \\\n  return weights; \\\n} \\\n \\\nmat toWeights(vec diff) { \\\n  mat weights; \\\n   \\\n  return toWeights(diff, weights); \\\n}\n\ncreateToWeights(vec2, mat3)\ncreateToWeights(vec3, mat3)\n\n#define createToKernel(vec, mat, Kernel) \\\n \\\nKernel toKernel(vec at, out vec base, out vec diff, out mat weights) { \\\n  base = toBase(at, base); \\\n  diff = toDiff(at, base, diff); \\\n  weights = toWeights(diff, weights); \\\n   \\\n  return Kernel(base, diff, weights); \\\n} \\\n \\\nKernel toKernel(vec at, out vec base, out vec diff) { \\\n  mat weights; \\\n   \\\n  return toKernel(at, base, diff, weights); \\\n} \\\n \\\nKernel toKernel(vec at, out vec base) { \\\n  vec diff; \\\n   \\\n  return toKernel(at, base, diff); \\\n} \\\n \\\nKernel toKernel(vec at) { \\\n  vec base; \\\n   \\\n  return toKernel(at, base); \\\n}\n\ncreateToKernel(vec2, mat3, Kernel2)\ncreateToKernel(vec3, mat3, Kernel3)\n\n/** The cell offset for each kernel type. */\n#define createToOffsetShare(t) \\\nt toOffset(t offset) { \\\n  t to; \\\n   \\\n  return toOffset(offset, to); \\\n}\n\n#ifdef kernelTypeCentre\n  #define createToOffset(t) \\\n  t toOffset(in t offset, out t to) { return (to = offset-1.0); } \\\n  createToOffsetShare(t)\n#else\n  #define createToOffset(t) \\\n  t toOffset(in t offset, out t to) { return (to = offset); } \\\n  createToOffsetShare(t)\n#endif\n\ncreateToOffset(float)\ncreateToOffset(vec2)\ncreateToOffset(vec3)\n\n/** Exponential notation packed into a vector. */\nfloat exponent(vec2 basePower) { return basePower.s*pow(1e1, basePower.t); }\n\n/**\n * @todo Handle separate splats, by how many buffers can be drawn to.\n * @todo Separate processes according to active outputs.\n */\nvoid main() {\n  vec2 uv = indexUV(index, points_stateShape.xy);\n\n  points_tapState(offsetUV(uv, points_stateShape.xy));\n  // points_tapState(uv);\n\n  vec2 position = points_data[points_reads_position_position]\n    .points_channels_position;\n\n  #if defined(grid_output_mass) || defined(grid_output_motionFull) || \\\n      defined(grid_output_motionBase)\n    mass = points_data[points_reads_position_mass].points_channels_mass;\n  #endif\n  #if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n    float rescaledAffine = exponent(rescaleAffine);\n    vec2 advection = (stretch+vec2(turn, -turn))*0.5;\n\n    affine = rescaledAffine*\n      mat2(points_data[points_reads_position_affine].points_channels_affine);\n\n    affine = (mass*((affine*advection.x)+(transpose(affine)*advection.y)))/\n      rescaledAffine;\n\n    motion = points_data[points_reads_position_motion].points_channels_motion;\n  #endif\n  #if defined(grid_output_motionFull)\n    stress = mat2(points_data[points_reads_position_stress]\n      .points_channels_stress);\n  #endif\n\n  /** Map the position into the correct range with the proper offset. */\n  cellAt = map(position, bounds.xy, bounds.zw, v0, grid_stateShape.xy-1.0);\n  // cellAt = uv*(grid_stateShape.xy-1.0);\n\n  vec2 cellDiff;\n\n  /** Kernel weights and positions, to scale the values per-fragment. */\n  toKernel(cellAt, cellBase, cellDiff, cellWeights);\n\n  /**\n   * Offset spread a loop-counter per-quad-fragment, or center the point.\n   *\n   * @todo Ensure this is mapping correctly to the grid, could cause the\n   *   volume/collision loss clumping/compression issues.\n   */\n  vec2 to = cellBase+toOffset(vertex*kernelSize);\n\n  // to = map(to, v0, grid_stateShape.xy, v0-0.5, grid_stateShape.xy+0.5);\n  // to = map(to, v0, grid_stateShape.xy-1.0, v0-0.5, grid_stateShape.xy-1.0+0.5);\n\n  gl_Position = vec4(map(to, v0, grid_stateShape.xy, -v1, v1), 0, 1);\n  // gl_Position = vec4(map(to, v0, grid_stateShape.xy-1.0, -v1, v1), 0, 1);\n\n  #ifdef points_grid_quads\n    /** Mask the weights by the distance from these indexes per-fragment. */\n    cellIndex = vertex*(kernelSize-1.0);\n    // cellIndex = vertex*kernelSize;\n  #else\n    /**\n    * Convert vertex position to `gl_FragCoord` window-space.\n    * @see [SO](https://stackoverflow.com/a/7158573)\n    * @see [SO](https://stackoverflow.com/a/54237532/716898)\n    */\n    point = vec3(to, 0.5*(gl_PointSize = kernelSize));\n  #endif\n}\n";var n3={};n3="/** Points-to-grid fragment shader. */\n\n#ifdef GL_EXT_draw_buffers\n  #extension GL_EXT_draw_buffers : require\n#endif\n\nprecision highp float;\n#define GLSLIFY 1\n\n/** @todo Draw to all the needed grid passes. */\n\nuniform vec4 grid_stateShape;\n\nuniform vec2 rescaleMotion;\nuniform vec2 rescaleMass;\nuniform vec2 rescaleAffine;\nuniform vec2 rescaleStress;\n\nvarying vec2 cellAt;\nvarying vec2 cellBase;\nvarying mat3 cellWeights;\n\n#ifdef points_grid_quads\n  varying vec2 cellIndex;\n#else\n  varying vec3 point;\n#endif\n\n#if defined(grid_output_mass) || defined(grid_output_motionFull) || \\\n    defined(grid_output_motionBase)\n  varying float mass;\n#endif\n#if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n  varying mat2 affine;\n  varying vec2 motion;\n#endif\n#if defined(grid_output_motionFull)\n  varying mat2 stress;\n#endif\n\nconst mat3 mask = mat3(vec3(0), vec3(1), vec3(2));\n\nconst vec2 eps = vec2(1e-1);\nconst vec2 v0 = vec2(0);\nconst vec2 v1 = vec2(1);\nconst float kernelSize = 3.0;\n\n#if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n  /** The cell offset for each kernel type. */\n#define createToOffsetShare(t) \\\nt toOffset(t offset) { \\\n  t to; \\\n   \\\n  return toOffset(offset, to); \\\n}\n\n#ifdef kernelTypeCentre\n  #define createToOffset(t) \\\n  t toOffset(in t offset, out t to) { return (to = offset-1.0); } \\\n  createToOffsetShare(t)\n#else\n  #define createToOffset(t) \\\n  t toOffset(in t offset, out t to) { return (to = offset); } \\\n  createToOffsetShare(t)\n#endif\n\ncreateToOffset(float)\ncreateToOffset(vec2)\ncreateToOffset(vec3)\n\n  /**\n * The distance function for each kernel type.\n *\n * @see [Incremental MPM cell distance](https://github.com/nialltl/incremental_mpm/blob/master/Assets/3.%20MLS_MPM_Fluid_Multithreaded/MLS_MPM_Fluid_Multithreaded.cs#L187-L201)\n * @see [PyASFLIP cell distance](https://github.com/nepluno/pyasflip/blob/master/pyasflip.py#L320-L339)\n * @todo Not sure this is right, the scales might be off.\n * @todo Work out the algebra more nicely in terms of `offset` and `diff`.\n */\n\n#ifdef kernelTypeCentre\n  /**\n   * @example ```\n   * // Goal:\n   * dist(offset, base, at) = ((base+offset-1)-at)+0.5\n   * // From offset:\n   * offset = offset-1\n   * // Thus:\n   * dist(offset = offset-1, base, at) = ((base+offset)-at)+0.5\n   * // From weights:\n   * diff(base, at) = (at-base)-0.5\n   * // And:\n   * base(at) = floor(at)\n   * // @todo The rest\n   * ```\n   *\n   * @todo Derive the form `toDistance(offset, diff)`.\n   */\n  #define createToDistance(t) \\\n   \\\n  t toDistance(t offset, t base, t at) { \\\n    return ((base+offset)-at)+0.5; \\\n  } \\\n   \\\n  t toDistance(t offset, t diff);\n#else\n  /** The cell base for each kernel type. */\n#define createToDiffShare(t) \\\nt toDiff(t at, t base) { \\\n  t diff; \\\n   \\\n  return toDiff(at, base, diff); \\\n}\n\n#ifdef kernelTypeCentre\n  #define createToDiff(t) \\\n  t toDiff(t at, t base, out t diff) { return (diff = (at-base)-0.5); } \\\n  createToDiffShare(t)\n#else\n  #define createToDiff(t) \\\n  t toDiff(t at, t base, out t diff) { return (diff = at-base); } \\\n  createToDiffShare(t)\n#endif\n\ncreateToDiff(float)\ncreateToDiff(vec2)\ncreateToDiff(vec3)\n\n  /**\n   * @example ```\n   * // Goal:\n   * dist(offset, diff) = offset-diff\n   * // From weights:\n   * diff(base, at) = at-base\n   * // Thus:\n   * dist(offset, base, at) = offset-diff(base, at) = offset-(at-base)\n   * ```\n   */\n  #define createToDistance(t) \\\n   \\\n  t toDistance(t offset, t diff) { return offset-diff; } \\\n   \\\n  t toDistance(t offset, t base, t at) { \\\n    return toDistance(offset, toDiff(at, base)); \\\n  }\n#endif\n\ncreateToDistance(float)\ncreateToDistance(vec2)\ncreateToDistance(vec3)\n\n#endif\n\nfloat when_lt_1604150559(float x, float y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec2 when_lt_1604150559(vec2 x, vec2 y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec3 when_lt_1604150559(vec3 x, vec3 y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec4 when_lt_1604150559(vec4 x, vec4 y) {\n  return max(sign(y - x), 0.0);\n}\n\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec2 map(vec2 value, vec2 inMin, vec2 inMax, vec2 outMin, vec2 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec3 map(vec3 value, vec3 inMin, vec3 inMax, vec3 outMin, vec3 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec4 map(vec4 value, vec4 inMin, vec4 inMax, vec4 outMin, vec4 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\n/** Exponential notation packed into a vector. */\nfloat exponent(vec2 basePower) { return basePower.s*pow(1e1, basePower.t); }\n\nvoid main() {\n  #ifndef points_grid_quads\n    // vec2 cellIndex = kernelSize*\n    vec2 cellIndex = (kernelSize-1.0)*\n      map(gl_FragCoord.xy-point.xy, -point.pp, point.pp, v0, v1);\n      // map(gl_FragCoord.xy-point.xy, 0.5-point.pp, point.pp-0.5, v0, v1);\n  #endif\n\n  vec2 maskWeight = v0;\n\n  for(int i = 0; i < 3; ++i) {\n    maskWeight += cellWeights[i].xy*when_lt_1604150559(abs(cellIndex-mask[i].xy), eps);\n  }\n\n  float weight = maskWeight.x*maskWeight.y;\n\n  /** @todo Handle multiple passes properly. */\n  #if defined(grid_output_mass) || defined(grid_output_motionFull) || \\\n      defined(grid_output_motionBase)\n    float rescaledMass = exponent(rescaleMass);\n    float massTo = rescaledMass*mass;\n  #endif\n  #if defined(grid_output_motionFull) || defined(grid_output_motionBase)\n    float rescaledMotion = exponent(rescaleMotion);\n    float rescaledAffine = exponent(rescaleAffine);\n\n    vec2 motionTo = rescaledMotion*motion;\n    mat2 affineTo = rescaledAffine*affine;\n    vec2 massMotion = massTo*motionTo;\n    vec2 offset = toOffset(cellIndex);\n\n    vec2 cellDist = toDistance(offset, cellBase, cellAt)/\n      grid_stateShape.xy;\n  #endif\n  #if defined(grid_output_motionFull)\n    float rescaledStress = exponent(rescaleStress);\n    mat2 stressTo = rescaledStress*stress;\n  #endif\n\n  #ifdef grid_output_mass\n    grid_output_mass = (weight*massTo)/rescaledMass;\n  #endif\n  #ifdef grid_output_motionFull\n    grid_output_motionFull =\n      (weight*(massMotion+((stressTo+affineTo)*cellDist)))/rescaledMotion;\n  #endif\n  #ifdef grid_output_motionBase\n    grid_output_motionBase =\n      (weight*(massMotion+(affineTo*cellDist)))/rescaledMotion;\n  #endif\n\n  // gl_FragData[0].rgba = gl_FragData[1].rgba =\n  //   vec4(cellBase/grid_stateShape.xy, 0, 1);\n  // gl_FragColor.rgba = vec4(1e5);\n  // gl_FragColor.rgba = vec4(1, 0, 0, 1);\n}\n";var n4={};n4="/** Grid-to-screen vertex shader. */\n\nprecision highp float;\n#define GLSLIFY 1\n\nattribute vec2 grid_position;\n\nuniform vec2 aspect;\n\nvarying vec2 uv;\n\nconst vec2 v0 = vec2(0);\nconst vec2 v1 = vec2(1);\n\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec2 map(vec2 value, vec2 inMin, vec2 inMax, vec2 outMin, vec2 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec3 map(vec3 value, vec3 inMin, vec3 inMax, vec3 outMin, vec3 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec4 map(vec4 value, vec4 inMin, vec4 inMax, vec4 outMin, vec4 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvoid main() {\n  uv = map(grid_position/aspect, -v1, v1, v0, v1);\n  gl_Position = vec4(grid_position, 0, 1);\n}\n";var n5={};n5="/** Grid-to-screen fragment shader. */\n\nprecision highp float;\n#define GLSLIFY 1\n\nstruct Kernel2 {\n  vec2 base;\n  vec2 diff;\n  // Only using `[i].xy` channels of each layer `i`; `vec2[3]` is tricky.\n  mat3 weights;\n};\n\ngrid_useSamples\ngrid_useReads_mass\n\n#ifdef grid_mergedStates\n  uniform sampler2D grid_states;\n#else\n  uniform sampler2D grid_states[grid_stepsPast*grid_textures];\n#endif\n\nuniform float grid_stepNow;\nuniform vec4 grid_stateShape;\n\nuniform vec2 range;\nuniform vec2 curve[4];\nuniform vec4 colorLo;\nuniform vec4 colorHi;\nuniform vec2 rescaleMotion;\n\n#ifdef angleToHSLA\n  uniform vec4 angleHSLA;\n#endif\n\nvarying vec2 uv;\n\nconst vec2 v0 = vec2(0);\nconst vec2 v1 = vec2(1);\n\nfloat when_lt_1604150559(float x, float y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec2 when_lt_1604150559(vec2 x, vec2 y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec3 when_lt_1604150559(vec3 x, vec3 y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec4 when_lt_1604150559(vec4 x, vec4 y) {\n  return max(sign(y - x), 0.0);\n}\n\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec2 map(vec2 value, vec2 inMin, vec2 inMax, vec2 outMin, vec2 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec3 map(vec3 value, vec3 inMin, vec3 inMax, vec3 outMin, vec3 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec4 map(vec4 value, vec4 inMin, vec4 inMax, vec4 outMin, vec4 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\n#ifdef angleToHSLA\n  float hue2rgb(float f1, float f2, float hue) {\n    if (hue < 0.0)\n        hue += 1.0;\n    else if (hue > 1.0)\n        hue -= 1.0;\n    float res;\n    if ((6.0 * hue) < 1.0)\n        res = f1 + (f2 - f1) * 6.0 * hue;\n    else if ((2.0 * hue) < 1.0)\n        res = f2;\n    else if ((3.0 * hue) < 2.0)\n        res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\n    else\n        res = f1;\n    return res;\n}\n\nvec3 hsl2rgb(vec3 hsl) {\n    vec3 rgb;\n    \n    if (hsl.y == 0.0) {\n        rgb = vec3(hsl.z); // Luminance\n    } else {\n        float f2;\n        \n        if (hsl.z < 0.5)\n            f2 = hsl.z * (1.0 + hsl.y);\n        else\n            f2 = hsl.z + hsl.y - hsl.y * hsl.z;\n            \n        float f1 = 2.0 * hsl.z - f2;\n        \n        rgb.r = hue2rgb(f1, f2, hsl.x + (1.0/3.0));\n        rgb.g = hue2rgb(f1, f2, hsl.x);\n        rgb.b = hue2rgb(f1, f2, hsl.x - (1.0/3.0));\n    }   \n    return rgb;\n}\n\nvec3 hsl2rgb(float h, float s, float l) {\n    return hsl2rgb(vec3(h, s, l));\n}\n\n  const float PI = 3.14159265359;\n\n#endif\n\n/**\n * Convenience to sample entries safely at their texel center.\n *\n * @param {vec2} `uv` UV texture sample coordinate, expect range `[0, 1]`.\n * @param {float|int|vec2|ivec2} `[size=1.0]` Texture's size, expect\n *   `[width, height]`, or if given a scalar interpret both as `side`.\n * @param {float|vec2} `[offset=0.5]` Texel offset, expect range `[0, 1]`.\n *\n * @returns {vec2} The UV with offset to texel center, expect range\n *   `[0+offset, 1-offset]`/`[0+offset.x, 1-offset.y]`.\n */\n\nvec2 offsetUV(vec2 uv, float size, float offset) {\n  return ((uv*(size-1.0))+offset)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, float offset) {\n  return ((uv*(size-1.0))+offset)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, vec2 offset) {\n  return ((uv*(size-1.0))+offset)/size;\n}\n\nvec2 offsetUV(vec2 uv, int size, float offset) {\n  return offsetUV(uv, float(size), offset);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, float offset) {\n  return offsetUV(uv, vec2(size), offset);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, vec2 offset) {\n  return offsetUV(uv, vec2(size), offset);\n}\n\nvec2 offsetUV(vec2 uv, float size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, vec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, int size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, ivec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv) { return offsetUV(uv, 1.0, 0.5); }\n\n/**\n * Quadratic weight kernel.\n *\n * @see [Equation 123, The Material Point Method for Simulating Continuum\n *   Materials (mpm.graphics)](https://drive.google.com/open?id=1rI4gsBH3BstH7EYQA451Pb56MrJ7hVsu&usp=drive_fs)\n * @see [Incremental MPM](https://github.com/nialltl/incremental_mpm/blob/master/Assets/3.%20MLS_MPM_Fluid_Multithreaded/MLS_MPM_Fluid_Multithreaded.cs#L337-L344)\n * @see [MLS-MPM-88](https://github.com/yuanming-hu/taichi_mpm/blob/master/mls-mpm88-explained.cpp#L151-L158)\n *\n * @todo Test more and ensure this is the equivalent lookup.\n */\n\nstruct Kernel3 {\n  vec3 base;\n  vec3 diff;\n  mat3 weights;\n};\n\n/** The cell base for each kernel type. */\n#define createToBaseShare(t) \\\nt toBase(t at) { \\\n  t base; \\\n   \\\n  return toBase(at, base); \\\n}\n\n#ifdef kernelTypeCentre\n  #define createToBase(t) \\\n  t toBase(t at, out t base) { return (base = floor(at)); } \\\n  createToBaseShare(t)\n#else\n  /**\n   * @todo Test if this is correct for negative numbers, seems to create gaps\n   *   between positive and negative quadrants.\n   */\n  #define createToBase(t) \\\n  t toBase(t at, out t base) { return (base = floor(at-0.5)); } \\\n  createToBaseShare(t)\n#endif\n\ncreateToBase(float)\ncreateToBase(vec2)\ncreateToBase(vec3)\n\n/** The cell base for each kernel type. */\n#define createToDiffShare(t) \\\nt toDiff(t at, t base) { \\\n  t diff; \\\n   \\\n  return toDiff(at, base, diff); \\\n}\n\n#ifdef kernelTypeCentre\n  #define createToDiff(t) \\\n  t toDiff(t at, t base, out t diff) { return (diff = (at-base)-0.5); } \\\n  createToDiffShare(t)\n#else\n  #define createToDiff(t) \\\n  t toDiff(t at, t base, out t diff) { return (diff = at-base); } \\\n  createToDiffShare(t)\n#endif\n\ncreateToDiff(float)\ncreateToDiff(vec2)\ncreateToDiff(vec3)\n\nvec2 fillWeight(inout vec3 w, vec2 v) { return w.xy = v; }\nvec3 fillWeight(inout vec3 w, vec3 v) { return w = v; }\n\n#ifdef kernelTypeCentre\n  #define createToWeightsMain(vec) \\\n    vec w0 = 0.5-diff; \\\n    vec w1 = diff; \\\n    vec w2 = 0.5+diff;\n#else\n  #define createToWeightsMain(vec) \\\n    vec w0 = 1.5-diff; \\\n    vec w1 = diff-1.0; \\\n    vec w2 = diff-0.5;\n#endif\n\n#define createToWeights(vec, mat) \\\n \\\nmat toWeights(vec diff, out mat weights) { \\\n  createToWeightsMain(vec) \\\n   \\\n  fillWeight(weights[0], 0.5*(w0*w0)); \\\n  fillWeight(weights[1], 0.75-(w1*w1)); \\\n  fillWeight(weights[2], 0.5*(w2*w2)); \\\n   \\\n  return weights; \\\n} \\\n \\\nmat toWeights(vec diff) { \\\n  mat weights; \\\n   \\\n  return toWeights(diff, weights); \\\n}\n\ncreateToWeights(vec2, mat3)\ncreateToWeights(vec3, mat3)\n\n#define createToKernel(vec, mat, Kernel) \\\n \\\nKernel toKernel(vec at, out vec base, out vec diff, out mat weights) { \\\n  base = toBase(at, base); \\\n  diff = toDiff(at, base, diff); \\\n  weights = toWeights(diff, weights); \\\n   \\\n  return Kernel(base, diff, weights); \\\n} \\\n \\\nKernel toKernel(vec at, out vec base, out vec diff) { \\\n  mat weights; \\\n   \\\n  return toKernel(at, base, diff, weights); \\\n} \\\n \\\nKernel toKernel(vec at, out vec base) { \\\n  vec diff; \\\n   \\\n  return toKernel(at, base, diff); \\\n} \\\n \\\nKernel toKernel(vec at) { \\\n  vec base; \\\n   \\\n  return toKernel(at, base); \\\n}\n\ncreateToKernel(vec2, mat3, Kernel2)\ncreateToKernel(vec3, mat3, Kernel3)\n\n/** The cell offset for each kernel type. */\n#define createToOffsetShare(t) \\\nt toOffset(t offset) { \\\n  t to; \\\n   \\\n  return toOffset(offset, to); \\\n}\n\n#ifdef kernelTypeCentre\n  #define createToOffset(t) \\\n  t toOffset(in t offset, out t to) { return (to = offset-1.0); } \\\n  createToOffsetShare(t)\n#else\n  #define createToOffset(t) \\\n  t toOffset(in t offset, out t to) { return (to = offset); } \\\n  createToOffsetShare(t)\n#endif\n\ncreateToOffset(float)\ncreateToOffset(vec2)\ncreateToOffset(vec3)\n\n/** Exponential notation packed into a vector. */\nfloat exponent(vec2 basePower) { return basePower.s*pow(1e1, basePower.t); }\n\n/**\n * Cubic Bézier interpolation, CSS-style.\n * Given p0, p1, p2, p3 as control points, and an input `x` value, find the\n * corresponding `y` value using the Bézier curve; note that this doesn't\n * directly use the usual `t` value as input for interpolation.\n *\n * @todo Split up and generalise.\n *\n * @see [Y-for-X in Pomax's guide](https://pomax.github.io/bezierinfo/#yforx)\n * @see [Finding Bézier roots and Newton-Raphson method in Pomax's guide](https://pomax.github.io/bezierinfo/#extremities)\n */\n\n// Code generated by `bezier-gen` - start:\n\nfloat bezier(float cp0, float cp1, float cp2, float t) {\n    float p0 = mix(cp0, cp1, t);\n    float p1 = mix(cp1, cp2, t);\n\n    return mix(p0, p1, t);\n}\n\nfloat bezier(float cp0, float cp1, float cp2, float cp3, float t) {\n    float p0 = mix(cp0, cp1, t);\n    float p1 = mix(cp1, cp2, t);\n    float p2 = mix(cp2, cp3, t);\n\n    p0 = mix(p0, p1, t);\n    p1 = mix(p1, p2, t);\n\n    return mix(p0, p1, t);\n}\n\nfloat bezier(float cp0, float cp1, float cp2, float cp3, float cp4, float t) {\n    float p0 = mix(cp0, cp1, t);\n    float p1 = mix(cp1, cp2, t);\n    float p2 = mix(cp2, cp3, t);\n    float p3 = mix(cp3, cp4, t);\n\n    p0 = mix(p0, p1, t);\n    p1 = mix(p1, p2, t);\n    p2 = mix(p2, p3, t);\n\n    p0 = mix(p0, p1, t);\n    p1 = mix(p1, p2, t);\n\n    return mix(p0, p1, t);\n}\n\n// Code generated by `bezier-gen` - end.\n\n// float bezier(float p0, float p1, float p2, float p3, float t) {\n//   float u = 1.0-t;\n\n//   return (3.0*u*u*t*p1)+(3.0*u*t*t*p2)+(t*t*t*p3);\n// }\n\n/** @todo Generalise to other orders. */\nfloat derivativeCubic(float p0, float p1, float p2, float p3, float t) {\n  float u = 1.0-t;\n\n  return (9.0*p1*u*u)+(6.0*(p2-p1)*u*t)+(3.0*p3*t*t);\n}\n\nfloat xToY(vec2 p0, vec2 p1, vec2 p2, vec2 p3, float x) {\n  float t = x;\n\n  // Netwon's method iteration.\n  for(int i = 0; i < 4; ++i) {\n    float xt = bezier(p0.x, p1.x, p2.x, p3.x, t);\n    float dtx = derivativeCubic(p0.x, p1.x, p2.x, p3.x, t);\n    float error = xt-x;\n\n    // Newton's iteration.\n    t = clamp(t-(error/dtx), 0.0, 1.0);\n  }\n\n  // Now that we have `t`, compute the corresponding `y` value.\n  return bezier(p0.y, p1.y, p2.y, p3.y, t);\n}\n\nvoid main() {\n  float rescaledMotion = exponent(rescaleMotion);\n\n  vec2 motion;\n  Kernel2 kernel = toKernel(uv*grid_stateShape.xy);\n\n  for(int gx = 0; gx < 3; ++gx) {\n    for(int gy = 0; gy < 3; ++gy) {\n      float weight = kernel.weights[gx].x*kernel.weights[gy].y;\n      vec2 st = (kernel.base+toOffset(vec2(gx, gy)))/grid_stateShape.xy;\n\n      #if grid_stepsPast > 1\n        for(int stepPast = 0; stepPast < grid_stepsPast; ++stepPast) {\n          float ago = float(stepPast)/float(grid_stepsPast);\n\n          grid_tapStateBy(offsetUV(st, grid_stateShape.xy), stepPast, 0);\n\n          motion += rescaledMotion*(1.0-ago)*weight*\n            grid_data[grid_reads_mass_motionFull].grid_channels_motionFull;\n        }\n      #else\n        grid_tapState(offsetUV(st, grid_stateShape.xy));\n\n        motion += rescaledMotion*weight*\n          grid_data[grid_reads_mass_motionFull].grid_channels_motionFull;\n      #endif\n    }\n  }\n\n  #ifdef paceLinear\n    float pace = length(motion);\n  #else\n    float pace = dot(motion, motion);\n  #endif\n\n  float at = clamp(map(pace, range.x, range.y, 0.0, 1.0), 0.0, 1.0);\n  float to = xToY(curve[0], curve[1], curve[2], curve[3], at);\n  // float to = at;\n  vec2 outside = when_lt_1604150559(uv, v0)+when_lt_1604150559(v1, uv);\n  float on = when_lt_1604150559(outside.x+outside.y, 0.5);\n  vec4 color = mix(colorLo, colorHi, clamp(to, 0.0, on));\n\n  #ifdef angleToHSLA\n    /**\n     * Map angle to hue; saturation and lightness as-is, alpha controls mix.\n     * Hue rotation works out as:\n     * - U = magenta\n     * - R = cyan\n     * - B = green\n     * - L = red\n     */\n    float angleHue = map(atan(motion.y, motion.x), -PI, PI, 0.0, 1.0);\n    vec3 angleColor = hsl2rgb(angleHue*angleHSLA.x, angleHSLA.y, angleHSLA.z);\n\n    color.rgb = mix(color.rgb, angleColor, angleHSLA.a*on);\n  #endif\n\n  gl_FragColor = clamp(color, 0.0, 1.0);\n  gl_FragColor.rgb *= gl_FragColor.a;\n}\n";var n6={};n6="/** Points-to-screen vertex shader. */\n\nprecision highp float;\n#define GLSLIFY 1\n\n#define positionChannels points_channels_0\n#define massChannels points_channels_2\n\npoints_useSamples\npoints_useReads_position\n\nattribute float index;\n\n#ifdef points_mergedStates\n  uniform sampler2D points_states;\n#else\n  uniform sampler2D points_states[points_stepsPast*points_textures];\n#endif\n\nuniform float points_stepNow;\nuniform vec4 points_stateShape;\n\nuniform vec2 size;\nuniform vec2 aspect;\nuniform float wideHi;\nuniform float wideLo;\nuniform vec2 widths;\nuniform float dt;\nuniform vec4 diffuseHi;\nuniform vec4 diffuseLo;\nuniform vec4 bounds;\nuniform float form;\nuniform vec2 rescaleMass;\nuniform vec2 rescalePosition;\n\nvarying float wide;\nvarying vec3 sphere;\nvarying vec4 color;\n\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec2 map(vec2 value, vec2 inMin, vec2 inMax, vec2 outMin, vec2 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec3 map(vec3 value, vec3 inMin, vec3 inMax, vec3 outMin, vec3 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec4 map(vec4 value, vec4 inMin, vec4 inMax, vec4 outMin, vec4 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nfloat when_gt_1604150559(float x, float y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec2 when_gt_1604150559(vec2 x, vec2 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec3 when_gt_1604150559(vec3 x, vec3 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec4 when_gt_1604150559(vec4 x, vec4 y) {\n  return max(sign(x - y), 0.0);\n}\n\n/**\n * Convenience to turn a 1D entry index into a 2D texture `UV` for sampling.\n * Note that this does not wrap the y-axis, so if the `index` exceeds the range\n * `[0, (size.x*size.y)-1]`, the result y-axis will exceed the range `[0, 1]`.\n *\n * @see {@link util/remain-div.glsl!}\n *\n * @param {float|int} `index` 1D index, expect range `[0, (size.x*size.y)-1]`.\n * @param {float|int|vec2|ivec2} `size` Texture's size, expect\n *   `[width, height]`, or if given a scalar interpret both as `side`.\n *\n * @returns {vec2} 2D `UV` texture sample coordinate, expect range `[0, 1]`.\n */\n\n/**\n * Equivalent to a _remainder_ operator; same as `mod` for same-signed operands,\n * but different for differently-signed operands, like JavaScript's `%`\n * operator.\n * Reuses the truncated division, and returns both; as both are useful in\n * various places, e.g: index conversion.\n *\n * @see [GLSL modulo](https://www.shaderific.com/glsl-functions#modulo)\n * @see [JS modulo/remainder](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder)\n *\n * @param {float|int} `x` The first remainder/divide operand, expect `x >= 0`.\n * @param {float|int} `y` The second remainder/divide operand, expect `y >= 0`.\n *\n * @returns {vec2|ivec2} The result as `[(remainder), (truncated division)]`;\n *   always a `vec2` if any operand is a `float`.\n */\n\nivec2 remainDiv(int x, int y) {\n  // Careful handling integer maths; decimals truncated, works like a\n  // _remainder_ operator, rather than `mod`.\n  int d = x/y;\n\n  return ivec2(x-(y*d), d);\n}\n\nvec2 remainDiv(float x, int y) {\n  int d = int(x)/y;\n\n  // Remainder; like `mod` but with truncated `d` not floored, reuses `d`.\n  // return vec2(mod(x, y), d);\n  return vec2(x-float(y*d), d);\n}\n\n/**\n * Assume higher accuracy is desired; if less computation with `int` is desired,\n * use `remainDiv(int(x), int(y))` or `vec2(remainDiv(int(x), int(y)))` instead.\n */\nvec2 remainDiv(float x, float y) { return remainDiv(x, int(y)); }\n\n/**\n * Assume higher accuracy is desired; if less computation with `int` is desired,\n * use `remainDiv(x, int(y))` or `vec2(remainDiv(x, int(y)))` instead.\n */\nvec2 remainDiv(int x, float y) { return remainDiv(float(x), y); }\n\nvec2 indexUV(float index, vec2 size) {\n  return remainDiv(index, size.x)/max(size-1.0, 1.0);\n}\n\nvec2 indexUV(int index, ivec2 size) {\n  return vec2(remainDiv(index, size.x))/max(vec2(size-1), 1.0);\n}\n\nvec2 indexUV(float index, ivec2 size) {\n  return remainDiv(index, size.x)/max(vec2(size-1), 1.0);\n}\n\nvec2 indexUV(int index, vec2 size) {\n  return remainDiv(index, size.x)/max(size-1.0, 1.0);\n}\n\nvec2 indexUV(float index, float size) {\n  return remainDiv(index, size)/max(size-1.0, 1.0);\n}\n\nvec2 indexUV(int index, float size) {\n  return remainDiv(index, size)/max(size-1.0, 1.0);\n}\n\nvec2 indexUV(float index, int size) {\n  return remainDiv(index, size)/max(float(size-1), 1.0);\n}\n\nvec2 indexUV(int index, int size) {\n  return vec2(remainDiv(index, size))/max(float(size-1), 1.0);\n}\n\n/**\n * Convenience to sample entries safely at their texel center.\n *\n * @param {vec2} `uv` UV texture sample coordinate, expect range `[0, 1]`.\n * @param {float|int|vec2|ivec2} `[size=1.0]` Texture's size, expect\n *   `[width, height]`, or if given a scalar interpret both as `side`.\n * @param {float|vec2} `[offset=0.5]` Texel offset, expect range `[0, 1]`.\n *\n * @returns {vec2} The UV with offset to texel center, expect range\n *   `[0+offset, 1-offset]`/`[0+offset.x, 1-offset.y]`.\n */\n\nvec2 offsetUV(vec2 uv, float size, float offset) {\n  return ((uv*(size-1.0))+offset)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, float offset) {\n  return ((uv*(size-1.0))+offset)/size;\n}\n\nvec2 offsetUV(vec2 uv, vec2 size, vec2 offset) {\n  return ((uv*(size-1.0))+offset)/size;\n}\n\nvec2 offsetUV(vec2 uv, int size, float offset) {\n  return offsetUV(uv, float(size), offset);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, float offset) {\n  return offsetUV(uv, vec2(size), offset);\n}\n\nvec2 offsetUV(vec2 uv, ivec2 size, vec2 offset) {\n  return offsetUV(uv, vec2(size), offset);\n}\n\nvec2 offsetUV(vec2 uv, float size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, vec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, int size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv, ivec2 size) { return offsetUV(uv, size, 0.5); }\nvec2 offsetUV(vec2 uv) { return offsetUV(uv, 1.0, 0.5); }\n\n/** Exponential notation packed into a vector. */\nfloat exponent(vec2 basePower) { return basePower.s*pow(1e1, basePower.t); }\n\n#if points_stepsPast > 1\n  #define indexFormsStates\n  #ifdef indexFormsStates\n    /**\n * The step and entry indexes corresponding to the number of entries and steps\n * for pairs of elements (e.g: lines linking each index's steps); as detailed in\n * the `indexForms` `JS` `function`.\n * Given the vertex index and number of steps; iterates entries-then-steps.\n *\n * @see {@link index-forms}\n * @see {@link util/remain-div.glsl!}\n *\n * @param {float|int} `index` The index of a vertex; expects simple sequential\n *   index attribute.\n * @param {float|int} `states` How many steps of state each entry has.\n * @param {float|int} [`form`] How many steps of state each form covers.\n *\n * @returns {vec2|ivec2} The step and entry index, respectively, to look up the\n *   correct data to draw the given `form` along each entry's steps of state;\n *   always a `vec2` if any operand is a `float`, an `ivec2` if all are `int`;\n *   iterates with `index` by entries-then-steps.\n */\n\n// Careful handling integer maths - decimals truncated.\nivec2 indexForms_1(int index, int states, int form) {\n  int f = form-1;\n  ivec2 stepEntry = remainDiv(index, (states-f)*form);\n\n  stepEntry.s = (stepEntry.s+f)/form;\n\n  return stepEntry;\n}\n\nvec2 indexForms_1(float index, float states, float form) {\n  vec2 stepEntry = remainDiv(index/form, states-form+1.0);\n\n  stepEntry.s = ceil(stepEntry.s);\n\n  return stepEntry;\n}\n\n// Mixed-type overloads assume higher accuracy is desired; if less computation\n// with `int` is desired, use `indexForms(int(index), int(states), int(form))`\n// or `vec2(indexForms(int(index), int(states), int(form)))` instead.\n\nvec2 indexForms_1(int index, float states, float form) {\n  return indexForms_1(float(index), states, form);\n}\n\nvec2 indexForms_1(float index, int states, float form) {\n  return indexForms_1(index, float(states), form);\n}\n\nvec2 indexForms_1(float index, float states, int form) {\n  return indexForms_1(index, states, float(form));\n}\n\nvec2 indexForms_1(float index, int states, int form) {\n  return indexForms_1(index, float(states), float(form));\n}\n\nvec2 indexForms_1(int index, float states, int form) {\n  return indexForms_1(float(index), states, float(form));\n}\n\nvec2 indexForms_1(int index, int states, float form) {\n  return indexForms_1(float(index), float(states), form);\n}\n\n// Expects pairs by default, though also works for single points and possibly\n// useful for other forms.\n// Mixed-type overloads assume higher accuracy is desired; if less computation\n// with `int` is desired, use `indexForms(int(index), int(states))` or\n// `vec2(indexForms(int(index), int(states)))` instead.\n\nivec2 indexForms_1(int index, int states) {\n  return indexForms_1(index, states, 2);\n}\n\nvec2 indexForms_1(float index, float states) {\n  return indexForms_1(index, states, 2.0);\n}\n\nvec2 indexForms_1(int index, float states) {\n  return indexForms_1(float(index), states, 2.0);\n}\n\nvec2 indexForms_1(float index, int states) {\n  return indexForms_1(index, float(states), 2.0);\n}\n\n  #else\n    /**\n * The step and entry indexes corresponding to the number of entries and steps\n * for pairs of elements (e.g: lines linking each index's steps); as detailed in\n * the `indexForms` `JS` `function`.\n * Given the vertex index and number of entries; iterates steps-then-entries.\n *\n * Works out as 2 `remainDiv`:\n * `[(index%form)+floor(floor(index/form)/count), floor(index/form)%count]`\n * `[indexForm.s+floor(indexForm.t/count), indexForm.t%count]`\n * `[indexForm.s+stepEntry.t, stepEntry.s]`\n *\n * @see {@link index-forms}\n * @see {@link util/remain-div.glsl!}\n *\n * @param {float|int} `index` The index of a vertex; expects simple sequential\n *   index attribute.\n * @param {float|int} `count` How many entries are in each step of state.\n * @param {float|int} [`form`] How many steps of state each form covers.\n *\n * @returns {vec2|ivec2} The step and entry index, respectively, to look up the\n *   correct data to draw the given `form` along each entry's steps of state;\n *   always a `vec2` if any operand is a `float`, an `ivec2` if all are `int`;\n *   iterates with `index` by steps-then-entries.\n */\n\n// Careful handling integer maths - decimals truncated.\nivec2 indexForms_0(int index, int count, int form) {\n  ivec2 indexForm = remainDiv(index, form);\n  ivec2 stepEntry = remainDiv(indexForm.t, count).ts;\n\n  stepEntry.s += indexForm.s;\n\n  return stepEntry;\n}\n\nvec2 indexForms_0(float index, float count, float form) {\n  vec2 indexForm = remainDiv(index, form);\n  vec2 stepEntry = remainDiv(indexForm.t, count).ts;\n\n  stepEntry.s += indexForm.s;\n\n  return stepEntry;\n}\n\n// Mixed-type overloads assume higher accuracy is desired; if less computation\n// with `int` is desired, use `indexForms(int(index), int(count), int(form))` or\n// `vec2(indexForms(int(index), int(count), int(form)))` instead.\n\nvec2 indexForms_0(int index, float count, float form) {\n  return indexForms_0(float(index), count, form);\n}\n\nvec2 indexForms_0(float index, int count, float form) {\n  return indexForms_0(index, float(count), form);\n}\n\nvec2 indexForms_0(float index, float count, int form) {\n  return indexForms_0(index, count, float(form));\n}\n\nvec2 indexForms_0(float index, int count, int form) {\n  return indexForms_0(index, float(count), float(form));\n}\n\nvec2 indexForms_0(int index, float count, int form) {\n  return indexForms_0(float(index), count, float(form));\n}\n\nvec2 indexForms_0(int index, int count, float form) {\n  return indexForms_0(float(index), float(count), form);\n}\n\n// Expects pairs by default, though also works for single points and possibly\n// useful for other forms.\n// Mixed-type overloads assume higher accuracy is desired; if less computation\n// with `int` is desired, use `indexForms(int(index), int(count))` or\n// `vec2(indexForms(int(index), int(count)))` instead.\n\nivec2 indexForms_0(int index, int count) {\n  return indexForms_0(index, count, 2);\n}\n\nvec2 indexForms_0(float index, float count) {\n  return indexForms_0(index, count, 2.0);\n}\n\nvec2 indexForms_0(int index, float count) {\n  return indexForms_0(float(index), count, 2.0);\n}\n\nvec2 indexForms_0(float index, int count) {\n  return indexForms_0(index, float(count), 2.0);\n}\n\n  #endif\n#endif\n\nconst vec2 v0 = vec2(0);\nconst vec2 v1 = vec2(1);\nconst vec4 hidden = vec4(0);\n\nvoid main() {\n  #if points_stepsPast > 1\n    // If multiple steps are given, find past step and entry.\n    // Lookups mostly equivalent; input and result iteration order differ.\n    #ifdef indexFormsStates\n      vec2 stepEntry = indexForms_1(index, points_stepsPast, form);\n    #else\n      vec2 stepEntry = indexForms_0(index, points_entries, form);\n    #endif\n\n    float stepPast = stepEntry.s;\n    float entry = stepEntry.t;\n  #else\n    // If only 1 step is given, past step and entry are known.\n    float stepPast = 0.0;\n    float entry = index;\n  #endif\n\n  vec2 st = offsetUV(indexUV(entry, points_stateShape.xy),\n    points_stateShape.xy);\n  // vec2 st = indexUV(entry, points_stateShape.xy);\n\n  #if points_stepsPast > 1\n    points_tapStateBy(st, stepPast, 0);\n  #else\n    points_tapState(st);\n  #endif\n\n  float rescaledMass = exponent(rescaleMass);\n  float rescaledPosition = exponent(rescalePosition);\n\n  float mass = rescaledMass*\n    points_data[points_reads_position_mass].massChannels;\n\n  vec2 position = rescaledPosition*\n    points_data[points_reads_position_position].positionChannels;\n\n  float show = when_gt_1604150559(mass, 0.0);\n  vec2 boundSize = bounds.zw-bounds.xy;\n  vec2 to = (position/max(boundSize.x, boundSize.y))*2.0;\n  vec4 screen = mix(hidden, vec4(to, 0, 1), show);\n\n  screen.xy *= aspect;\n  gl_Position = screen;\n\n  float ago = stepPast/max(float(points_stepsPast-1), 1.0);\n\n  color = mix(diffuseHi, diffuseLo, ago)*show;\n  wide = mix(wideHi, wideLo, ago)*show;\n\n  float pointSize = gl_PointSize = 0.5*clamp(wide/screen.w, widths.s, widths.t);\n\n  /**\n   * Convert vertex position to `gl_FragCoord` window-space.\n   * @see [SO](https://stackoverflow.com/a/7158573)\n   * @see [SO](https://stackoverflow.com/a/54237532/716898)\n   * @todo Why does the correct size here seem to be half the radius?\n   */\n  sphere = vec3(size*map(screen.xy/screen.w, -v1, v1, v0, v1), pointSize*0.5);\n}\n";var n8={};n8="/** Points-to-screen fragment shader. */\n\nprecision highp float;\n#define GLSLIFY 1\n\nvarying float wide;\nvarying vec3 sphere;\nvarying vec4 color;\n\nfloat when_gt_1540259130(float x, float y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec2 when_gt_1540259130(vec2 x, vec2 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec3 when_gt_1540259130(vec3 x, vec3 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec4 when_gt_1540259130(vec4 x, vec4 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvoid main() {\n  float r = sphere.p;\n  float r2 = r*r;\n  vec2 cf = gl_FragCoord.xy-sphere.xy;\n  float cfl2 = dot(cf, cf);\n  float isWide = when_gt_1540259130(wide, 1.0);\n\n  #ifdef useDiscard\n    if(isWide*cfl2 > r2) { discard; }\n  #endif\n\n  float fade = max(r2-(isWide*cfl2), 0.0);\n\n  #ifdef lengthLinear\n    fade = sqrt(fade)/r;\n  #else\n    fade = fade/r2;\n  #endif\n\n  gl_FragColor = color*fade;\n  gl_FragColor.rgb *= gl_FragColor.a;\n}\n";const{floor:n9,min:n7,max:te,abs:tn,random:tt,sign:tr,sin:ti}=Math,{GRAV_ACCEL:ta}=nu.MKS,to={},ts=/^\#|0x/;function tf(e,n,t=[]){if(!Number.isFinite(e))return tf(parseInt(e=e.replace(ts,""),16),n??.5*e.length,t);for(n??=3;n--;e>>=8)t[n]=(255&e)/255;return t}const tl=()=>["oes_texture_float","webgl_color_buffer_float"],tu=()=>["webgl_draw_buffers"],tc=()=>["angle_instanced_arrays"],td=()=>["oes_texture_half_float","ext_color_buffer_half_float"],tp=()=>[...to.extensionsFloat??=tl(),...to.extensionsDrawBuffers??=tu(),...to.extensionsInstances??=tc()];function tm(e,n={}){let t=n.values=[],r=n.index={},i=n.alias=[];return(n.fields=e).forEach((e,n)=>i[r[n]=t.push(e)-1]=n),n}function tv(e,n,t={}){t.state=e,t.macros??=e0(e);let r=eB(e);if(!n)return t;for(let e in r){let t=r[e];r[e]=(e,r,i)=>t(e,n(e,r,i),i)}return t}const th={stepNow:0,passNow:0,bound:0,maps:{buffersMax:0}};var tg={};tg=function(){var e=function(e){return e instanceof Uint8Array||e instanceof Uint16Array||e instanceof Uint32Array||e instanceof Int8Array||e instanceof Int16Array||e instanceof Int32Array||e instanceof Float32Array||e instanceof Float64Array||e instanceof Uint8ClampedArray},n=function(e,n){for(var t=Object.keys(n),r=0;r<t.length;++r)e[t[r]]=n[t[r]];return e};function t(e){var n=Error("(regl) "+e);throw console.error(n),n}function r(e,n){e||t(n)}function i(e){return e?": "+e:""}function a(e,n){switch(n){case"number":return"number"==typeof e;case"object":return"object"==typeof e;case"string":return"string"==typeof e;case"boolean":return"boolean"==typeof e;case"function":return"function"==typeof e;case"undefined":return void 0===e;case"symbol":return"symbol"==typeof e}}function o(e,n,r){0>n.indexOf(e)&&t("invalid value"+i(r)+". must be one of: "+n)}var s=["gl","canvas","container","attributes","pixelRatio","extensions","optionalExtensions","profile","onDone"];function f(e,n){for(e+="";e.length<n;)e=" "+e;return e}function l(){this.name="unknown",this.lines=[],this.index={},this.hasErrors=!1}function u(e,n){this.number=e,this.line=n,this.errors=[]}function c(e,n,t){this.file=e,this.line=n,this.message=t}function d(){var e=Error(),n=(e.stack||e).toString(),t=/compileProcedure.*\n\s*at.*\((.*)\)/.exec(n);if(t)return t[1];var r=/compileProcedure.*\n\s*at\s+(.*)(\n|$)/.exec(n);return r?r[1]:"unknown"}function p(){var e=Error(),n=(e.stack||e).toString(),t=/at REGLCommand.*\n\s+at.*\((.*)\)/.exec(n);if(t)return t[1];var r=/at REGLCommand.*\n\s+at\s+(.*)\n/.exec(n);return r?r[1]:"unknown"}function m(e,n){var t=e.split("\n"),r=1,i=0,a={unknown:new l,0:new l};a.unknown.name=a[0].name=n||d(),a.unknown.lines.push(new u(0,""));for(var o=0;o<t.length;++o){var s=t[o],f=/^\s*#\s*(\w+)\s+(.+)\s*$/.exec(s);if(f)switch(f[1]){case"line":var c=/(\d+)(\s+\d+)?/.exec(f[2]);!c||(r=0|c[1],!c[2]||(i=0|c[2])in a||(a[i]=new l));break;case"define":var p,m=/SHADER_NAME(_B64)?\s+(.*)$/.exec(f[2]);m&&(a[i].name=m[1]?(p=m[2],"undefined"!=typeof atob?atob(p):"base64:"+p):m[2])}a[i].lines.push(new u(r++,s))}return Object.keys(a).forEach(function(e){var n=a[e];n.lines.forEach(function(e){n.index[e.number]=e})}),a}function v(e){e._commandRef=d()}function h(e,n){var r=p();t(e+" in command "+(n||d())+("unknown"===r?"":" called from "+r))}function g(e,n,t,r){a(e,n)||h("invalid parameter type"+i(t)+". expected "+n+", got "+typeof e,r||d())}var b={};function x(e,n){return 32820===e||32819===e||33635===e?2:34042===e?4:b[e]*n}function _(e){return!(e&e-1)&&!!e}b[5120]=b[5121]=1,b[5122]=b[5123]=b[36193]=b[33635]=b[32819]=b[32820]=2,b[5124]=b[5125]=b[5126]=b[34042]=4;var y=n(r,{optional:function(e){e()},raise:t,commandRaise:h,command:function(e,n,t){e||h(n,t||d())},parameter:function(e,n,r){e in n||t("unknown parameter ("+e+")"+i(r)+". possible values: "+Object.keys(n).join())},commandParameter:function(e,n,t,r){e in n||h("unknown parameter ("+e+")"+i(t)+". possible values: "+Object.keys(n).join(),r||d())},constructor:function(e){Object.keys(e).forEach(function(e){0>s.indexOf(e)&&t('invalid regl constructor argument "'+e+'". must be one of '+s)})},type:function(e,n,r){a(e,n)||t("invalid parameter type"+i(r)+". expected "+n+", got "+typeof e)},commandType:g,isTypedArray:function(n,r){e(n)||t("invalid parameter type"+i(r)+". must be a typed array")},nni:function(e,n){e>=0&&(0|e)===e||t("invalid parameter type, ("+e+")"+i(n)+". must be a nonnegative integer")},oneOf:o,shaderError:function(e,n,t,i,a){if(!e.getShaderParameter(n,e.COMPILE_STATUS)){var o,s=e.getShaderInfoLog(n),l=i===e.FRAGMENT_SHADER?"fragment":"vertex";g(t,"string",l+" shader source must be a string",a);var u=m(t,a);(function(e,n){n.forEach(function(n){var t=e[n.file];if(t){var r=t.index[n.line];if(r){r.errors.push(n),t.hasErrors=!0;return}}e.unknown.hasErrors=!0,e.unknown.lines[0].errors.push(n)})})(u,(o=[],s.split("\n").forEach(function(e){if(!(e.length<5)){var n=/^ERROR:\s+(\d+):(\d+):\s*(.*)$/.exec(e);n?o.push(new c(0|n[1],0|n[2],n[3].trim())):e.length>0&&o.push(new c("unknown",0,e))}}),o)),Object.keys(u).forEach(function(e){var n=u[e];if(n.hasErrors){var t=[""],r=[""];i("file number "+e+": "+n.name+"\n","color:red;text-decoration:underline;font-weight:bold"),n.lines.forEach(function(e){if(e.errors.length>0){i(f(e.number,4)+"|  ","background-color:yellow; font-weight:bold"),i(e.line+"\n","color:red; background-color:yellow; font-weight:bold");var n=0;e.errors.forEach(function(t){var r=t.message,a=/^\s*'(.*)'\s*:\s*(.*)$/.exec(r);if(a){var o=a[1];r=a[2],"assign"===o&&(o="="),n=Math.max(e.line.indexOf(o,n),0)}else n=0;i(f("| ",6)),i(f("^^^",n+3)+"\n","font-weight:bold"),i(f("| ",6)),i(r+"\n","font-weight:bold")}),i(f("| ",6)+"\n")}else i(f(e.number,4)+"|  "),i(e.line+"\n","color:red")}),"undefined"==typeof document||window.chrome?console.log(t.join("")):(r[0]=t.join("%c"),console.log.apply(console,r))}function i(e,n){t.push(e),r.push(n||"")}}),r.raise("Error compiling "+l+" shader, "+u[0].name)}},linkError:function(e,n,t,i,a){if(!e.getProgramParameter(n,e.LINK_STATUS)){var o=e.getProgramInfoLog(n),s=m(t,a),f='Error linking program with vertex shader, "'+m(i,a)[0].name+'", and fragment shader "'+s[0].name+'"';"undefined"!=typeof document?console.log("%c"+f+"\n%c"+o,"color:red;text-decoration:underline;font-weight:bold","color:red"):console.log(f+"\n"+o),r.raise(f)}},callSite:p,saveCommandRef:v,saveDrawInfo:function(e,n,t,r){function i(e,n){Object.keys(n).forEach(function(n){e[r.id(n)]=!0})}v(e),e._fragId=(a=e.static.frag)?r.id(a):0,e._vertId=(o=e.static.vert)?r.id(o):0;var a,o,s=e._uniformSet={};i(s,n.static),i(s,n.dynamic);var f=e._attributeSet={};i(f,t.static),i(f,t.dynamic),e._hasCount="count"in e.static||"count"in e.dynamic||"elements"in e.static||"elements"in e.dynamic},framebufferFormat:function(e,n,t){e.texture?o(e.texture._texture.internalformat,n,"unsupported texture format for attachment"):o(e.renderbuffer._renderbuffer.format,t,"unsupported renderbuffer format for attachment")},guessCommand:d,texture2D:function(e,n,t){var i,a=n.width,o=n.height,s=n.channels;r(a>0&&a<=t.maxTextureSize&&o>0&&o<=t.maxTextureSize,"invalid texture shape"),(33071!==e.wrapS||33071!==e.wrapT)&&r(_(a)&&_(o),"incompatible wrap mode for texture, both width and height must be power of 2"),1===n.mipmask?1!==a&&1!==o&&r(9984!==e.minFilter&&9986!==e.minFilter&&9985!==e.minFilter&&9987!==e.minFilter,"min filter requires mipmap"):(r(_(a)&&_(o),"texture must be a square power of 2 to support mipmapping"),r(n.mipmask===(a<<1)-1,"missing or incomplete mipmap data")),5126===n.type&&(0>t.extensions.indexOf("oes_texture_float_linear")&&r(9728===e.minFilter&&9728===e.magFilter,"filter not supported, must enable oes_texture_float_linear"),r(!e.genMipmaps,"mipmap generation not supported with float textures"));var f=n.images;for(i=0;i<16;++i)if(f[i]){var l=a>>i,u=o>>i;r(n.mipmask&1<<i,"missing mipmap data");var c=f[i];if(r(c.width===l&&c.height===u,"invalid shape for mip images"),r(c.format===n.format&&c.internalformat===n.internalformat&&c.type===n.type,"incompatible type for mip image"),c.compressed);else if(c.data){var d=Math.ceil(x(c.type,s)*l/c.unpackAlignment)*c.unpackAlignment;r(c.data.byteLength===d*u,"invalid data for image, buffer size is inconsistent with image format")}else c.element||c.copy}else e.genMipmaps||r((n.mipmask&1<<i)==0,"extra mipmap data");n.compressed&&r(!e.genMipmaps,"mipmap generation for compressed images not supported")},textureCube:function(e,n,t,i){var a=e.width,o=e.height,s=e.channels;r(a>0&&a<=i.maxTextureSize&&o>0&&o<=i.maxTextureSize,"invalid texture shape"),r(a===o,"cube map must be square"),r(33071===n.wrapS&&33071===n.wrapT,"wrap mode not supported by cube map");for(var f=0;f<t.length;++f){var l=t[f];r(l.width===a&&l.height===o,"inconsistent cube map face shape"),n.genMipmaps&&(r(!l.compressed,"can not generate mipmap for compressed textures"),r(1===l.mipmask,"can not specify mipmaps and generate mipmaps"));for(var u=l.images,c=0;c<16;++c){var d=u[c];if(d){var p=a>>c,m=o>>c;r(l.mipmask&1<<c,"missing mipmap data"),r(d.width===p&&d.height===m,"invalid shape for mip images"),r(d.format===e.format&&d.internalformat===e.internalformat&&d.type===e.type,"incompatible type for mip image"),d.compressed||(d.data?r(d.data.byteLength===p*m*Math.max(x(d.type,s),d.unpackAlignment),"invalid data for image, buffer size is inconsistent with image format"):d.element||d.copy)}}}}}),w=0;function S(e,n){this.id=w++,this.type=e,this.data=n}function M(e){return e.replace(/\\/g,"\\\\").replace(/"/g,'\\"')}var A={DynamicVariable:S,define:function(e,n){return new S(e,"["+(function e(n){if(0===n.length)return[];var t=n.charAt(0),r=n.charAt(n.length-1);if(n.length>1&&t===r&&('"'===t||"'"===t))return['"'+M(n.substr(1,n.length-2))+'"'];var i=/\[(false|true|null|\d+|'[^']*'|"[^"]*")\]/.exec(n);if(i)return e(n.substr(0,i.index)).concat(e(i[1])).concat(e(n.substr(i.index+i[0].length)));var a=n.split(".");if(1===a.length)return['"'+M(n)+'"'];for(var o=[],s=0;s<a.length;++s)o=o.concat(e(a[s]));return o})(n+"").join("][")+"]")},isDynamic:function(e){return"function"==typeof e&&!e._reglType||e instanceof S},unbox:function e(n,t){return"function"==typeof n?new S(0,n):"number"==typeof n||"boolean"==typeof n?new S(5,n):Array.isArray(n)?new S(6,n.map(function(n,r){return e(n,t+"["+r+"]")})):n instanceof S?n:void y(!1,"invalid option type in uniform "+t)}},T={next:"function"==typeof requestAnimationFrame?function(e){return requestAnimationFrame(e)}:function(e){return setTimeout(e,16)},cancel:"function"==typeof cancelAnimationFrame?function(e){return cancelAnimationFrame(e)}:clearTimeout},O="undefined"!=typeof performance&&performance.now?function(){return performance.now()}:function(){return+new Date};function F(e){return"string"==typeof e?e.split():(y(Array.isArray(e),"invalid extension array"),e)}function E(e){return"string"==typeof e?(y("undefined"!=typeof document,"not supported outside of DOM"),document.querySelector(e)):e}function D(e,n){for(var t=Array(e),r=0;r<e;++r)t[r]=n(r);return t}function C(e){var n,t;return n=(e>65535)<<4,e>>>=n,t=(e>255)<<3,e>>>=t,n|=t,t=(e>15)<<2,e>>>=t,n|=t,t=(e>3)<<1,e>>>=t,(n|=t)|e>>1}function k(){var e=D(8,function(){return[]});function n(n){var t=function(e){for(var n=16;n<=268435456;n*=16)if(e<=n)return n;return 0}(n),r=e[C(t)>>2];return r.length>0?r.pop():new ArrayBuffer(t)}function t(n){e[C(n.byteLength)>>2].push(n)}return{alloc:n,free:t,allocType:function(e,t){var r=null;switch(e){case 5120:r=new Int8Array(n(t),0,t);break;case 5121:r=new Uint8Array(n(t),0,t);break;case 5122:r=new Int16Array(n(2*t),0,t);break;case 5123:r=new Uint16Array(n(2*t),0,t);break;case 5124:r=new Int32Array(n(4*t),0,t);break;case 5125:r=new Uint32Array(n(4*t),0,t);break;case 5126:r=new Float32Array(n(4*t),0,t);break;default:return null}return r.length!==t?r.subarray(0,t):r},freeType:function(e){t(e.buffer)}}}var R=k();R.zero=k();var L=function(e,n){var t=1;n.ext_texture_filter_anisotropic&&(t=e.getParameter(34047));var r=1,i=1;n.webgl_draw_buffers&&(r=e.getParameter(34852),i=e.getParameter(36063));var a=!!n.oes_texture_float;if(a){var o=e.createTexture();e.bindTexture(3553,o),e.texImage2D(3553,0,6408,1,1,0,6408,5126,null);var s=e.createFramebuffer();if(e.bindFramebuffer(36160,s),e.framebufferTexture2D(36160,36064,3553,o,0),e.bindTexture(3553,null),36053!==e.checkFramebufferStatus(36160))a=!1;else{e.viewport(0,0,1,1),e.clearColor(1,0,0,1),e.clear(16384);var f=R.allocType(5126,4);e.readPixels(0,0,1,1,6408,5126,f),e.getError()?a=!1:(e.deleteFramebuffer(s),e.deleteTexture(o),a=1===f[0]),R.freeType(f)}}var l="undefined"!=typeof navigator&&(/MSIE/.test(navigator.userAgent)||/Trident\//.test(navigator.appVersion)||/Edge/.test(navigator.userAgent)),u=!0;if(!l){var c=e.createTexture(),d=R.allocType(5121,36);e.activeTexture(33984),e.bindTexture(34067,c),e.texImage2D(34069,0,6408,3,3,0,6408,5121,d),R.freeType(d),e.bindTexture(34067,null),e.deleteTexture(c),u=!e.getError()}return{colorBits:[e.getParameter(3410),e.getParameter(3411),e.getParameter(3412),e.getParameter(3413)],depthBits:e.getParameter(3414),stencilBits:e.getParameter(3415),subpixelBits:e.getParameter(3408),extensions:Object.keys(n).filter(function(e){return!!n[e]}),maxAnisotropic:t,maxDrawbuffers:r,maxColorAttachments:i,pointSizeDims:e.getParameter(33901),lineWidthDims:e.getParameter(33902),maxViewportDims:e.getParameter(3386),maxCombinedTextureUnits:e.getParameter(35661),maxCubeMapSize:e.getParameter(34076),maxRenderbufferSize:e.getParameter(34024),maxTextureUnits:e.getParameter(34930),maxTextureSize:e.getParameter(3379),maxAttributes:e.getParameter(34921),maxVertexUniforms:e.getParameter(36347),maxVertexTextureUnits:e.getParameter(35660),maxVaryingVectors:e.getParameter(36348),maxFragmentUniforms:e.getParameter(36349),glsl:e.getParameter(35724),renderer:e.getParameter(7937),vendor:e.getParameter(7936),version:e.getParameter(7938),readFloat:a,npotTextureCube:u}};function z(n){return!!n&&"object"==typeof n&&Array.isArray(n.shape)&&Array.isArray(n.stride)&&"number"==typeof n.offset&&n.shape.length===n.stride.length&&(Array.isArray(n.data)||e(n.data))}var P=function(e){return Object.keys(e).map(function(n){return e[n]})},N={shape:function(e){for(var n=[],t=e;t.length;t=t[0])n.push(t.length);return n},flatten:function(e,n,t,r){var i=1;if(n.length)for(var a=0;a<n.length;++a)i*=n[a];else i=0;var o=r||R.allocType(t,i);switch(n.length){case 0:break;case 1:!function(e,n,t){for(var r=0;r<n;++r)t[r]=e[r]}(e,n[0],o);break;case 2:!function(e,n,t,r){for(var i=0,a=0;a<n;++a)for(var o=e[a],s=0;s<t;++s)r[i++]=o[s]}(e,n[0],n[1],o);break;case 3:G(e,n[0],n[1],n[2],o,0);break;default:!function e(n,t,r,i,a){for(var o=1,s=r+1;s<t.length;++s)o*=t[s];var f=t[r];if(t.length-r==4){var l=t[r+1],u=t[r+2],c=t[r+3];for(s=0;s<f;++s)G(n[s],l,u,c,i,a),a+=o}else for(s=0;s<f;++s)e(n[s],t,r+1,i,a),a+=o}(e,n,0,o,0)}return o}};function G(e,n,t,r,i,a){for(var o=a,s=0;s<n;++s)for(var f=e[s],l=0;l<t;++l)for(var u=f[l],c=0;c<r;++c)i[o++]=u[c]}var U={"[object Int8Array]":5120,"[object Int16Array]":5122,"[object Int32Array]":5124,"[object Uint8Array]":5121,"[object Uint8ClampedArray]":5121,"[object Uint16Array]":5123,"[object Uint32Array]":5125,"[object Float32Array]":5126,"[object Float64Array]":5121,"[object ArrayBuffer]":5121},I={int8:5120,int16:5122,int32:5124,uint8:5121,uint16:5123,uint32:5125,float:5126,float32:5126},B={dynamic:35048,stream:35040,static:35044},K=N.flatten,$=N.shape,V=[];function j(e){return 0|U[Object.prototype.toString.call(e)]}function H(e,n){for(var t=0;t<n.length;++t)e[t]=n[t]}function W(e,n,t,r,i,a,o){for(var s=0,f=0;f<t;++f)for(var l=0;l<r;++l)e[s++]=n[i*f+a*l+o]}V[5120]=1,V[5122]=2,V[5124]=4,V[5121]=1,V[5123]=2,V[5125]=4,V[5126]=4;var q={points:0,point:0,lines:1,line:1,triangles:4,triangle:4,"line loop":2,"line strip":3,"triangle strip":5,"triangle fan":6},Y=new Float32Array(1),Q=new Uint32Array(Y.buffer);function X(e){for(var n=R.allocType(5123,e.length),t=0;t<e.length;++t)if(isNaN(e[t]))n[t]=65535;else if(e[t]===1/0)n[t]=31744;else if(e[t]===-1/0)n[t]=64512;else{Y[0]=e[t];var r=Q[0],i=r>>>31<<15,a=(r<<1>>>24)-127,o=r>>13&1023;if(a<-24)n[t]=i;else if(a<-14){var s=-14-a;n[t]=i+(o+1024>>s)}else a>15?n[t]=i+31744:n[t]=i+(a+15<<10)+o}return n}function J(n){return Array.isArray(n)||e(n)}var Z=function(e){return!(e&e-1)&&!!e},ee=[9984,9986,9985,9987],en=[0,6409,6410,6407,6408],et={};function er(e){return"[object "+e+"]"}et[6409]=et[6406]=et[6402]=1,et[34041]=et[6410]=2,et[6407]=et[35904]=3,et[6408]=et[35906]=4;var ei=er("HTMLCanvasElement"),ea=er("OffscreenCanvas"),eo=er("CanvasRenderingContext2D"),es=er("ImageBitmap"),ef=er("HTMLImageElement"),el=er("HTMLVideoElement"),eu=Object.keys(U).concat([ei,ea,eo,es,ef,el]),ec=[];ec[5121]=1,ec[5126]=4,ec[36193]=2,ec[5123]=2,ec[5125]=4;var ed=[];function ep(e){return Array.isArray(e)&&(0===e.length||"number"==typeof e[0])}function em(e){return!!(Array.isArray(e)&&0!==e.length&&J(e[0]))}function ev(e){return Object.prototype.toString.call(e)}function eh(e){if(!e)return!1;var n=ev(e);return eu.indexOf(n)>=0||ep(e)||em(e)||z(e)}function eg(e){return 0|U[Object.prototype.toString.call(e)]}function eb(e,n){return R.allocType(36193===e.type?5126:e.type,n)}function ex(e,n){36193===e.type?(e.data=X(n),R.freeType(n)):e.data=n}function e_(e,n,t,r,i,a){if(o=void 0!==ed[e]?ed[e]:et[e]*ec[n],a&&(o*=6),!i)return o*t*r;for(var o,s=0,f=t;f>=1;)s+=o*f*f,f/=2;return s}ed[32854]=2,ed[32855]=2,ed[36194]=2,ed[34041]=4,ed[33776]=.5,ed[33777]=.5,ed[33778]=1,ed[33779]=1,ed[35986]=.5,ed[35987]=1,ed[34798]=1,ed[35840]=.5,ed[35841]=.25,ed[35842]=.5,ed[35843]=.25,ed[36196]=.5;var ey=[];ey[32854]=2,ey[32855]=2,ey[36194]=2,ey[33189]=2,ey[36168]=1,ey[34041]=4,ey[35907]=4,ey[34836]=16,ey[34842]=8,ey[34843]=6;var ew=function(e,n,t,r,i){var a={rgba4:32854,rgb565:36194,"rgb5 a1":32855,depth:33189,stencil:36168,"depth stencil":34041};n.ext_srgb&&(a.srgba=35907),n.ext_color_buffer_half_float&&(a.rgba16f=34842,a.rgb16f=34843),n.webgl_color_buffer_float&&(a.rgba32f=34836);var o=[];Object.keys(a).forEach(function(e){o[a[e]]=e});var s=0,f={};function l(e){this.id=s++,this.refCount=1,this.renderbuffer=e,this.format=32854,this.width=0,this.height=0,i.profile&&(this.stats={size:0})}function u(n){var t=n.renderbuffer;y(t,"must not double destroy renderbuffer"),e.bindRenderbuffer(36161,null),e.deleteRenderbuffer(t),n.renderbuffer=null,n.refCount=0,delete f[n.id],r.renderbufferCount--}return l.prototype.decRef=function(){--this.refCount<=0&&u(this)},i.profile&&(r.getTotalRenderbufferSize=function(){var e=0;return Object.keys(f).forEach(function(n){e+=f[n].stats.size}),e}),{create:function(n,s){var u=new l(e.createRenderbuffer());function c(n,r){var s,f,l,d=0,p=0,m=32854;if("object"==typeof n&&n){if("shape"in n){var v=n.shape;y(Array.isArray(v)&&v.length>=2,"invalid renderbuffer shape"),d=0|v[0],p=0|v[1]}else"radius"in n&&(d=p=0|n.radius),"width"in n&&(d=0|n.width),"height"in n&&(p=0|n.height);"format"in n&&(y.parameter(n.format,a,"invalid renderbuffer format"),m=a[n.format])}else"number"==typeof n?(d=0|n,p="number"==typeof r?0|r:d):n?y.raise("invalid arguments to renderbuffer constructor"):d=p=1;if(y(d>0&&p>0&&d<=t.maxRenderbufferSize&&p<=t.maxRenderbufferSize,"invalid renderbuffer size"),d!==u.width||p!==u.height||m!==u.format)return c.width=u.width=d,c.height=u.height=p,u.format=m,e.bindRenderbuffer(36161,u.renderbuffer),e.renderbufferStorage(36161,m,d,p),y(0===e.getError(),"invalid render buffer format"),i.profile&&(u.stats.size=(s=u.format,f=u.width,l=u.height,ey[s]*f*l)),c.format=o[u.format],c}return f[u.id]=u,r.renderbufferCount++,c(n,s),c.resize=function(n,r){var a,o,s,f=0|n,l=0|r||f;return f===u.width&&l===u.height||(y(f>0&&l>0&&f<=t.maxRenderbufferSize&&l<=t.maxRenderbufferSize,"invalid renderbuffer size"),c.width=u.width=f,c.height=u.height=l,e.bindRenderbuffer(36161,u.renderbuffer),e.renderbufferStorage(36161,u.format,f,l),y(0===e.getError(),"invalid render buffer format"),i.profile&&(u.stats.size=(a=u.format,o=u.width,s=u.height,ey[a]*o*s))),c},c._reglType="renderbuffer",c._renderbuffer=u,i.profile&&(c.stats=u.stats),c.destroy=function(){u.decRef()},c},clear:function(){P(f).forEach(u)},restore:function(){P(f).forEach(function(n){n.renderbuffer=e.createRenderbuffer(),e.bindRenderbuffer(36161,n.renderbuffer),e.renderbufferStorage(36161,n.format,n.width,n.height)}),e.bindRenderbuffer(36161,null)}}},eS=[6407,6408],eM=[];eM[6408]=4,eM[6407]=3;var eA=[];eA[5121]=1,eA[5126]=4,eA[36193]=2;var eT=[32854,32855,36194,35907,34842,34843,34836],eO={};eO[36053]="complete",eO[36054]="incomplete attachment",eO[36057]="incomplete dimensions",eO[36055]="incomplete, missing attachment",eO[36061]="unsupported";var eF=["attributes","elements","offset","count","primitive","instances"];function eE(){this.state=0,this.x=0,this.y=0,this.z=0,this.w=0,this.buffer=null,this.size=0,this.normalized=!1,this.type=5126,this.offset=0,this.stride=0,this.divisor=0}function eD(e){return Array.prototype.slice.call(e)}function eC(e){return eD(e).join("")}var ek="xyzw".split(""),eR="dither",eL="blend.enable",ez="blend.color",eP="blend.equation",eN="blend.func",eG="depth.enable",eU="depth.func",eI="depth.range",eB="depth.mask",eK="colorMask",e$="cull.enable",eV="cull.face",ej="frontFace",eH="lineWidth",eW="polygonOffset.enable",eq="polygonOffset.offset",eY="sample.alpha",eQ="sample.enable",eX="sample.coverage",eJ="stencil.enable",eZ="stencil.mask",e0="stencil.func",e1="stencil.opFront",e2="stencil.opBack",e3="scissor.enable",e4="scissor.box",e5="viewport",e6="profile",e8="framebuffer",e9="vert",e7="frag",ne="elements",nn="primitive",nt="count",nr="offset",ni="instances",na="Width",no="Height",ns=e8+na,nf=e8+no,nl=e5+na,nu=e5+no,nc="drawingBuffer",nd=nc+na,np=nc+no,nm=[eN,eP,e0,e1,e2,eX,e5,e4,eq],nv={0:0,1:1,zero:0,one:1,"src color":768,"one minus src color":769,"src alpha":770,"one minus src alpha":771,"dst color":774,"one minus dst color":775,"dst alpha":772,"one minus dst alpha":773,"constant color":32769,"one minus constant color":32770,"constant alpha":32771,"one minus constant alpha":32772,"src alpha saturate":776},nh=["constant color, constant alpha","one minus constant color, constant alpha","constant color, one minus constant alpha","one minus constant color, one minus constant alpha","constant alpha, constant color","constant alpha, one minus constant color","one minus constant alpha, constant color","one minus constant alpha, one minus constant color"],ng={never:512,less:513,"<":513,equal:514,"=":514,"==":514,"===":514,lequal:515,"<=":515,greater:516,">":516,notequal:517,"!=":517,"!==":517,gequal:518,">=":518,always:519},nb={0:0,zero:0,keep:7680,replace:7681,increment:7682,decrement:7683,"increment wrap":34055,"decrement wrap":34056,invert:5386},nx={frag:35632,vert:35633},n_={cw:2304,ccw:2305};function ny(n){return Array.isArray(n)||e(n)||z(n)}function nw(e){return e.sort(function(e,n){return e===e5?-1:n===e5?1:e<n?-1:1})}function nS(e,n,t,r){this.thisDep=e,this.contextDep=n,this.propDep=t,this.append=r}function nM(e){return e&&!(e.thisDep||e.contextDep||e.propDep)}function nA(e){return new nS(!1,!1,!1,e)}function nT(e,n){var t=e.type;if(0===t){var r=e.data.length;return new nS(!0,r>=1,r>=2,n)}if(4===t){var i=e.data;return new nS(i.thisDep,i.contextDep,i.propDep,n)}if(5===t)return new nS(!1,!1,!1,n);if(6!==t)return new nS(3===t,2===t,1===t,n);for(var a=!1,o=!1,s=!1,f=0;f<e.data.length;++f){var l=e.data[f];if(1===l.type)s=!0;else if(2===l.type)o=!0;else if(3===l.type)a=!0;else if(0===l.type){a=!0;var u=l.data;u>=1&&(o=!0),u>=2&&(s=!0)}else 4===l.type&&(a=a||l.data.thisDep,o=o||l.data.contextDep,s=s||l.data.propDep)}return new nS(a,o,s,n)}var nO=new nS(!1,!1,!1,function(){}),nF=function(e,n){if(!n.ext_disjoint_timer_query)return null;var t=[],r=[];function i(){this.startQueryIndex=-1,this.endQueryIndex=-1,this.sum=0,this.stats=null}var a=[],o=[];function s(e,n,t){var r=a.pop()||new i;r.startQueryIndex=e,r.endQueryIndex=n,r.sum=0,r.stats=t,o.push(r)}var f=[],l=[];return{beginQuery:function(e){var i=t.pop()||n.ext_disjoint_timer_query.createQueryEXT();n.ext_disjoint_timer_query.beginQueryEXT(35007,i),r.push(i),s(r.length-1,r.length,e)},endQuery:function(){n.ext_disjoint_timer_query.endQueryEXT(35007)},pushScopeStats:s,update:function(){var e,i,s=r.length;if(0!==s){l.length=Math.max(l.length,s+1),f.length=Math.max(f.length,s+1),f[0]=0,l[0]=0;var u=0;for(i=0,e=0;i<r.length;++i){var c=r[i];n.ext_disjoint_timer_query.getQueryObjectEXT(c,34919)?(u+=n.ext_disjoint_timer_query.getQueryObjectEXT(c,34918),t.push(c)):r[e++]=c,f[i+1]=u,l[i+1]=e}for(i=0,r.length=e,e=0;i<o.length;++i){var d=o[i],p=d.startQueryIndex,m=d.endQueryIndex;d.sum+=f[m]-f[p];var v=l[p],h=l[m];h===v?(d.stats.gpuTime+=d.sum/1e6,a.push(d)):(d.startQueryIndex=v,d.endQueryIndex=h,o[e++]=d)}o.length=e}},getNumPendingQueries:function(){return r.length},clear:function(){t.push.apply(t,r);for(var e=0;e<t.length;e++)n.ext_disjoint_timer_query.deleteQueryEXT(t[e]);r.length=0,t.length=0},restore:function(){r.length=0,t.length=0}}},nE="webglcontextlost",nD="webglcontextrestored";function nC(e,n){for(var t=0;t<e.length;++t)if(e[t]===n)return t;return -1}return function(t){var r,i,a=function(e){var t,r,i,a,o=e||{},s={},f=[],l=[],u="undefined"==typeof window?1:window.devicePixelRatio,c=!1,d=function(e){e&&y.raise(e)},p=function(){};if("string"==typeof o?(y("undefined"!=typeof document,"selector queries only supported in DOM enviroments"),y(t=document.querySelector(o),"invalid query string for element")):"object"==typeof o?"string"==typeof o.nodeName&&"function"==typeof o.appendChild&&"function"==typeof o.getBoundingClientRect?t=o:"function"==typeof o.drawArrays||"function"==typeof o.drawElements?i=(a=o).canvas:(y.constructor(o),"gl"in o?a=o.gl:"canvas"in o?i=E(o.canvas):"container"in o&&(r=E(o.container)),"attributes"in o&&(s=o.attributes,y.type(s,"object","invalid context attributes")),"extensions"in o&&(f=F(o.extensions)),"optionalExtensions"in o&&(l=F(o.optionalExtensions)),"onDone"in o&&(y.type(o.onDone,"function","invalid or missing onDone callback"),d=o.onDone),"profile"in o&&(c=!!o.profile),"pixelRatio"in o&&y((u=+o.pixelRatio)>0,"invalid pixel ratio")):y.raise("invalid arguments to regl"),t&&("canvas"===t.nodeName.toLowerCase()?i=t:r=t),!a){if(!i){y("undefined"!=typeof document,"must manually specify webgl context outside of DOM environments");var m=function(e,t,r){var i,a=document.createElement("canvas");function o(){var n=window.innerWidth,t=window.innerHeight;if(e!==document.body){var i=a.getBoundingClientRect();n=i.right-i.left,t=i.bottom-i.top}a.width=r*n,a.height=r*t}return n(a.style,{border:0,margin:0,padding:0,top:0,left:0,width:"100%",height:"100%"}),e.appendChild(a),e===document.body&&(a.style.position="absolute",n(e.style,{margin:0,padding:0})),e!==document.body&&"function"==typeof ResizeObserver?(i=new ResizeObserver(function(){setTimeout(o)})).observe(e):window.addEventListener("resize",o,!1),o(),{canvas:a,onDestroy:function(){i?i.disconnect():window.removeEventListener("resize",o),e.removeChild(a)}}}(r||document.body,0,u);if(!m)return null;i=m.canvas,p=m.onDestroy}void 0===s.premultipliedAlpha&&(s.premultipliedAlpha=!0),a=function(e,n){function t(t){try{return e.getContext(t,n)}catch(e){return null}}return t("webgl")||t("experimental-webgl")||t("webgl-experimental")}(i,s)}return a?{gl:a,canvas:i,container:r,extensions:f,optionalExtensions:l,pixelRatio:u,profile:c,onDone:d,onDestroy:p}:(p(),d("webgl not supported, try upgrading your browser or graphics drivers http://get.webgl.org"),null)}(t);if(!a)return null;var o=a.gl,s=o.getContextAttributes(),f=o.isContextLost(),l=function(e,n){var t={};function r(n){y.type(n,"string","extension name must be string");var r,i=n.toLowerCase();try{r=t[i]=e.getExtension(i)}catch(e){}return!!r}for(var i=0;i<n.extensions.length;++i){var a=n.extensions[i];if(!r(a))return n.onDestroy(),n.onDone('"'+a+'" extension is not supported by the current WebGL context, try upgrading your system or a different browser'),null}return n.optionalExtensions.forEach(r),{extensions:t,restore:function(){Object.keys(t).forEach(function(e){if(t[e]&&!r(e))throw Error("(regl): error restoring extension "+e)})}}}(o,a);if(!l)return null;var u=(r={"":0},i=[""],{id:function(e){var n=r[e];return n||(n=r[e]=i.length,i.push(e)),n},str:function(e){return i[e]}}),c={vaoCount:0,bufferCount:0,elementsCount:0,framebufferCount:0,shaderCount:0,textureCount:0,cubeCount:0,renderbufferCount:0,maxTextureUnits:0},d=l.extensions,p=nF(o,d),m=O(),v=o.drawingBufferWidth,h=o.drawingBufferHeight,g={tick:0,time:0,viewportWidth:v,viewportHeight:h,framebufferWidth:v,framebufferHeight:h,drawingBufferWidth:v,drawingBufferHeight:h,pixelRatio:a.pixelRatio},b={elements:null,primitive:4,count:-1,offset:0,instances:-1},x=L(o,d),_=function(n,t,r,i){var a=0,o={};function s(e){this.id=a++,this.buffer=n.createBuffer(),this.type=e,this.usage=35044,this.byteLength=0,this.dimension=1,this.dtype=5121,this.persistentData=null,r.profile&&(this.stats={size:0})}s.prototype.bind=function(){n.bindBuffer(this.type,this.buffer)},s.prototype.destroy=function(){c(this)};var f=[];function l(e,t,r){e.byteLength=t.byteLength,n.bufferData(e.type,t,r)}function u(n,t,r,i,a,o){if(n.usage=r,Array.isArray(t)){if(n.dtype=i||5126,t.length>0){if(Array.isArray(t[0])){s=$(t);for(var s,f,u=1,c=1;c<s.length;++c)u*=s[c];n.dimension=u,f=K(t,s,n.dtype),l(n,f,r),o?n.persistentData=f:R.freeType(f)}else if("number"==typeof t[0]){n.dimension=a;var d=R.allocType(n.dtype,t.length);H(d,t),l(n,d,r),o?n.persistentData=d:R.freeType(d)}else e(t[0])?(n.dimension=t[0].length,n.dtype=i||j(t[0])||5126,f=K(t,[t.length,t[0].length],n.dtype),l(n,f,r),o?n.persistentData=f:R.freeType(f)):y.raise("invalid buffer data")}}else if(e(t))n.dtype=i||j(t),n.dimension=a,l(n,t,r),o&&(n.persistentData=new Uint8Array(new Uint8Array(t.buffer)));else if(z(t)){s=t.shape;var p=t.stride,m=t.offset,v=0,h=0,g=0,b=0;1===s.length?(v=s[0],h=1,g=p[0],b=0):2===s.length?(v=s[0],h=s[1],g=p[0],b=p[1]):y.raise("invalid shape"),n.dtype=i||j(t.data)||5126,n.dimension=h;var x=R.allocType(n.dtype,v*h);W(x,t.data,v,h,g,b,m),l(n,x,r),o?n.persistentData=x:R.freeType(x)}else t instanceof ArrayBuffer?(n.dtype=5121,n.dimension=a,l(n,t,r),o&&(n.persistentData=new Uint8Array(new Uint8Array(t)))):y.raise("invalid buffer data")}function c(e){t.bufferCount--,i(e);var r=e.buffer;y(r,"buffer must not be deleted already"),n.deleteBuffer(r),e.buffer=null,delete o[e.id]}return r.profile&&(t.getTotalBufferSize=function(){var e=0;return Object.keys(o).forEach(function(n){e+=o[n].stats.size}),e}),{create:function(i,a,f,l){t.bufferCount++;var d=new s(a);function p(t){var i=35044,a=null,o=0,s=0,f=1;return Array.isArray(t)||e(t)||z(t)||t instanceof ArrayBuffer?a=t:"number"==typeof t?o=0|t:t&&(y.type(t,"object","buffer arguments must be an object, a number or an array"),"data"in t&&(y(null===a||Array.isArray(a)||e(a)||z(a),"invalid data for buffer"),a=t.data),"usage"in t&&(y.parameter(t.usage,B,"invalid buffer usage"),i=B[t.usage]),"type"in t&&(y.parameter(t.type,I,"invalid buffer type"),s=I[t.type]),"dimension"in t&&(y.type(t.dimension,"number","invalid dimension"),f=0|t.dimension),"length"in t&&(y.nni(o,"buffer length must be a nonnegative integer"),o=0|t.length)),d.bind(),a?u(d,a,i,s,f,l):(o&&n.bufferData(d.type,o,i),d.dtype=s||5121,d.usage=i,d.dimension=f,d.byteLength=o),r.profile&&(d.stats.size=d.byteLength*V[d.dtype]),p}function m(e,t){y(t+e.byteLength<=d.byteLength,"invalid buffer subdata call, buffer is too small.  Can't write data of size "+e.byteLength+" starting from offset "+t+" to a buffer of size "+d.byteLength),n.bufferSubData(d.type,t,e)}return o[d.id]=d,f||p(i),p._reglType="buffer",p._buffer=d,p.subdata=function(n,t){var r,i=0|(t||0);if(d.bind(),e(n)||n instanceof ArrayBuffer)m(n,i);else if(Array.isArray(n)){if(n.length>0){if("number"==typeof n[0]){var a=R.allocType(d.dtype,n.length);H(a,n),m(a,i),R.freeType(a)}else if(Array.isArray(n[0])||e(n[0])){r=$(n);var o=K(n,r,d.dtype);m(o,i),R.freeType(o)}else y.raise("invalid buffer data")}}else if(z(n)){r=n.shape;var s=n.stride,f=0,l=0,u=0,c=0;1===r.length?(f=r[0],l=1,u=s[0],c=0):2===r.length?(f=r[0],l=r[1],u=s[0],c=s[1]):y.raise("invalid shape");var v=Array.isArray(n.data)?d.dtype:j(n.data),h=R.allocType(v,f*l);W(h,n.data,f,l,u,c,n.offset),m(h,i),R.freeType(h)}else y.raise("invalid data for buffer subdata");return p},r.profile&&(p.stats=d.stats),p.destroy=function(){c(d)},p},createStream:function(e,n){var t=f.pop();return t||(t=new s(e)),t.bind(),u(t,n,35040,0,1,!1),t},destroyStream:function(e){f.push(e)},clear:function(){P(o).forEach(c),f.forEach(c)},getBuffer:function(e){return e&&e._buffer instanceof s?e._buffer:null},restore:function(){P(o).forEach(function(e){e.buffer=n.createBuffer(),n.bindBuffer(e.type,e.buffer),n.bufferData(e.type,e.persistentData||e.byteLength,e.usage)})},_initBuffer:u}}(o,c,a,function(e){return S.destroyBuffer(e)}),w=function(n,t,r,i){var a={},o=0,s={uint8:5121,uint16:5123};function f(e){this.id=o++,a[this.id]=this,this.buffer=e,this.primType=4,this.vertCount=0,this.type=0}t.oes_element_index_uint&&(s.uint32=5125),f.prototype.bind=function(){this.buffer.bind()};var l=[];function u(i,a,o,s,f,l,u){if(i.buffer.bind(),a){var c,d=u;!u&&(!e(a)||z(a)&&!e(a.data))&&(d=t.oes_element_index_uint?5125:5123),r._initBuffer(i.buffer,a,o,d,3)}else n.bufferData(34963,l,o),i.buffer.dtype=c||5121,i.buffer.usage=o,i.buffer.dimension=3,i.buffer.byteLength=l;if(c=u,!u){switch(i.buffer.dtype){case 5121:case 5120:c=5121;break;case 5123:case 5122:c=5123;break;case 5125:case 5124:c=5125;break;default:y.raise("unsupported type for element array")}i.buffer.dtype=c}i.type=c,y(5125!==c||!!t.oes_element_index_uint,"32 bit element buffers not supported, enable oes_element_index_uint first");var p=f;p<0&&(p=i.buffer.byteLength,5123===c?p>>=1:5125===c&&(p>>=2)),i.vertCount=p;var m=s;if(s<0){m=4;var v=i.buffer.dimension;1===v&&(m=0),2===v&&(m=1),3===v&&(m=4)}i.primType=m}function c(e){i.elementsCount--,y(null!==e.buffer,"must not double destroy elements"),delete a[e.id],e.buffer.destroy(),e.buffer=null}return{create:function(n,t){var a=r.create(null,34963,!0),o=new f(a._buffer);function l(n){if(n){if("number"==typeof n)a(n),o.primType=4,o.vertCount=0|n,o.type=5121;else{var t=null,r=35044,i=-1,f=-1,c=0,d=0;Array.isArray(n)||e(n)||z(n)?t=n:(y.type(n,"object","invalid arguments for elements"),"data"in n&&y(Array.isArray(t=n.data)||e(t)||z(t),"invalid data for element buffer"),"usage"in n&&(y.parameter(n.usage,B,"invalid element buffer usage"),r=B[n.usage]),"primitive"in n&&(y.parameter(n.primitive,q,"invalid element buffer primitive"),i=q[n.primitive]),"count"in n&&(y("number"==typeof n.count&&n.count>=0,"invalid vertex count for elements"),f=0|n.count),"type"in n&&(y.parameter(n.type,s,"invalid buffer type"),d=s[n.type]),"length"in n?c=0|n.length:(c=f,5123===d||5122===d?c*=2:(5125===d||5124===d)&&(c*=4))),u(o,t,r,i,f,c,d)}}else a(),o.primType=4,o.vertCount=0,o.type=5121;return l}return i.elementsCount++,l(n),l._reglType="elements",l._elements=o,l.subdata=function(e,n){return a.subdata(e,n),l},l.destroy=function(){c(o)},l},createStream:function(e){var n=l.pop();return n||(n=new f(r.create(null,34963,!0,!1)._buffer)),u(n,e,35040,-1,-1,0,0),n},destroyStream:function(e){l.push(e)},getElements:function(e){return"function"==typeof e&&e._elements instanceof f?e._elements:null},clear:function(){P(a).forEach(c)}}}(o,d,_,c),S=function(n,t,r,i,a,o,s){for(var f=r.maxAttributes,l=Array(f),u=0;u<f;++u)l[u]=new eE;var c=0,d={},p={Record:eE,scope:{},state:l,currentVAO:null,targetVAO:null,restore:m()?function(){m()&&P(d).forEach(function(e){e.refresh()})}:function(){},createVAO:function(n){var r=new h;function s(n){if(Array.isArray(n))d=n,r.elements&&r.ownsElements&&r.elements.destroy(),r.elements=null,r.ownsElements=!1,r.offset=0,r.count=0,r.instances=-1,r.primitive=4;else{if(y("object"==typeof n,"invalid arguments for create vao"),y("attributes"in n,"must specify attributes for vao"),n.elements){var i=n.elements;r.ownsElements?("function"==typeof i&&"elements"===i._reglType?r.elements.destroy():r.elements(i),r.ownsElements=!1):o.getElements(n.elements)?(r.elements=n.elements,r.ownsElements=!1):(r.elements=o.create(n.elements),r.ownsElements=!0)}else r.elements=null,r.ownsElements=!1;d=n.attributes,r.offset=0,r.count=-1,r.instances=-1,r.primitive=4,r.elements&&(r.count=r.elements._elements.vertCount,r.primitive=r.elements._elements.primType),"offset"in n&&(r.offset=0|n.offset),"count"in n&&(r.count=0|n.count),"instances"in n&&(r.instances=0|n.instances),"primitive"in n&&(y(n.primitive in q,"bad primitive type: "+n.primitive),r.primitive=q[n.primitive]),y.optional(()=>{for(var e=Object.keys(n),t=0;t<e.length;++t)y(eF.indexOf(e[t])>=0,'invalid option for vao: "'+e[t]+'" valid options are '+eF)}),y(Array.isArray(d),"attributes must be an array")}y(d.length<f,"too many attributes"),y(d.length>0,"must specify at least one attribute");var l={},u=r.attributes;u.length=d.length;for(var c=0;c<d.length;++c){var d,p,m=d[c],v=u[c]=new eE,h=m.data||m;Array.isArray(h)||e(h)||z(h)?(r.buffers[c]&&(p=r.buffers[c],e(h)&&p._buffer.byteLength>=h.byteLength?p.subdata(h):(p.destroy(),r.buffers[c]=null)),r.buffers[c]||(p=r.buffers[c]=a.create(m,34962,!1,!0)),v.buffer=a.getBuffer(p),v.size=0|v.buffer.dimension,v.normalized=!1,v.type=v.buffer.dtype,v.offset=0,v.stride=0,v.divisor=0,v.state=1,l[c]=1):a.getBuffer(m)?(v.buffer=a.getBuffer(m),v.size=0|v.buffer.dimension,v.normalized=!1,v.type=v.buffer.dtype,v.offset=0,v.stride=0,v.divisor=0,v.state=1):a.getBuffer(m.buffer)?(v.buffer=a.getBuffer(m.buffer),v.size=0|(+m.size||v.buffer.dimension),v.normalized=!!m.normalized,"type"in m?(y.parameter(m.type,I,"invalid buffer type"),v.type=I[m.type]):v.type=v.buffer.dtype,v.offset=0|(m.offset||0),v.stride=0|(m.stride||0),v.divisor=0|(m.divisor||0),v.state=1,y(v.size>=1&&v.size<=4,"size must be between 1 and 4"),y(v.offset>=0,"invalid offset"),y(v.stride>=0&&v.stride<=255,"stride must be between 0 and 255"),y(v.divisor>=0,"divisor must be positive"),y(!v.divisor||!!t.angle_instanced_arrays,"ANGLE_instanced_arrays must be enabled to use divisor")):"x"in m?(y(c>0,"first attribute must not be a constant"),v.x=+m.x||0,v.y=+m.y||0,v.z=+m.z||0,v.w=+m.w||0,v.state=2):y(!1,"invalid attribute spec for location "+c)}for(var g=0;g<r.buffers.length;++g)!l[g]&&r.buffers[g]&&(r.buffers[g].destroy(),r.buffers[g]=null);return r.refresh(),s}return i.vaoCount+=1,s.destroy=function(){for(var e=0;e<r.buffers.length;++e)r.buffers[e]&&r.buffers[e].destroy();r.buffers.length=0,r.ownsElements&&(r.elements.destroy(),r.elements=null,r.ownsElements=!1),r.destroy()},s._vao=r,s._reglType="vao",s(n)},getVAO:function(e){return"function"==typeof e&&e._vao?e._vao:null},destroyBuffer:function(e){for(var t=0;t<l.length;++t){var r=l[t];r.buffer===e&&(n.disableVertexAttribArray(t),r.buffer=null)}},setVAO:m()?function(e){if(e!==p.currentVAO){var n=m();e?n.bindVertexArrayOES(e.vao):n.bindVertexArrayOES(null),p.currentVAO=e}}:function(e){if(e!==p.currentVAO){if(e)e.bindAttrs();else{for(var t=v(),r=0;r<l.length;++r){var i=l[r];i.buffer?(n.enableVertexAttribArray(r),i.buffer.bind(),n.vertexAttribPointer(r,i.size,i.type,i.normalized,i.stride,i.offfset),t&&i.divisor&&t.vertexAttribDivisorANGLE(r,i.divisor)):(n.disableVertexAttribArray(r),n.vertexAttrib4f(r,i.x,i.y,i.z,i.w))}s.elements?n.bindBuffer(34963,s.elements.buffer.buffer):n.bindBuffer(34963,null)}p.currentVAO=e}},clear:m()?function(){P(d).forEach(function(e){e.destroy()})}:function(){}};function m(){return t.oes_vertex_array_object}function v(){return t.angle_instanced_arrays}function h(){this.id=++c,this.attributes=[],this.elements=null,this.ownsElements=!1,this.count=0,this.offset=0,this.instances=-1,this.primitive=4;var e=m();e?this.vao=e.createVertexArrayOES():this.vao=null,d[this.id]=this,this.buffers=[]}return h.prototype.bindAttrs=function(){for(var e=v(),t=this.attributes,r=0;r<t.length;++r){var i=t[r];i.buffer?(n.enableVertexAttribArray(r),n.bindBuffer(34962,i.buffer.buffer),n.vertexAttribPointer(r,i.size,i.type,i.normalized,i.stride,i.offset),e&&i.divisor&&e.vertexAttribDivisorANGLE(r,i.divisor)):(n.disableVertexAttribArray(r),n.vertexAttrib4f(r,i.x,i.y,i.z,i.w))}for(var a=t.length;a<f;++a)n.disableVertexAttribArray(a);var s=o.getElements(this.elements);s?n.bindBuffer(34963,s.buffer.buffer):n.bindBuffer(34963,null)},h.prototype.refresh=function(){var e=m();e&&(e.bindVertexArrayOES(this.vao),this.bindAttrs(),p.currentVAO=null,e.bindVertexArrayOES(null))},h.prototype.destroy=function(){if(this.vao){var e=m();this===p.currentVAO&&(p.currentVAO=null,e.bindVertexArrayOES(null)),e.deleteVertexArrayOES(this.vao),this.vao=null}this.ownsElements&&(this.elements.destroy(),this.elements=null,this.ownsElements=!1),d[this.id]&&(delete d[this.id],i.vaoCount-=1)},p}(o,d,x,c,_,w,b),M=function(e,t,r,i){var a={},o={};function s(e,n,t,r){this.name=e,this.id=n,this.location=t,this.info=r}function f(e,n){for(var t=0;t<e.length;++t)if(e[t].id===n.id){e[t].location=n.location;return}e.push(n)}function l(n,r,i){var s=35632===n?a:o,f=s[r];if(!f){var l=t.str(r);f=e.createShader(n),e.shaderSource(f,l),e.compileShader(f),y.shaderError(e,f,l,n,i),s[r]=f}return f}var u={},c=[],d=0;function p(e,n){this.id=d++,this.fragId=e,this.vertId=n,this.program=null,this.uniforms=[],this.attributes=[],this.refCount=1,i.profile&&(this.stats={uniformsCount:0,attributesCount:0})}function m(n,r,a){var o,u,c=l(35632,n.fragId),d=l(35633,n.vertId),p=n.program=e.createProgram();if(e.attachShader(p,c),e.attachShader(p,d),a)for(o=0;o<a.length;++o){var m=a[o];e.bindAttribLocation(p,m[0],m[1])}e.linkProgram(p),y.linkError(e,p,t.str(n.fragId),t.str(n.vertId),r);var v=e.getProgramParameter(p,35718);i.profile&&(n.stats.uniformsCount=v);var h=n.uniforms;for(o=0;o<v;++o)if(u=e.getActiveUniform(p,o)){if(u.size>1)for(var g=0;g<u.size;++g){var b=u.name.replace("[0]","["+g+"]");f(h,new s(b,t.id(b),e.getUniformLocation(p,b),u))}var x=u.name;u.size>1&&(x=x.replace("[0]","")),f(h,new s(x,t.id(x),e.getUniformLocation(p,x),u))}var _=e.getProgramParameter(p,35721);i.profile&&(n.stats.attributesCount=_);var w=n.attributes;for(o=0;o<_;++o)(u=e.getActiveAttrib(p,o))&&f(w,new s(u.name,t.id(u.name),e.getAttribLocation(p,u.name),u))}return i.profile&&(r.getMaxUniformsCount=function(){var e=0;return c.forEach(function(n){n.stats.uniformsCount>e&&(e=n.stats.uniformsCount)}),e},r.getMaxAttributesCount=function(){var e=0;return c.forEach(function(n){n.stats.attributesCount>e&&(e=n.stats.attributesCount)}),e}),{clear:function(){var n=e.deleteShader.bind(e);P(a).forEach(n),a={},P(o).forEach(n),o={},c.forEach(function(n){e.deleteProgram(n.program)}),c.length=0,u={},r.shaderCount=0},program:function(t,i,s,f){y.command(t>=0,"missing vertex shader",s),y.command(i>=0,"missing fragment shader",s);var l=u[i];l||(l=u[i]={});var d=l[t];if(d&&(d.refCount++,!f))return d;var v=new p(i,t);return r.shaderCount++,m(v,s,f),d||(l[t]=v),c.push(v),n(v,{destroy:function(){if(v.refCount--,v.refCount<=0){e.deleteProgram(v.program);var n=c.indexOf(v);c.splice(n,1),r.shaderCount--}l[v.vertId].refCount<=0&&(e.deleteShader(o[v.vertId]),delete o[v.vertId],delete u[v.fragId][v.vertId]),Object.keys(u[v.fragId]).length||(e.deleteShader(a[v.fragId]),delete a[v.fragId],delete u[v.fragId])}})},restore:function(){a={},o={};for(var e=0;e<c.length;++e)m(c[e],null,c[e].attributes.map(function(e){return[e.location,e.name]}))},shader:l,frag:-1,vert:-1}}(o,u,c,a),C=function(t,r,i,a,o,s,f){var l={"don't care":4352,"dont care":4352,nice:4354,fast:4353},u={repeat:10497,clamp:33071,mirror:33648},c={nearest:9728,linear:9729},d=n({mipmap:9987,"nearest mipmap nearest":9984,"linear mipmap nearest":9985,"nearest mipmap linear":9986,"linear mipmap linear":9987},c),p={none:0,browser:37444},m={uint8:5121,rgba4:32819,rgb565:33635,"rgb5 a1":32820},v={alpha:6406,luminance:6409,"luminance alpha":6410,rgb:6407,rgba:6408,rgba4:32854,"rgb5 a1":32855,rgb565:36194},h={};r.ext_srgb&&(v.srgb=35904,v.srgba=35906),r.oes_texture_float&&(m.float32=m.float=5126),r.oes_texture_half_float&&(m.float16=m["half float"]=36193),r.webgl_depth_texture&&(n(v,{depth:6402,"depth stencil":34041}),n(m,{uint16:5123,uint32:5125,"depth stencil":34042})),r.webgl_compressed_texture_s3tc&&n(h,{"rgb s3tc dxt1":33776,"rgba s3tc dxt1":33777,"rgba s3tc dxt3":33778,"rgba s3tc dxt5":33779}),r.webgl_compressed_texture_atc&&n(h,{"rgb atc":35986,"rgba atc explicit alpha":35987,"rgba atc interpolated alpha":34798}),r.webgl_compressed_texture_pvrtc&&n(h,{"rgb pvrtc 4bppv1":35840,"rgb pvrtc 2bppv1":35841,"rgba pvrtc 4bppv1":35842,"rgba pvrtc 2bppv1":35843}),r.webgl_compressed_texture_etc1&&(h["rgb etc1"]=36196);var g=Array.prototype.slice.call(t.getParameter(34467));Object.keys(h).forEach(function(e){var n=h[e];g.indexOf(n)>=0&&(v[e]=n)});var b=Object.keys(v);i.textureFormats=b;var x=[];Object.keys(v).forEach(function(e){x[v[e]]=e});var _=[];Object.keys(m).forEach(function(e){_[m[e]]=e});var w=[];Object.keys(c).forEach(function(e){w[c[e]]=e});var S=[];Object.keys(d).forEach(function(e){S[d[e]]=e});var M=[];Object.keys(u).forEach(function(e){M[u[e]]=e});var A=b.reduce(function(e,n){var t=v[n];return 6409===t||6406===t||6409===t||6410===t||6402===t||34041===t||r.ext_srgb&&(35904===t||35906===t)?e[t]=t:32855===t||n.indexOf("rgba")>=0?e[t]=6408:e[t]=6407,e},{});function T(){this.internalformat=6408,this.format=6408,this.type=5121,this.compressed=!1,this.premultiplyAlpha=!1,this.flipY=!1,this.unpackAlignment=1,this.colorSpace=37444,this.width=0,this.height=0,this.channels=0}function O(e,n){e.internalformat=n.internalformat,e.format=n.format,e.type=n.type,e.compressed=n.compressed,e.premultiplyAlpha=n.premultiplyAlpha,e.flipY=n.flipY,e.unpackAlignment=n.unpackAlignment,e.colorSpace=n.colorSpace,e.width=n.width,e.height=n.height,e.channels=n.channels}function F(e,n){if("object"==typeof n&&n){if("premultiplyAlpha"in n&&(y.type(n.premultiplyAlpha,"boolean","invalid premultiplyAlpha"),e.premultiplyAlpha=n.premultiplyAlpha),"flipY"in n&&(y.type(n.flipY,"boolean","invalid texture flip"),e.flipY=n.flipY),"alignment"in n&&(y.oneOf(n.alignment,[1,2,4,8],"invalid texture unpack alignment"),e.unpackAlignment=n.alignment),"colorSpace"in n&&(y.parameter(n.colorSpace,p,"invalid colorSpace"),e.colorSpace=p[n.colorSpace]),"type"in n){var t=n.type;y(r.oes_texture_float||!("float"===t||"float32"===t),"you must enable the OES_texture_float extension in order to use floating point textures."),y(r.oes_texture_half_float||!("half float"===t||"float16"===t),"you must enable the OES_texture_half_float extension in order to use 16-bit floating point textures."),y(r.webgl_depth_texture||!("uint16"===t||"uint32"===t||"depth stencil"===t),"you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures."),y.parameter(t,m,"invalid texture type"),e.type=m[t]}var a=e.width,o=e.height,s=e.channels,f=!1;"shape"in n?(y(Array.isArray(n.shape)&&n.shape.length>=2,"shape must be an array"),a=n.shape[0],o=n.shape[1],3===n.shape.length&&(y((s=n.shape[2])>0&&s<=4,"invalid number of channels"),f=!0),y(a>=0&&a<=i.maxTextureSize,"invalid width"),y(o>=0&&o<=i.maxTextureSize,"invalid height")):("radius"in n&&y((a=o=n.radius)>=0&&a<=i.maxTextureSize,"invalid radius"),"width"in n&&y((a=n.width)>=0&&a<=i.maxTextureSize,"invalid width"),"height"in n&&y((o=n.height)>=0&&o<=i.maxTextureSize,"invalid height"),"channels"in n&&(y((s=n.channels)>0&&s<=4,"invalid number of channels"),f=!0)),e.width=0|a,e.height=0|o,e.channels=0|s;var l=!1;if("format"in n){var u=n.format;y(r.webgl_depth_texture||!("depth"===u||"depth stencil"===u),"you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures."),y.parameter(u,v,"invalid texture format");var c=e.internalformat=v[u];e.format=A[c],u in m&&!("type"in n)&&(e.type=m[u]),u in h&&(e.compressed=!0),l=!0}!f&&l?e.channels=et[e.format]:f&&!l?e.channels!==en[e.format]&&(e.format=e.internalformat=en[e.channels]):l&&f&&y(e.channels===et[e.format],"number of channels inconsistent with specified format")}}function E(e){t.pixelStorei(37440,e.flipY),t.pixelStorei(37441,e.premultiplyAlpha),t.pixelStorei(37443,e.colorSpace),t.pixelStorei(3317,e.unpackAlignment)}function D(){T.call(this),this.xOffset=0,this.yOffset=0,this.data=null,this.needsFree=!1,this.element=null,this.needsCopy=!1}function C(n,t){var r=null;if(eh(t)?r=t:t&&(y.type(t,"object","invalid pixel data type"),F(n,t),"x"in t&&(n.xOffset=0|t.x),"y"in t&&(n.yOffset=0|t.y),eh(t.data)&&(r=t.data)),y(!n.compressed||r instanceof Uint8Array,"compressed texture data must be stored in a uint8array"),t.copy){y(!r,"can not specify copy and data field for the same texture");var a=o.viewportWidth,s=o.viewportHeight;n.width=n.width||a-n.xOffset,n.height=n.height||s-n.yOffset,n.needsCopy=!0,y(n.xOffset>=0&&n.xOffset<a&&n.yOffset>=0&&n.yOffset<s&&n.width>0&&n.width<=a&&n.height>0&&n.height<=s,"copy texture read out of bounds")}else if(r){if(e(r))n.channels=n.channels||4,n.data=r,"type"in t||5121!==n.type||(n.type=eg(r));else if(ep(r))n.channels=n.channels||4,function(e,n){var t=n.length;switch(e.type){case 5121:case 5123:case 5125:case 5126:var r=R.allocType(e.type,t);r.set(n),e.data=r;break;case 36193:e.data=X(n);break;default:y.raise("unsupported texture type, must specify a typed array")}}(n,r),n.alignment=1,n.needsFree=!0;else if(z(r)){var f,l,u,c,d,p,m=r.data;Array.isArray(m)||5121!==n.type||(n.type=eg(m));var v=r.shape,h=r.stride;3===v.length?(u=v[2],p=h[2]):(y(2===v.length,"invalid ndarray pixel data, must be 2 or 3D"),u=1,p=1),f=v[0],l=v[1],c=h[0],d=h[1],n.alignment=1,n.width=f,n.height=l,n.channels=u,n.format=n.internalformat=en[u],n.needsFree=!0,function(e,n,t,r,i,a){for(var o=e.width,s=e.height,f=e.channels,l=eb(e,o*s*f),u=0,c=0;c<s;++c)for(var d=0;d<o;++d)for(var p=0;p<f;++p)l[u++]=n[t*d+r*c+i*p+a];ex(e,l)}(n,m,c,d,p,r.offset)}else if(ev(r)===ei||ev(r)===ea||ev(r)===eo)ev(r)===ei||ev(r)===ea?n.element=r:n.element=r.canvas,n.width=n.element.width,n.height=n.element.height,n.channels=4;else if(ev(r)===es)n.element=r,n.width=r.width,n.height=r.height,n.channels=4;else if(ev(r)===ef)n.element=r,n.width=r.naturalWidth,n.height=r.naturalHeight,n.channels=4;else if(ev(r)===el)n.element=r,n.width=r.videoWidth,n.height=r.videoHeight,n.channels=4;else if(em(r)){var g=n.width||r[0].length,b=n.height||r.length,x=n.channels;x=J(r[0][0])?x||r[0][0].length:x||1;for(var _=N.shape(r),w=1,S=0;S<_.length;++S)w*=_[S];var M=eb(n,w);N.flatten(r,_,"",M),ex(n,M),n.alignment=1,n.width=g,n.height=b,n.channels=x,n.format=n.internalformat=en[x],n.needsFree=!0}}else n.width=n.width||1,n.height=n.height||1,n.channels=n.channels||4;5126===n.type?y(i.extensions.indexOf("oes_texture_float")>=0,"oes_texture_float extension not enabled"):36193===n.type&&y(i.extensions.indexOf("oes_texture_half_float")>=0,"oes_texture_half_float extension not enabled")}function k(e,n,r,i,o){var s=e.element,f=e.data,l=e.internalformat,u=e.format,c=e.type,d=e.width,p=e.height;E(e),s?t.texSubImage2D(n,o,r,i,u,c,s):e.compressed?t.compressedTexSubImage2D(n,o,r,i,l,d,p,f):e.needsCopy?(a(),t.copyTexSubImage2D(n,o,r,i,e.xOffset,e.yOffset,d,p)):t.texSubImage2D(n,o,r,i,d,p,u,c,f)}var L=[];function G(){return L.pop()||new D}function U(e){e.needsFree&&R.freeType(e.data),D.call(e),L.push(e)}function I(){T.call(this),this.genMipmaps=!1,this.mipmapHint=4352,this.mipmask=0,this.images=Array(16)}function B(e,n,t){var r=e.images[0]=G();e.mipmask=1,r.width=e.width=n,r.height=e.height=t,r.channels=e.channels=4}function K(e,n){var t=null;if(eh(n))O(t=e.images[0]=G(),e),C(t,n),e.mipmask=1;else if(F(e,n),Array.isArray(n.mipmap))for(var r=n.mipmap,i=0;i<r.length;++i)O(t=e.images[i]=G(),e),t.width>>=i,t.height>>=i,C(t,r[i]),e.mipmask|=1<<i;else O(t=e.images[0]=G(),e),C(t,n),e.mipmask=1;O(e,e.images[0]),e.compressed&&(33776===e.internalformat||33777===e.internalformat||33778===e.internalformat||33779===e.internalformat)&&y(e.width%4==0&&e.height%4==0,"for compressed texture formats, mipmap level 0 must have width and height that are a multiple of 4")}function $(e,n){for(var r=e.images,i=0;i<r.length;++i){if(!r[i])return;!function(e,n,r){var i=e.element,o=e.data,s=e.internalformat,f=e.format,l=e.type,u=e.width,c=e.height;E(e),i?t.texImage2D(n,r,f,f,l,i):e.compressed?t.compressedTexImage2D(n,r,s,u,c,0,o):e.needsCopy?(a(),t.copyTexImage2D(n,r,f,e.xOffset,e.yOffset,u,c,0)):t.texImage2D(n,r,f,u,c,0,f,l,o||null)}(r[i],n,i)}}var V=[];function j(){var e=V.pop()||new I;T.call(e),e.mipmask=0;for(var n=0;n<16;++n)e.images[n]=null;return e}function H(e){for(var n=e.images,t=0;t<n.length;++t)n[t]&&U(n[t]),n[t]=null;V.push(e)}function W(){this.minFilter=9728,this.magFilter=9728,this.wrapS=33071,this.wrapT=33071,this.anisotropic=1,this.genMipmaps=!1,this.mipmapHint=4352}function q(e,n){if("min"in n){var t=n.min;y.parameter(t,d),e.minFilter=d[t],!(ee.indexOf(e.minFilter)>=0)||"faces"in n||(e.genMipmaps=!0)}if("mag"in n){var r=n.mag;y.parameter(r,c),e.magFilter=c[r]}var a=e.wrapS,o=e.wrapT;if("wrap"in n){var s=n.wrap;"string"==typeof s?(y.parameter(s,u),a=o=u[s]):Array.isArray(s)&&(y.parameter(s[0],u),y.parameter(s[1],u),a=u[s[0]],o=u[s[1]])}else{if("wrapS"in n){var f=n.wrapS;y.parameter(f,u),a=u[f]}if("wrapT"in n){var p=n.wrapT;y.parameter(p,u),o=u[p]}}if(e.wrapS=a,e.wrapT=o,"anisotropic"in n){var m=n.anisotropic;y("number"==typeof m&&m>=1&&m<=i.maxAnisotropic,"aniso samples must be between 1 and "),e.anisotropic=n.anisotropic}if("mipmap"in n){var v=!1;switch(typeof n.mipmap){case"string":y.parameter(n.mipmap,l,"invalid mipmap hint"),e.mipmapHint=l[n.mipmap],e.genMipmaps=!0,v=!0;break;case"boolean":v=e.genMipmaps=n.mipmap;break;case"object":y(Array.isArray(n.mipmap),"invalid mipmap type"),e.genMipmaps=!1,v=!0;break;default:y.raise("invalid mipmap type")}!v||"min"in n||(e.minFilter=9984)}}function Y(e,n){t.texParameteri(n,10241,e.minFilter),t.texParameteri(n,10240,e.magFilter),t.texParameteri(n,10242,e.wrapS),t.texParameteri(n,10243,e.wrapT),r.ext_texture_filter_anisotropic&&t.texParameteri(n,34046,e.anisotropic),e.genMipmaps&&(t.hint(33170,e.mipmapHint),t.generateMipmap(n))}var Q=0,er={},eu=i.maxTextureUnits,ec=Array(eu).map(function(){return null});function ed(e){T.call(this),this.mipmask=0,this.internalformat=6408,this.id=Q++,this.refCount=1,this.target=e,this.texture=t.createTexture(),this.unit=-1,this.bindCount=0,this.texInfo=new W,f.profile&&(this.stats={size:0})}function ey(e){t.activeTexture(33984),t.bindTexture(e.target,e.texture)}function ew(){var e=ec[0];e?t.bindTexture(e.target,e.texture):t.bindTexture(3553,null)}function eS(e){var n=e.texture;y(n,"must not double destroy texture");var r=e.unit,i=e.target;r>=0&&(t.activeTexture(33984+r),t.bindTexture(i,null),ec[r]=null),t.deleteTexture(n),e.texture=null,e.params=null,e.pixels=null,e.refCount=0,delete er[e.id],s.textureCount--}return n(ed.prototype,{bind:function(){this.bindCount+=1;var e=this.unit;if(e<0){for(var n=0;n<eu;++n){var r=ec[n];if(r){if(r.bindCount>0)continue;r.unit=-1}ec[n]=this,e=n;break}e>=eu&&y.raise("insufficient number of texture units"),f.profile&&s.maxTextureUnits<e+1&&(s.maxTextureUnits=e+1),this.unit=e,t.activeTexture(33984+e),t.bindTexture(this.target,this.texture)}return e},unbind:function(){this.bindCount-=1},decRef:function(){--this.refCount<=0&&eS(this)}}),f.profile&&(s.getTotalTextureSize=function(){var e=0;return Object.keys(er).forEach(function(n){e+=er[n].stats.size}),e}),{create2D:function(e,n){var r=new ed(3553);function a(e,n){var t=r.texInfo;W.call(t);var o=j();return"number"==typeof e?"number"==typeof n?B(o,0|e,0|n):B(o,0|e,0|e):e?(y.type(e,"object","invalid arguments to regl.texture"),q(t,e),K(o,e)):B(o,1,1),t.genMipmaps&&(o.mipmask=(o.width<<1)-1),r.mipmask=o.mipmask,O(r,o),y.texture2D(t,o,i),r.internalformat=o.internalformat,a.width=o.width,a.height=o.height,ey(r),$(o,3553),Y(t,3553),ew(),H(o),f.profile&&(r.stats.size=e_(r.internalformat,r.type,o.width,o.height,t.genMipmaps,!1)),a.format=x[r.internalformat],a.type=_[r.type],a.mag=w[t.magFilter],a.min=S[t.minFilter],a.wrapS=M[t.wrapS],a.wrapT=M[t.wrapT],a}return er[r.id]=r,s.textureCount++,a(e,n),a.subimage=function(e,n,t,i){y(!!e,"must specify image data");var o=0|n,s=0|t,f=0|i,l=G();return O(l,r),l.width=0,l.height=0,C(l,e),l.width=l.width||(r.width>>f)-o,l.height=l.height||(r.height>>f)-s,y(r.type===l.type&&r.format===l.format&&r.internalformat===l.internalformat,"incompatible format for texture.subimage"),y(o>=0&&s>=0&&o+l.width<=r.width&&s+l.height<=r.height,"texture.subimage write out of bounds"),y(r.mipmask&1<<f,"missing mipmap data"),y(l.data||l.element||l.needsCopy,"missing image data"),ey(r),k(l,3553,o,s,f),ew(),U(l),a},a.resize=function(e,n){var i=0|e,o=0|n||i;if(i===r.width&&o===r.height)return a;a.width=r.width=i,a.height=r.height=o,ey(r);for(var s=0;r.mipmask>>s;++s){var l=i>>s,u=o>>s;if(!l||!u)break;t.texImage2D(3553,s,r.format,l,u,0,r.format,r.type,null)}return ew(),f.profile&&(r.stats.size=e_(r.internalformat,r.type,i,o,!1,!1)),a},a._reglType="texture2d",a._texture=r,f.profile&&(a.stats=r.stats),a.destroy=function(){r.decRef()},a},createCube:function(e,n,r,a,o,l){var u=new ed(34067);er[u.id]=u,s.cubeCount++;var c=Array(6);function d(e,n,t,r,a,o){var s,l=u.texInfo;for(W.call(l),s=0;s<6;++s)c[s]=j();if("number"!=typeof e&&e){if("object"==typeof e){if(n)K(c[0],e),K(c[1],n),K(c[2],t),K(c[3],r),K(c[4],a),K(c[5],o);else if(q(l,e),F(u,e),"faces"in e){var p=e.faces;for(y(Array.isArray(p)&&6===p.length,"cube faces must be a length 6 array"),s=0;s<6;++s)y("object"==typeof p[s]&&!!p[s],"invalid input for cube map face"),O(c[s],u),K(c[s],p[s])}else for(s=0;s<6;++s)K(c[s],e)}else y.raise("invalid arguments to cube map")}else{var m=0|e||1;for(s=0;s<6;++s)B(c[s],m,m)}for(O(u,c[0]),y.optional(function(){i.npotTextureCube||y(Z(u.width)&&Z(u.height),"your browser does not support non power or two texture dimensions")}),l.genMipmaps?u.mipmask=(c[0].width<<1)-1:u.mipmask=c[0].mipmask,y.textureCube(u,l,c,i),u.internalformat=c[0].internalformat,d.width=c[0].width,d.height=c[0].height,ey(u),s=0;s<6;++s)$(c[s],34069+s);for(Y(l,34067),ew(),f.profile&&(u.stats.size=e_(u.internalformat,u.type,d.width,d.height,l.genMipmaps,!0)),d.format=x[u.internalformat],d.type=_[u.type],d.mag=w[l.magFilter],d.min=S[l.minFilter],d.wrapS=M[l.wrapS],d.wrapT=M[l.wrapT],s=0;s<6;++s)H(c[s]);return d}return d(e,n,r,a,o,l),d.subimage=function(e,n,t,r,i){y(!!n,"must specify image data"),y("number"==typeof e&&e===(0|e)&&e>=0&&e<6,"invalid face");var a=0|t,o=0|r,s=0|i,f=G();return O(f,u),f.width=0,f.height=0,C(f,n),f.width=f.width||(u.width>>s)-a,f.height=f.height||(u.height>>s)-o,y(u.type===f.type&&u.format===f.format&&u.internalformat===f.internalformat,"incompatible format for texture.subimage"),y(a>=0&&o>=0&&a+f.width<=u.width&&o+f.height<=u.height,"texture.subimage write out of bounds"),y(u.mipmask&1<<s,"missing mipmap data"),y(f.data||f.element||f.needsCopy,"missing image data"),ey(u),k(f,34069+e,a,o,s),ew(),U(f),d},d.resize=function(e){var n=0|e;if(n!==u.width){d.width=u.width=n,d.height=u.height=n,ey(u);for(var r=0;r<6;++r)for(var i=0;u.mipmask>>i;++i)t.texImage2D(34069+r,i,u.format,n>>i,n>>i,0,u.format,u.type,null);return ew(),f.profile&&(u.stats.size=e_(u.internalformat,u.type,d.width,d.height,!1,!0)),d}},d._reglType="textureCube",d._texture=u,f.profile&&(d.stats=u.stats),d.destroy=function(){u.decRef()},d},clear:function(){for(var e=0;e<eu;++e)t.activeTexture(33984+e),t.bindTexture(3553,null),ec[e]=null;P(er).forEach(eS),s.cubeCount=0,s.textureCount=0},getTexture:function(e){return null},restore:function(){for(var e=0;e<eu;++e){var n=ec[e];n&&(n.bindCount=0,n.unit=-1,ec[e]=null)}P(er).forEach(function(e){e.texture=t.createTexture(),t.bindTexture(e.target,e.texture);for(var n=0;n<32;++n)if((e.mipmask&1<<n)!=0){if(3553===e.target)t.texImage2D(3553,n,e.internalformat,e.width>>n,e.height>>n,0,e.internalformat,e.type,null);else for(var r=0;r<6;++r)t.texImage2D(34069+r,n,e.internalformat,e.width>>n,e.height>>n,0,e.internalformat,e.type,null)}Y(e.texInfo,e.target)})},refresh:function(){for(var e=0;e<eu;++e){var n=ec[e];n&&(n.bindCount=0,n.unit=-1,ec[e]=null),t.activeTexture(33984+e),t.bindTexture(3553,null),t.bindTexture(34067,null)}}}}(o,d,x,function(){U.procs.poll()},g,c,a),k=ew(o,d,x,c,a),G=function(e,t,r,i,a,o){var s={cur:null,next:null,dirty:!1,setFBO:null},f=["rgba"],l=["rgba4","rgb565","rgb5 a1"];t.ext_srgb&&l.push("srgba"),t.ext_color_buffer_half_float&&l.push("rgba16f","rgb16f"),t.webgl_color_buffer_float&&l.push("rgba32f");var u=["uint8"];function c(e,n,t){this.target=e,this.texture=n,this.renderbuffer=t;var r=0,i=0;n?(r=n.width,i=n.height):t&&(r=t.width,i=t.height),this.width=r,this.height=i}function d(e){e&&(e.texture&&e.texture._texture.decRef(),e.renderbuffer&&e.renderbuffer._renderbuffer.decRef())}function p(e,n,t){if(e){if(e.texture){var r=e.texture._texture,i=Math.max(1,r.width),a=Math.max(1,r.height);y(i===n&&a===t,"inconsistent width/height for supplied texture"),r.refCount+=1}else{var o=e.renderbuffer._renderbuffer;y(o.width===n&&o.height===t,"inconsistent width/height for renderbuffer"),o.refCount+=1}}}function m(n,t){t&&(t.texture?e.framebufferTexture2D(36160,n,t.target,t.texture._texture.texture,0):e.framebufferRenderbuffer(36160,n,36161,t.renderbuffer._renderbuffer.renderbuffer))}function v(e){var n=3553,t=null,r=null,i=e;"object"==typeof e&&(i=e.data,"target"in e&&(n=0|e.target)),y.type(i,"function","invalid attachment data");var a=i._reglType;return"texture2d"===a?(t=i,y(3553===n)):"textureCube"===a?(t=i,y(n>=34069&&n<34075,"invalid cube map target")):"renderbuffer"===a?(r=i,n=36161):y.raise("invalid regl object for attachment"),new c(n,t,r)}function h(e,n,t,r,o){if(t){var s=i.create2D({width:e,height:n,format:r,type:o});return s._texture.refCount=0,new c(3553,s,null)}var f=a.create({width:e,height:n,format:r});return f._renderbuffer.refCount=0,new c(36161,null,f)}function g(e){return e&&(e.texture||e.renderbuffer)}function b(e,n,t){e&&(e.texture?e.texture.resize(n,t):e.renderbuffer&&e.renderbuffer.resize(n,t),e.width=n,e.height=t)}t.oes_texture_half_float&&u.push("half float","float16"),t.oes_texture_float&&u.push("float","float32");var x=0,_={};function w(){this.id=x++,_[this.id]=this,this.framebuffer=e.createFramebuffer(),this.width=0,this.height=0,this.colorAttachments=[],this.depthAttachment=null,this.stencilAttachment=null,this.depthStencilAttachment=null}function S(e){e.colorAttachments.forEach(d),d(e.depthAttachment),d(e.stencilAttachment),d(e.depthStencilAttachment)}function M(n){var t=n.framebuffer;y(t,"must not double destroy framebuffer"),e.deleteFramebuffer(t),n.framebuffer=null,o.framebufferCount--,delete _[n.id]}function A(n){e.bindFramebuffer(36160,n.framebuffer);var t,i=n.colorAttachments;for(t=0;t<i.length;++t)m(36064+t,i[t]);for(t=i.length;t<r.maxColorAttachments;++t)e.framebufferTexture2D(36160,36064+t,3553,null,0);e.framebufferTexture2D(36160,33306,3553,null,0),e.framebufferTexture2D(36160,36096,3553,null,0),e.framebufferTexture2D(36160,36128,3553,null,0),m(36096,n.depthAttachment),m(36128,n.stencilAttachment),m(33306,n.depthStencilAttachment);var a=e.checkFramebufferStatus(36160);e.isContextLost()||36053===a||y.raise("framebuffer configuration not supported, status = "+eO[a]),e.bindFramebuffer(36160,s.next?s.next.framebuffer:null),s.cur=s.next,e.getError()}function T(e,i){var a=new w;function c(e,n){y(s.next!==a,"can not update framebuffer which is currently in use");var i,o=0,d=0,m=!0,b=!0,x=null,_=!0,w="rgba",M="uint8",T=1,O=null,F=null,E=null,D=!1;if("number"==typeof e)o=0|e,d=0|n||o;else if(e){if(y.type(e,"object","invalid arguments for framebuffer"),"shape"in e){var C=e.shape;y(Array.isArray(C)&&C.length>=2,"invalid shape for framebuffer"),o=C[0],d=C[1]}else"radius"in e&&(o=d=e.radius),"width"in e&&(o=e.width),"height"in e&&(d=e.height);("color"in e||"colors"in e)&&Array.isArray(x=e.color||e.colors)&&y(1===x.length||t.webgl_draw_buffers,"multiple render targets not supported"),!x&&("colorCount"in e&&y((T=0|e.colorCount)>0,"invalid color buffer count"),"colorTexture"in e&&(_=!!e.colorTexture,w="rgba4"),"colorType"in e&&(M=e.colorType,_?(y(t.oes_texture_float||!("float"===M||"float32"===M),"you must enable OES_texture_float in order to use floating point framebuffer objects"),y(t.oes_texture_half_float||!("half float"===M||"float16"===M),"you must enable OES_texture_half_float in order to use 16-bit floating point framebuffer objects")):"half float"===M||"float16"===M?(y(t.ext_color_buffer_half_float,"you must enable EXT_color_buffer_half_float to use 16-bit render buffers"),w="rgba16f"):("float"===M||"float32"===M)&&(y(t.webgl_color_buffer_float,"you must enable WEBGL_color_buffer_float in order to use 32-bit floating point renderbuffers"),w="rgba32f"),y.oneOf(M,u,"invalid color type")),"colorFormat"in e&&(w=e.colorFormat,f.indexOf(w)>=0?_=!0:l.indexOf(w)>=0?_=!1:y.optional(function(){_?y.oneOf(e.colorFormat,f,"invalid color format for texture"):y.oneOf(e.colorFormat,l,"invalid color format for renderbuffer")}))),("depthTexture"in e||"depthStencilTexture"in e)&&y(!(D=!!(e.depthTexture||e.depthStencilTexture))||t.webgl_depth_texture,"webgl_depth_texture extension not supported"),"depth"in e&&("boolean"==typeof e.depth?m=e.depth:(O=e.depth,b=!1)),"stencil"in e&&("boolean"==typeof e.stencil?b=e.stencil:(F=e.stencil,m=!1)),"depthStencil"in e&&("boolean"==typeof e.depthStencil?m=b=e.depthStencil:(E=e.depthStencil,m=!1,b=!1))}else o=d=1;var k=null,R=null,L=null,z=null;if(Array.isArray(x))k=x.map(v);else if(x)k=[v(x)];else for(i=0,k=Array(T);i<T;++i)k[i]=h(o,d,_,w,M);y(t.webgl_draw_buffers||k.length<=1,"you must enable the WEBGL_draw_buffers extension in order to use multiple color buffers."),y(k.length<=r.maxColorAttachments,"too many color attachments, not supported"),o=o||k[0].width,d=d||k[0].height,O?R=v(O):m&&!b&&(R=h(o,d,D,"depth","uint32")),F?L=v(F):b&&!m&&(L=h(o,d,!1,"stencil","uint8")),E?z=v(E):!O&&!F&&b&&m&&(z=h(o,d,D,"depth stencil","depth stencil")),y(!!O+!!F+!!E<=1,"invalid framebuffer configuration, can specify exactly one depth/stencil attachment");var P=null;for(i=0;i<k.length;++i)if(p(k[i],o,d),y(!k[i]||k[i].texture&&eS.indexOf(k[i].texture._texture.format)>=0||k[i].renderbuffer&&eT.indexOf(k[i].renderbuffer._renderbuffer.format)>=0,"framebuffer color attachment "+i+" is invalid"),k[i]&&k[i].texture){var N=eM[k[i].texture._texture.format]*eA[k[i].texture._texture.type];null===P?P=N:y(P===N,"all color attachments much have the same number of bits per pixel.")}return p(R,o,d),y(!R||R.texture&&6402===R.texture._texture.format||R.renderbuffer&&33189===R.renderbuffer._renderbuffer.format,"invalid depth attachment for framebuffer object"),p(L,o,d),y(!L||L.renderbuffer&&36168===L.renderbuffer._renderbuffer.format,"invalid stencil attachment for framebuffer object"),p(z,o,d),y(!z||z.texture&&34041===z.texture._texture.format||z.renderbuffer&&34041===z.renderbuffer._renderbuffer.format,"invalid depth-stencil attachment for framebuffer object"),S(a),a.width=o,a.height=d,a.colorAttachments=k,a.depthAttachment=R,a.stencilAttachment=L,a.depthStencilAttachment=z,c.color=k.map(g),c.depth=g(R),c.stencil=g(L),c.depthStencil=g(z),c.width=a.width,c.height=a.height,A(a),c}return o.framebufferCount++,c(e,i),n(c,{resize:function(e,n){y(s.next!==a,"can not resize a framebuffer which is currently in use");var t=Math.max(0|e,1),r=Math.max(0|n||t,1);if(t===a.width&&r===a.height)return c;for(var i=a.colorAttachments,o=0;o<i.length;++o)b(i[o],t,r);return b(a.depthAttachment,t,r),b(a.stencilAttachment,t,r),b(a.depthStencilAttachment,t,r),a.width=c.width=t,a.height=c.height=r,A(a),c},_reglType:"framebuffer",_framebuffer:a,destroy:function(){M(a),S(a)},use:function(e){s.setFBO({framebuffer:c},e)}})}return n(s,{getFramebuffer:function(e){if("function"==typeof e&&"framebuffer"===e._reglType){var n=e._framebuffer;if(n instanceof w)return n}return null},create:T,createCube:function(e){var a=Array(6);function o(e){y(0>a.indexOf(s.next),"can not update framebuffer which is currently in use");var r,l,c={color:null},d=0,p=null,m="rgba",v="uint8",h=1;if("number"==typeof e)d=0|e;else if(e){if(y.type(e,"object","invalid arguments for framebuffer"),"shape"in e){var g=e.shape;y(Array.isArray(g)&&g.length>=2,"invalid shape for framebuffer"),y(g[0]===g[1],"cube framebuffer must be square"),d=g[0]}else"radius"in e&&(d=0|e.radius),"width"in e?(d=0|e.width,"height"in e&&y(e.height===d,"must be square")):"height"in e&&(d=0|e.height);("color"in e||"colors"in e)&&Array.isArray(p=e.color||e.colors)&&y(1===p.length||t.webgl_draw_buffers,"multiple render targets not supported"),!p&&("colorCount"in e&&y((h=0|e.colorCount)>0,"invalid color buffer count"),"colorType"in e&&(y.oneOf(e.colorType,u,"invalid color type"),v=e.colorType),"colorFormat"in e&&(m=e.colorFormat,y.oneOf(e.colorFormat,f,"invalid color format for texture"))),"depth"in e&&(c.depth=e.depth),"stencil"in e&&(c.stencil=e.stencil),"depthStencil"in e&&(c.depthStencil=e.depthStencil)}else d=1;if(p){if(Array.isArray(p))for(r=0,l=[];r<p.length;++r)l[r]=p[r];else l=[p]}else{l=Array(h);var b={radius:d,format:m,type:v};for(r=0;r<h;++r)l[r]=i.createCube(b)}for(r=0,c.color=Array(l.length);r<l.length;++r){var x=l[r];y("function"==typeof x&&"textureCube"===x._reglType,"invalid cube map"),d=d||x.width,y(x.width===d&&x.height===d,"invalid cube map shape"),c.color[r]={target:34069,data:l[r]}}for(r=0;r<6;++r){for(var _=0;_<l.length;++_)c.color[_].target=34069+r;r>0&&(c.depth=a[0].depth,c.stencil=a[0].stencil,c.depthStencil=a[0].depthStencil),a[r]?a[r](c):a[r]=T(c)}return n(o,{width:d,height:d,color:l})}return o(e),n(o,{faces:a,resize:function(e){var n,t=0|e;if(y(t>0&&t<=r.maxCubeMapSize,"invalid radius for cube fbo"),t===o.width)return o;var i=o.color;for(n=0;n<i.length;++n)i[n].resize(t);for(n=0;n<6;++n)a[n].resize(t);return o.width=o.height=t,o},_reglType:"framebufferCube",destroy:function(){a.forEach(function(e){e.destroy()})}})},clear:function(){P(_).forEach(M)},restore:function(){s.cur=null,s.next=null,s.dirty=!0,P(_).forEach(function(n){n.framebuffer=e.createFramebuffer(),A(n)})}})}(o,d,x,C,k,c),U=function(e,t,r,i,a,o,s,f,l,u,c,d,p,m,v){var h=u.Record,g={add:32774,subtract:32778,"reverse subtract":32779};r.ext_blend_minmax&&(g.min=32775,g.max=32776);var b=r.angle_instanced_arrays,x=r.webgl_draw_buffers,_=r.oes_vertex_array_object,w={dirty:!0,profile:v.profile},S={},M=[],T={},O={};function F(e){return e.replace(".","_")}function E(e,n,t){var r=F(e);M.push(e),S[r]=w[r]=!!t,T[r]=n}function C(e,n,t){var r=F(e);M.push(e),Array.isArray(t)?(w[r]=t.slice(),S[r]=t.slice()):w[r]=S[r]=t,O[r]=n}E(eR,3024),E(eL,3042),C(ez,"blendColor",[0,0,0,0]),C(eP,"blendEquationSeparate",[32774,32774]),C(eN,"blendFuncSeparate",[1,0,1,0]),E(eG,2929,!0),C(eU,"depthFunc",513),C(eI,"depthRange",[0,1]),C(eB,"depthMask",!0),C(eK,eK,[!0,!0,!0,!0]),E(e$,2884),C(eV,"cullFace",1029),C(ej,ej,2305),C(eH,eH,1),E(eW,32823),C(eq,"polygonOffset",[0,0]),E(eY,32926),E(eQ,32928),C(eX,"sampleCoverage",[1,!1]),E(eJ,2960),C(eZ,"stencilMask",-1),C(e0,"stencilFunc",[519,0,-1]),C(e1,"stencilOpSeparate",[1028,7680,7680,7680]),C(e2,"stencilOpSeparate",[1029,7680,7680,7680]),E(e3,3089),C(e4,"scissor",[0,0,e.drawingBufferWidth,e.drawingBufferHeight]),C(e5,e5,[0,0,e.drawingBufferWidth,e.drawingBufferHeight]);var k={gl:e,context:p,strings:t,next:S,current:w,draw:d,elements:o,buffer:a,shader:c,attributes:u.state,vao:u,uniforms:l,framebuffer:f,extensions:r,timer:m,isBufferArgs:ny},R={primTypes:q,compareFuncs:ng,blendFuncs:nv,blendEquations:g,stencilOps:nb,glTypes:I,orientationType:n_};y.optional(function(){k.isArrayLike=J}),x&&(R.backBuffer=[1029],R.drawBuffer=D(i.maxDrawbuffers,function(e){return 0===e?[0]:D(e,function(e){return 36064+e})}));var L=0;function z(){var e=function(){var e=0,t=[],r=[];function i(){var t=[],r=[];return n(function(){t.push.apply(t,eD(arguments))},{def:function(){var n="v"+e++;return r.push(n),arguments.length>0&&(t.push(n,"="),t.push.apply(t,eD(arguments)),t.push(";")),n},toString:function(){return eC([r.length>0?"var "+r.join(",")+";":"",eC(t)])}})}function a(){var e=i(),t=i(),r=e.toString,a=t.toString;function o(n,r){t(n,r,"=",e.def(n,r),";")}return n(function(){e.apply(e,eD(arguments))},{def:e.def,entry:e,exit:t,save:o,set:function(n,t,r){o(n,t),e(n,t,"=",r,";")},toString:function(){return r()+a()}})}var o=i(),s={};return{global:o,link:function(n){for(var i=0;i<r.length;++i)if(r[i]===n)return t[i];var a="g"+e++;return t.push(a),r.push(n),a},block:i,proc:function(e,t){var r=[];function i(){var e="a"+r.length;return r.push(e),e}t=t||0;for(var o=0;o<t;++o)i();var f=a(),l=f.toString;return s[e]=n(f,{arg:i,toString:function(){return eC(["function(",r.join(),"){",l(),"}"])}})},scope:a,cond:function(){var e=eC(arguments),t=a(),r=a(),i=t.toString,o=r.toString;return n(t,{then:function(){return t.apply(t,eD(arguments)),this},else:function(){return r.apply(r,eD(arguments)),this},toString:function(){var n=o();return n&&(n="else{"+n+"}"),eC(["if(",e,"){",i(),"}",n])}})},compile:function(){var e=['"use strict";',o,"return {"];Object.keys(s).forEach(function(n){e.push('"',n,'":',s[n].toString(),",")}),e.push("}");var n=eC(e).replace(/;/g,";\n").replace(/}/g,"}\n").replace(/{/g,"{\n");return Function.apply(null,t.concat(n)).apply(null,r)}}}(),r=e.link,i=e.global;e.id=L++,e.batchId="0";var a=r(k),o=e.shared={props:"a0"};Object.keys(k).forEach(function(e){o[e]=i.def(a,".",e)}),y.optional(function(){e.CHECK=r(y),e.commandStr=y.guessCommand(),e.command=r(e.commandStr),e.assert=function(e,n,t){e("if(!(",n,"))",this.CHECK,".commandRaise(",r(t),",",this.command,");")},R.invalidBlendCombinations=nh});var s=e.next={},f=e.current={};Object.keys(O).forEach(function(e){Array.isArray(w[e])&&(s[e]=i.def(o.next,".",e),f[e]=i.def(o.current,".",e))});var l=e.constants={};Object.keys(R).forEach(function(e){l[e]=i.def(JSON.stringify(R[e]))}),e.invoke=function(n,t){switch(t.type){case 0:var i=["this",o.context,o.props,e.batchId];return n.def(r(t.data),".call(",i.slice(0,Math.max(t.data.length+1,4)),")");case 1:return n.def(o.props,t.data);case 2:return n.def(o.context,t.data);case 3:return n.def("this",t.data);case 4:return t.data.append(e,n),t.data.ref;case 5:return t.data.toString();case 6:return t.data.map(function(t){return e.invoke(n,t)})}},e.attribCache={};var c={};return e.scopeAttrib=function(e){var n=t.id(e);if(n in c)return c[n];var i=u.scope[n];return i||(i=u.scope[n]=new h),c[n]=r(i)},e}function P(e,n,t){var r=e.shared.context,i=e.scope();Object.keys(t).forEach(function(a){n.save(r,"."+a);var o=t[a].append(e,n);Array.isArray(o)?i(r,".",a,"=[",o.join(),"];"):i(r,".",a,"=",o,";")}),n(i)}function N(e,n,t,r){var i,a,o=e.shared,s=o.gl,f=o.framebuffer;x&&(i=n.def(o.extensions,".webgl_draw_buffers"));var l=e.constants,u=l.drawBuffer,c=l.backBuffer;a=t?t.append(e,n):n.def(f,".next"),r||n("if(",a,"!==",f,".cur){"),n("if(",a,"){",s,".bindFramebuffer(",36160,",",a,".framebuffer);"),x&&n(i,".drawBuffersWEBGL(",u,"[",a,".colorAttachments.length]);"),n("}else{",s,".bindFramebuffer(",36160,",null);"),x&&n(i,".drawBuffersWEBGL(",c,");"),n("}",f,".cur=",a,";"),r||n("}")}function G(e,n,t){var r=e.shared,i=r.gl,a=e.current,o=e.next,s=r.current,f=r.next,l=e.cond(s,".dirty");M.forEach(function(n){var r,u,c=F(n);if(!(c in t.state)){if(c in o){r=o[c],u=a[c];var d=D(w[c].length,function(e){return l.def(r,"[",e,"]")});l(e.cond(d.map(function(e,n){return e+"!=="+u+"["+n+"]"}).join("||")).then(i,".",O[c],"(",d,");",d.map(function(e,n){return u+"["+n+"]="+e}).join(";"),";"))}else{r=l.def(f,".",c);var p=e.cond(r,"!==",s,".",c);l(p),c in T?p(e.cond(r).then(i,".enable(",T[c],");").else(i,".disable(",T[c],");"),s,".",c,"=",r,";"):p(i,".",O[c],"(",r,");",s,".",c,"=",r,";")}}}),0===Object.keys(t.state).length&&l(s,".dirty=false;"),n(l)}function U(e,n,t,r){var i=e.shared,a=e.current,o=i.current,s=i.gl;nw(Object.keys(t)).forEach(function(i){var f=t[i];if(!r||r(f)){var l=f.append(e,n);if(T[i]){var u=T[i];nM(f)?l?n(s,".enable(",u,");"):n(s,".disable(",u,");"):n(e.cond(l).then(s,".enable(",u,");").else(s,".disable(",u,");")),n(o,".",i,"=",l,";")}else if(J(l)){var c=a[i];n(s,".",O[i],"(",l,");",l.map(function(e,n){return c+"["+n+"]="+e}).join(";"),";")}else n(s,".",O[i],"(",l,");",o,".",i,"=",l,";")}})}function B(e,n){b&&(e.instancing=n.def(e.shared.extensions,".angle_instanced_arrays"))}function K(e,n,t,r,i){var a,o,s,f=e.shared,l=e.stats,u=f.current,c=f.timer,d=t.profile;function p(){return"undefined"==typeof performance?"Date.now()":"performance.now()"}function v(e){e(a=n.def(),"=",p(),";"),"string"==typeof i?e(l,".count+=",i,";"):e(l,".count++;"),m&&(r?e(o=n.def(),"=",c,".getNumPendingQueries();"):e(c,".beginQuery(",l,");"))}function h(e){e(l,".cpuTime+=",p(),"-",a,";"),m&&(r?e(c,".pushScopeStats(",o,",",c,".getNumPendingQueries(),",l,");"):e(c,".endQuery();"))}function g(e){var t=n.def(u,".profile");n(u,".profile=",e,";"),n.exit(u,".profile=",t,";")}if(d){if(nM(d)){d.enable?(v(n),h(n.exit),g("true")):g("false");return}g(s=d.append(e,n))}else s=n.def(u,".profile");var b=e.block();v(b),n("if(",s,"){",b,"}");var x=e.block();h(x),n.exit("if(",s,"){",x,"}")}function $(e,n,t,r,i){var a=e.shared;r.forEach(function(r){var o,s=r.name,f=t.attributes[s];if(f){if(!i(f))return;o=f.append(e,n)}else{if(!i(nO))return;var l=e.scopeAttrib(s);y.optional(function(){e.assert(n,l+".state","missing attribute "+s)}),o={},Object.keys(new h).forEach(function(e){o[e]=n.def(l,".",e)})}!function(t,r,i){var o=a.gl,s=n.def(t,".location"),f=n.def(a.attributes,"[",s,"]"),l=i.state,u=i.buffer,c=[i.x,i.y,i.z,i.w],d=["buffer","normalized","offset","stride"];function p(){n("if(!",f,".buffer){",o,".enableVertexAttribArray(",s,");}");var t,a=i.type;if(t=i.size?n.def(i.size,"||",r):r,n("if(",f,".type!==",a,"||",f,".size!==",t,"||",d.map(function(e){return f+"."+e+"!=="+i[e]}).join("||"),"){",o,".bindBuffer(",34962,",",u,".buffer);",o,".vertexAttribPointer(",[s,t,a,i.normalized,i.stride,i.offset],");",f,".type=",a,";",f,".size=",t,";",d.map(function(e){return f+"."+e+"="+i[e]+";"}).join(""),"}"),b){var l=i.divisor;n("if(",f,".divisor!==",l,"){",e.instancing,".vertexAttribDivisorANGLE(",[s,l],");",f,".divisor=",l,";}")}}function m(){n("if(",f,".buffer){",o,".disableVertexAttribArray(",s,");",f,".buffer=null;","}if(",ek.map(function(e,n){return f+"."+e+"!=="+c[n]}).join("||"),"){",o,".vertexAttrib4f(",s,",",c,");",ek.map(function(e,n){return f+"."+e+"="+c[n]+";"}).join(""),"}")}1===l?p():2===l?m():(n("if(",l,"===",1,"){"),p(),n("}else{"),m(),n("}"))}(e.link(r),function(e){switch(e){case 35664:case 35667:case 35671:return 2;case 35665:case 35668:case 35672:return 3;case 35666:case 35669:case 35673:return 4;default:return 1}}(r.info.type),o)})}function V(e,n,r,i,a,o){for(var s=e.shared,f=s.gl,l={},u=0;u<i.length;++u){var c,d,p=i[u],m=p.name,v=p.info.type,h=p.info.size,g=r.uniforms[m];if(h>1){if(!g)continue;var b=m.replace("[0]","");if(l[b])continue;l[b]=1}var x=e.link(p)+".location";if(g){if(!a(g))continue;if(nM(g)){var _=g.value;if(y.command(null!=_,'missing uniform "'+m+'"',e.commandStr),35678===v||35680===v){y.command("function"==typeof _&&(35678===v&&("texture2d"===_._reglType||"framebuffer"===_._reglType)||35680===v&&("textureCube"===_._reglType||"framebufferCube"===_._reglType)),"invalid texture for uniform "+m,e.commandStr);var w=e.link(_._texture||_.color[0]._texture);n(f,".uniform1i(",x,",",w+".bind());"),n.exit(w,".unbind();")}else if(35674===v||35675===v||35676===v){y.optional(function(){y.command(J(_),"invalid matrix for uniform "+m,e.commandStr),y.command(35674===v&&4===_.length||35675===v&&9===_.length||35676===v&&16===_.length,"invalid length for matrix uniform "+m,e.commandStr)});var S=e.global.def("new Float32Array(["+Array.prototype.slice.call(_)+"])"),M=2;35675===v?M=3:35676===v&&(M=4),n(f,".uniformMatrix",M,"fv(",x,",false,",S,");")}else{switch(v){case 5126:1===h?y.commandType(_,"number","uniform "+m,e.commandStr):y.command(J(_)&&_.length===h,"uniform "+m,e.commandStr),c="1f";break;case 35664:y.command(J(_)&&_.length&&_.length%2==0&&_.length<=2*h,"uniform "+m,e.commandStr),c="2f";break;case 35665:y.command(J(_)&&_.length&&_.length%3==0&&_.length<=3*h,"uniform "+m,e.commandStr),c="3f";break;case 35666:y.command(J(_)&&_.length&&_.length%4==0&&_.length<=4*h,"uniform "+m,e.commandStr),c="4f";break;case 35670:1===h?y.commandType(_,"boolean","uniform "+m,e.commandStr):y.command(J(_)&&_.length===h,"uniform "+m,e.commandStr),c="1i";break;case 5124:1===h?y.commandType(_,"number","uniform "+m,e.commandStr):y.command(J(_)&&_.length===h,"uniform "+m,e.commandStr),c="1i";break;case 35671:case 35667:y.command(J(_)&&_.length&&_.length%2==0&&_.length<=2*h,"uniform "+m,e.commandStr),c="2i";break;case 35672:case 35668:y.command(J(_)&&_.length&&_.length%3==0&&_.length<=3*h,"uniform "+m,e.commandStr),c="3i";break;case 35673:case 35669:y.command(J(_)&&_.length&&_.length%4==0&&_.length<=4*h,"uniform "+m,e.commandStr),c="4i"}h>1?(c+="v",_=e.global.def("["+Array.prototype.slice.call(_)+"]")):_=J(_)?Array.prototype.slice.call(_):_,n(f,".uniform",c,"(",x,",",_,");")}continue}d=g.append(e,n)}else{if(!a(nO))continue;d=n.def(s.uniforms,"[",t.id(m),"]")}35678===v?(y(!Array.isArray(d),"must specify a scalar prop for textures"),n("if(",d,"&&",d,'._reglType==="framebuffer"){',d,"=",d,".color[0];","}")):35680===v&&(y(!Array.isArray(d),"must specify a scalar prop for cube maps"),n("if(",d,"&&",d,'._reglType==="framebufferCube"){',d,"=",d,".color[0];","}")),y.optional(function(){function t(t,r){e.assert(n,t,'bad data or missing for uniform "'+m+'".  '+r)}function r(e,n){1===n&&y(!Array.isArray(d),"must not specify an array type for uniform"),t("Array.isArray("+d+") && typeof "+d+'[0]===" '+e+'" || typeof '+d+'==="'+e+'"',"invalid type, expected "+e)}function i(n,r,i){Array.isArray(d)?y(d.length&&d.length%n==0&&d.length<=n*i,"must have length of "+(1===i?"":"n * ")+n):t(s.isArrayLike+"("+d+")&&"+d+".length && "+d+".length % "+n+" === 0 && "+d+".length<="+n*i,"invalid vector, should have length of "+(1===i?"":"n * ")+n,e.commandStr)}function a(n){y(!Array.isArray(d),"must not specify a value type"),t("typeof "+d+'==="function"&&'+d+'._reglType==="texture'+(3553===n?"2d":"Cube")+'"',"invalid texture type",e.commandStr)}switch(v){case 5124:case 5126:r("number",h);break;case 35667:case 35664:i(2,"number",h);break;case 35668:case 35665:i(3,"number",h);break;case 35669:case 35666:case 35674:i(4,"number",h);break;case 35670:r("boolean",h);break;case 35671:i(2,"boolean",h);break;case 35672:i(3,"boolean",h);break;case 35673:i(4,"boolean",h);break;case 35675:i(9,"number",h);break;case 35676:i(16,"number",h);break;case 35678:a(3553);break;case 35680:a(34067)}});var A=1;switch(v){case 35678:case 35680:var T=n.def(d,"._texture");n(f,".uniform1i(",x,",",T,".bind());"),n.exit(T,".unbind();");continue;case 5124:case 35670:c="1i";break;case 35667:case 35671:c="2i",A=2;break;case 35668:case 35672:c="3i",A=3;break;case 35669:case 35673:c="4i",A=4;break;case 5126:c="1f";break;case 35664:c="2f",A=2;break;case 35665:c="3f",A=3;break;case 35666:c="4f",A=4;break;case 35674:c="Matrix2fv";break;case 35675:c="Matrix3fv";break;case 35676:c="Matrix4fv"}if(-1===c.indexOf("Matrix")&&h>1&&(c+="v",A=1),"M"===c.charAt(0)){n(f,".uniform",c,"(",x,",");var O=Math.pow(v-35674+2,2),F=e.global.def("new Float32Array(",O,")");Array.isArray(d)?n("false,(",D(O,function(e){return F+"["+e+"]="+d[e]}),",",F,")"):n("false,(Array.isArray(",d,")||",d," instanceof Float32Array)?",d,":(",D(O,function(e){return F+"["+e+"]="+d+"["+e+"]"}),",",F,")"),n(");")}else if(A>1){for(var E=[],C=[],k=0;k<A;++k)Array.isArray(d)?C.push(d[k]):C.push(n.def(d+"["+k+"]")),o&&E.push(n.def());o&&n("if(!",e.batchId,"||",E.map(function(e,n){return e+"!=="+C[n]}).join("||"),"){",E.map(function(e,n){return e+"="+C[n]+";"}).join("")),n(f,".uniform",c,"(",x,",",C.join(","),");"),o&&n("}")}else{if(y(!Array.isArray(d),"uniform value must not be an array"),o){var R=n.def();n("if(!",e.batchId,"||",R,"!==",d,"){",R,"=",d,";")}n(f,".uniform",c,"(",x,",",d,");"),o&&n("}")}}}function j(e,n,t,r){var i,a,o,s,f,l,u,c,d=e.shared,p=d.gl,m=d.draw,v=r.draw,h=(a=v.elements,o=n,a?((a.contextDep&&r.contextDynamic||a.propDep)&&(o=t),i=a.append(e,o),v.elementsActive&&o("if("+i+")"+p+".bindBuffer(34963,"+i+".buffer.buffer);")):(i=o.def(),o(i,"=",m,".",ne,";","if(",i,"){",p,".bindBuffer(",34963,",",i,".buffer.buffer);}","else if(",d.vao,".currentVAO){",i,"=",e.shared.elements+".getElements("+d.vao,".currentVAO.elements);",_?"":"if("+i+")"+p+".bindBuffer(34963,"+i+".buffer.buffer);","}")),i);function g(i){var a=v[i];return a?a.contextDep&&r.contextDynamic||a.propDep?a.append(e,t):a.append(e,n):n.def(m,".",i)}var x=g(nn),w=g(nr),S=(f=v.count,l=n,f?((f.contextDep&&r.contextDynamic||f.propDep)&&(l=t),s=f.append(e,l),y.optional(function(){f.MISSING&&e.assert(n,"false","missing vertex count"),f.DYNAMIC&&e.assert(l,s+">=0","missing vertex count")})):(s=l.def(m,".",nt),y.optional(function(){e.assert(l,s+">=0","missing vertex count")})),s);if("number"==typeof S){if(0===S)return}else t("if(",S,"){"),t.exit("}");b&&(u=g(ni),c=e.instancing);var M=h+".type",A=v.elements&&nM(v.elements)&&!v.vaoActive;function T(){function e(){t(c,".drawElementsInstancedANGLE(",[x,S,M,w+"<<(("+M+"-5121)>>1)",u],");")}function n(){t(c,".drawArraysInstancedANGLE(",[x,w,S,u],");")}h&&"null"!==h?A?e():(t("if(",h,"){"),e(),t("}else{"),n(),t("}")):n()}function O(){function e(){t(p+".drawElements("+[x,S,M,w+"<<(("+M+"-5121)>>1)"]+");")}function n(){t(p+".drawArrays("+[x,w,S]+");")}h&&"null"!==h?A?e():(t("if(",h,"){"),e(),t("}else{"),n(),t("}")):n()}b&&("number"!=typeof u||u>=0)?"string"==typeof u?(t("if(",u,">0){"),T(),t("}else if(",u,"<0){"),O(),t("}")):T():O()}function H(e,n,t,r,i){var a=z(),o=a.proc("body",i);return y.optional(function(){a.commandStr=n.commandStr,a.command=a.link(n.commandStr)}),b&&(a.instancing=o.def(a.shared.extensions,".angle_instanced_arrays")),e(a,o,t,r),a.compile().body}function W(e,n,t,r){B(e,n),t.useVAO?t.drawVAO?n(e.shared.vao,".setVAO(",t.drawVAO.append(e,n),");"):n(e.shared.vao,".setVAO(",e.shared.vao,".targetVAO);"):(n(e.shared.vao,".setVAO(null);"),$(e,n,t,r.attributes,function(){return!0})),V(e,n,t,r.uniforms,function(){return!0},!1),j(e,n,n,t)}function Y(e,n,t,r){function i(){return!0}e.batchId="a1",B(e,n),$(e,n,t,r.attributes,i),V(e,n,t,r.uniforms,i,!1),j(e,n,n,t)}function Q(e,n,t,r){B(e,n);var i=t.contextDep,a=n.def(),o=n.def();e.shared.props=o,e.batchId=a;var s=e.scope(),f=e.scope();function l(e){return e.contextDep&&i||e.propDep}function u(e){return!l(e)}if(n(s.entry,"for(",a,"=0;",a,"<","a1",";++",a,"){",o,"=","a0","[",a,"];",f,"}",s.exit),t.needsContext&&P(e,f,t.context),t.needsFramebuffer&&N(e,f,t.framebuffer),U(e,f,t.state,l),t.profile&&l(t.profile)&&K(e,f,t,!1,!0),r)t.useVAO?t.drawVAO?l(t.drawVAO)?f(e.shared.vao,".setVAO(",t.drawVAO.append(e,f),");"):s(e.shared.vao,".setVAO(",t.drawVAO.append(e,s),");"):s(e.shared.vao,".setVAO(",e.shared.vao,".targetVAO);"):(s(e.shared.vao,".setVAO(null);"),$(e,s,t,r.attributes,u),$(e,f,t,r.attributes,l)),V(e,s,t,r.uniforms,u,!1),V(e,f,t,r.uniforms,l,!0),j(e,s,f,t);else{var c=e.global.def("{}"),d=t.shader.progVar.append(e,f),p=f.def(d,".id"),m=f.def(c,"[",p,"]");f(e.shared.gl,".useProgram(",d,".program);","if(!",m,"){",m,"=",c,"[",p,"]=",e.link(function(n){return H(Y,e,t,n,2)}),"(",d,");}",m,".call(this,a0[",a,"],",a,");")}}function X(e,n,t){var r=n.static[t];if(r&&function(e){if(!("object"!=typeof e||J(e))){for(var n=Object.keys(e),t=0;t<n.length;++t)if(A.isDynamic(e[n[t]]))return!0;return!1}}(r)){var i=e.global,a=Object.keys(r),o=!1,s=!1,f=!1,l=e.global.def("{}");a.forEach(function(n){var t=r[n];if(A.isDynamic(t)){"function"==typeof t&&(t=r[n]=A.unbox(t));var a=nT(t,null);o=o||a.thisDep,f=f||a.propDep,s=s||a.contextDep}else{switch(i(l,".",n,"="),typeof t){case"number":i(t);break;case"string":i('"',t,'"');break;case"object":Array.isArray(t)&&i("[",t.join(),"]");break;default:i(e.link(t))}i(";")}}),n.dynamic[t]=new A.DynamicVariable(4,{thisDep:o,contextDep:s,propDep:f,ref:l,append:function(e,n){a.forEach(function(t){var i=r[t];if(A.isDynamic(i)){var a=e.invoke(n,i);n(l,".",t,"=",a,";")}})}}),delete n.static[t]}}return{next:S,current:w,procs:function(){var e,n=z(),t=n.proc("poll"),a=n.proc("refresh"),o=n.block();t(o),a(o);var s=n.shared,f=s.gl,l=s.next,u=s.current;o(u,".dirty=false;"),N(n,t),N(n,a,null,!0),b&&(e=n.link(b)),r.oes_vertex_array_object&&a(n.link(r.oes_vertex_array_object),".bindVertexArrayOES(null);");for(var c=0;c<i.maxAttributes;++c){var d=a.def(s.attributes,"[",c,"]"),p=n.cond(d,".buffer");p.then(f,".enableVertexAttribArray(",c,");",f,".bindBuffer(",34962,",",d,".buffer.buffer);",f,".vertexAttribPointer(",c,",",d,".size,",d,".type,",d,".normalized,",d,".stride,",d,".offset);").else(f,".disableVertexAttribArray(",c,");",f,".vertexAttrib4f(",c,",",d,".x,",d,".y,",d,".z,",d,".w);",d,".buffer=null;"),a(p),b&&a(e,".vertexAttribDivisorANGLE(",c,",",d,".divisor);")}return a(n.shared.vao,".currentVAO=null;",n.shared.vao,".setVAO(",n.shared.vao,".targetVAO);"),Object.keys(T).forEach(function(e){var r=T[e],i=o.def(l,".",e),s=n.block();s("if(",i,"){",f,".enable(",r,")}else{",f,".disable(",r,")}",u,".",e,"=",i,";"),a(s),t("if(",i,"!==",u,".",e,"){",s,"}")}),Object.keys(O).forEach(function(e){var r,i,s=O[e],c=w[e],d=n.block();if(d(f,".",s,"("),J(c)){var p=c.length;r=n.global.def(l,".",e),i=n.global.def(u,".",e),d(D(p,function(e){return r+"["+e+"]"}),");",D(p,function(e){return i+"["+e+"]="+r+"["+e+"];"}).join("")),t("if(",D(p,function(e){return r+"["+e+"]!=="+i+"["+e+"]"}).join("||"),"){",d,"}")}else r=o.def(l,".",e),i=o.def(u,".",e),d(r,");",u,".",e,"=",r,";"),t("if(",r,"!==",i,"){",d,"}");a(d)}),n.compile()}(),compile:function(e,s,l,d,p){var m=z();m.stats=m.link(p),Object.keys(s.static).forEach(function(e){X(m,s,e)}),nm.forEach(function(n){X(m,e,n)});var v=function(e,n,s,l,d){var p,m,v,x,_,w,S,A,T,O,E,C,k=e.static,R=e.dynamic;y.optional(function(){var e=[e8,e9,e7,ne,nn,nr,nt,ni,e6,"vao"].concat(M);function n(n){Object.keys(n).forEach(function(n){y.command(e.indexOf(n)>=0,'unknown parameter "'+n+'"',d.commandStr)})}n(k),n(R)});var L=function(e,n){var t=e.static;if("string"==typeof t[e7]&&"string"==typeof t[e9]){if(Object.keys(n.dynamic).length>0)return null;var r=n.static,i=Object.keys(r);if(i.length>0&&"number"==typeof r[i[0]]){for(var a=[],o=0;o<i.length;++o)y("number"==typeof r[i[o]],"must specify all vertex attribute locations when using vaos"),a.push([0|r[i[o]],i[o]]);return a}}return null}(e,n),z=function(e,n){var t=e.static,r=e.dynamic;if(e8 in t){var i=t[e8];return i?(i=f.getFramebuffer(i),y.command(i,"invalid framebuffer object"),nA(function(e,n){var t=e.link(i),r=e.shared;n.set(r.framebuffer,".next",t);var a=r.context;return n.set(a,"."+ns,t+".width"),n.set(a,"."+nf,t+".height"),t})):nA(function(e,n){var t=e.shared;n.set(t.framebuffer,".next","null");var r=t.context;return n.set(r,"."+ns,r+"."+nd),n.set(r,"."+nf,r+"."+np),"null"})}if(!(e8 in r))return null;var a=r[e8];return nT(a,function(e,n){var t=e.invoke(n,a),r=e.shared,i=r.framebuffer,o=n.def(i,".getFramebuffer(",t,")");y.optional(function(){e.assert(n,"!"+t+"||"+o,"invalid framebuffer object")}),n.set(i,".next",o);var s=r.context;return n.set(s,"."+ns,o+"?"+o+".width:"+s+"."+nd),n.set(s,"."+nf,o+"?"+o+".height:"+s+"."+np),o})}(e,0),P=function(e,n,t){var r=e.static,i=e.dynamic;function a(e){if(e in r){var a,o,s=r[e];y.commandType(s,"object","invalid "+e,t.commandStr);var f=!0,l=0|s.x,u=0|s.y;return"width"in s?(a=0|s.width,y.command(a>=0,"invalid "+e,t.commandStr)):f=!1,"height"in s?(o=0|s.height,y.command(o>=0,"invalid "+e,t.commandStr)):f=!1,new nS(!f&&n&&n.thisDep,!f&&n&&n.contextDep,!f&&n&&n.propDep,function(e,n){var t=e.shared.context,r=a;"width"in s||(r=n.def(t,".",ns,"-",l));var i=o;return"height"in s||(i=n.def(t,".",nf,"-",u)),[l,u,r,i]})}if(e in i){var c=i[e],d=nT(c,function(n,t){var r=n.invoke(t,c);y.optional(function(){n.assert(t,r+"&&typeof "+r+'==="object"',"invalid "+e)});var i=n.shared.context,a=t.def(r,".x|0"),o=t.def(r,".y|0"),s=t.def('"width" in ',r,"?",r,".width|0:","(",i,".",ns,"-",a,")"),f=t.def('"height" in ',r,"?",r,".height|0:","(",i,".",nf,"-",o,")");return y.optional(function(){n.assert(t,s+">=0&&"+f+">=0","invalid "+e)}),[a,o,s,f]});return n&&(d.thisDep=d.thisDep||n.thisDep,d.contextDep=d.contextDep||n.contextDep,d.propDep=d.propDep||n.propDep),d}return n?new nS(n.thisDep,n.contextDep,n.propDep,function(e,n){var t=e.shared.context;return[0,0,n.def(t,".",ns),n.def(t,".",nf)]}):null}var o=a(e5);if(o){var s=o;o=new nS(o.thisDep,o.contextDep,o.propDep,function(e,n){var t=s.append(e,n),r=e.shared.context;return n.set(r,"."+nl,t[2]),n.set(r,"."+nu,t[3]),t})}return{viewport:o,scissor_box:a(e4)}}(e,z,d),N=function(e,n){var t=e.static,r=e.dynamic,i={},a=!1,s=function(){if("vao"in t){var e=t.vao;return null!==e&&null===u.getVAO(e)&&(e=u.createVAO(e)),a=!0,i.vao=e,nA(function(n){var t=u.getVAO(e);return t?n.link(t):"null"})}if("vao"in r){a=!0;var n=r.vao;return nT(n,function(e,t){var r=e.invoke(t,n);return t.def(e.shared.vao+".getVAO("+r+")")})}return null}(),f=!1,l=function(){if(ne in t){var e=t[ne];if(i.elements=e,ny(e)){var l=i.elements=o.create(e,!0);e=o.getElements(l),f=!0}else e&&(e=o.getElements(e),f=!0,y.command(e,"invalid elements",n.commandStr));var u=nA(function(n,t){if(e){var r=n.link(e);return n.ELEMENTS=r,r}return n.ELEMENTS=null,null});return u.value=e,u}if(ne in r){f=!0;var c=r[ne];return nT(c,function(e,n){var t=e.shared,r=t.isBufferArgs,i=t.elements,a=e.invoke(n,c),o=n.def("null"),s=n.def(r,"(",a,")"),f=e.cond(s).then(o,"=",i,".createStream(",a,");").else(o,"=",i,".getElements(",a,");");return y.optional(function(){e.assert(f.else,"!"+a+"||"+o,"invalid elements")}),n.entry(f),n.exit(e.cond(s).then(i,".destroyStream(",o,");")),e.ELEMENTS=o,o})}return a?new nS(s.thisDep,s.contextDep,s.propDep,function(e,n){return n.def(e.shared.vao+".currentVAO?"+e.shared.elements+".getElements("+e.shared.vao+".currentVAO.elements):null")}):null}();function c(e,o){if(e in t){var l=0|t[e];return o?i.offset=l:i.instances=l,y.command(!o||l>=0,"invalid "+e,n.commandStr),nA(function(e,n){return o&&(e.OFFSET=l),l})}if(e in r){var u=r[e];return nT(u,function(n,t){var r=n.invoke(t,u);return o&&(n.OFFSET=r,y.optional(function(){n.assert(t,r+">=0","invalid "+e)})),r})}if(o){if(f)return nA(function(e,n){return e.OFFSET=0,0});if(a)return new nS(s.thisDep,s.contextDep,s.propDep,function(e,n){return n.def(e.shared.vao+".currentVAO?"+e.shared.vao+".currentVAO.offset:0")})}else if(a)return new nS(s.thisDep,s.contextDep,s.propDep,function(e,n){return n.def(e.shared.vao+".currentVAO?"+e.shared.vao+".currentVAO.instances:-1")});return null}var d=c(nr,!0),p=function(){if(nn in t){var e=t[nn];return i.primitive=e,y.commandParameter(e,q,"invalid primitve",n.commandStr),nA(function(n,t){return q[e]})}if(nn in r){var o=r[nn];return nT(o,function(e,n){var t=e.constants.primTypes,r=e.invoke(n,o);return y.optional(function(){e.assert(n,r+" in "+t,"invalid primitive, must be one of "+Object.keys(q))}),n.def(t,"[",r,"]")})}return f?nM(l)?l.value?nA(function(e,n){return n.def(e.ELEMENTS,".primType")}):nA(function(){return 4}):new nS(l.thisDep,l.contextDep,l.propDep,function(e,n){var t=e.ELEMENTS;return n.def(t,"?",t,".primType:",4)}):a?new nS(s.thisDep,s.contextDep,s.propDep,function(e,n){return n.def(e.shared.vao+".currentVAO?"+e.shared.vao+".currentVAO.primitive:4")}):null}(),m=function(){if(nt in t){var e=0|t[nt];return i.count=e,y.command("number"==typeof e&&e>=0,"invalid vertex count",n.commandStr),nA(function(){return e})}if(nt in r){var o=r[nt];return nT(o,function(e,n){var t=e.invoke(n,o);return y.optional(function(){e.assert(n,"typeof "+t+'==="number"&&'+t+">=0&&"+t+"===("+t+"|0)","invalid vertex count")}),t})}if(f){if(nM(l)){if(l)return d?new nS(d.thisDep,d.contextDep,d.propDep,function(e,n){var t=n.def(e.ELEMENTS,".vertCount-",e.OFFSET);return y.optional(function(){e.assert(n,t+">=0","invalid vertex offset/element buffer too small")}),t}):nA(function(e,n){return n.def(e.ELEMENTS,".vertCount")});var u=nA(function(){return -1});return y.optional(function(){u.MISSING=!0}),u}var c=new nS(l.thisDep||d.thisDep,l.contextDep||d.contextDep,l.propDep||d.propDep,function(e,n){var t=e.ELEMENTS;return e.OFFSET?n.def(t,"?",t,".vertCount-",e.OFFSET,":-1"):n.def(t,"?",t,".vertCount:-1")});return y.optional(function(){c.DYNAMIC=!0}),c}return a?new nS(s.thisDep,s.contextDep,s.propDep,function(e,n){return n.def(e.shared.vao,".currentVAO?",e.shared.vao,".currentVAO.count:-1")}):null}();return{elements:l,primitive:p,count:m,instances:c(ni,!1),offset:d,vao:s,vaoActive:a,elementsActive:f,static:i}}(e,d),G=(p=e.static,m=e.dynamic,v={},M.forEach(function(e){var n=F(e);function t(t,r){if(e in p){var i=t(p[e]);v[n]=nA(function(){return i})}else if(e in m){var a=m[e];v[n]=nT(a,function(e,n){return r(e,n,e.invoke(n,a))})}}switch(e){case e$:case eL:case eR:case eJ:case eG:case e3:case eW:case eY:case eQ:case eB:return t(function(n){return y.commandType(n,"boolean",e,d.commandStr),n},function(n,t,r){return y.optional(function(){n.assert(t,"typeof "+r+'==="boolean"',"invalid flag "+e,n.commandStr)}),r});case eU:return t(function(n){return y.commandParameter(n,ng,"invalid "+e,d.commandStr),ng[n]},function(n,t,r){var i=n.constants.compareFuncs;return y.optional(function(){n.assert(t,r+" in "+i,"invalid "+e+", must be one of "+Object.keys(ng))}),t.def(i,"[",r,"]")});case eI:return t(function(e){return y.command(J(e)&&2===e.length&&"number"==typeof e[0]&&"number"==typeof e[1]&&e[0]<=e[1],"depth range is 2d array",d.commandStr),e},function(e,n,t){return y.optional(function(){e.assert(n,e.shared.isArrayLike+"("+t+")&&"+t+".length===2&&typeof "+t+'[0]==="number"&&typeof '+t+'[1]==="number"&&'+t+"[0]<="+t+"[1]","depth range must be a 2d array")}),[n.def("+",t,"[0]"),n.def("+",t,"[1]")]});case eN:return t(function(e){y.commandType(e,"object","blend.func",d.commandStr);var t="srcRGB"in e?e.srcRGB:e.src,r="srcAlpha"in e?e.srcAlpha:e.src,i="dstRGB"in e?e.dstRGB:e.dst,a="dstAlpha"in e?e.dstAlpha:e.dst;return y.commandParameter(t,nv,n+".srcRGB",d.commandStr),y.commandParameter(r,nv,n+".srcAlpha",d.commandStr),y.commandParameter(i,nv,n+".dstRGB",d.commandStr),y.commandParameter(a,nv,n+".dstAlpha",d.commandStr),y.command(-1===nh.indexOf(t+", "+i),"unallowed blending combination (srcRGB, dstRGB) = ("+t+", "+i+")",d.commandStr),[nv[t],nv[i],nv[r],nv[a]]},function(n,t,r){var i=n.constants.blendFuncs;function a(a,o){var s=t.def('"',a,o,'" in ',r,"?",r,".",a,o,":",r,".",a);return y.optional(function(){n.assert(t,s+" in "+i,"invalid "+e+"."+a+o+", must be one of "+Object.keys(nv))}),s}y.optional(function(){n.assert(t,r+"&&typeof "+r+'==="object"',"invalid blend func, must be an object")});var o=a("src","RGB"),s=a("dst","RGB");y.optional(function(){var e=n.constants.invalidBlendCombinations;n.assert(t,e+".indexOf("+o+'+", "+'+s+") === -1 ","unallowed blending combination for (srcRGB, dstRGB)")});var f=t.def(i,"[",o,"]"),l=t.def(i,"[",a("src","Alpha"),"]");return[f,t.def(i,"[",s,"]"),l,t.def(i,"[",a("dst","Alpha"),"]")]});case eP:return t(function(n){return"string"==typeof n?(y.commandParameter(n,g,"invalid "+e,d.commandStr),[g[n],g[n]]):"object"==typeof n?(y.commandParameter(n.rgb,g,e+".rgb",d.commandStr),y.commandParameter(n.alpha,g,e+".alpha",d.commandStr),[g[n.rgb],g[n.alpha]]):void y.commandRaise("invalid blend.equation",d.commandStr)},function(n,t,r){var i=n.constants.blendEquations,a=t.def(),o=t.def(),s=n.cond("typeof ",r,'==="string"');return y.optional(function(){function t(e,t,r){n.assert(e,r+" in "+i,"invalid "+t+", must be one of "+Object.keys(g))}t(s.then,e,r),n.assert(s.else,r+"&&typeof "+r+'==="object"',"invalid "+e),t(s.else,e+".rgb",r+".rgb"),t(s.else,e+".alpha",r+".alpha")}),s.then(a,"=",o,"=",i,"[",r,"];"),s.else(a,"=",i,"[",r,".rgb];",o,"=",i,"[",r,".alpha];"),t(s),[a,o]});case ez:return t(function(e){return y.command(J(e)&&4===e.length,"blend.color must be a 4d array",d.commandStr),D(4,function(n){return+e[n]})},function(e,n,t){return y.optional(function(){e.assert(n,e.shared.isArrayLike+"("+t+")&&"+t+".length===4","blend.color must be a 4d array")}),D(4,function(e){return n.def("+",t,"[",e,"]")})});case eZ:return t(function(e){return y.commandType(e,"number",n,d.commandStr),0|e},function(e,n,t){return y.optional(function(){e.assert(n,"typeof "+t+'==="number"',"invalid stencil.mask")}),n.def(t,"|0")});case e0:return t(function(t){y.commandType(t,"object",n,d.commandStr);var r=t.cmp||"keep",i=t.ref||0,a="mask"in t?t.mask:-1;return y.commandParameter(r,ng,e+".cmp",d.commandStr),y.commandType(i,"number",e+".ref",d.commandStr),y.commandType(a,"number",e+".mask",d.commandStr),[ng[r],i,a]},function(e,n,t){var r=e.constants.compareFuncs;return y.optional(function(){function i(){e.assert(n,Array.prototype.join.call(arguments,""),"invalid stencil.func")}i(t+"&&typeof ",t,'==="object"'),i('!("cmp" in ',t,")||(",t,".cmp in ",r,")")}),[n.def('"cmp" in ',t,"?",r,"[",t,".cmp]",":",7680),n.def(t,".ref|0"),n.def('"mask" in ',t,"?",t,".mask|0:-1")]});case e1:case e2:return t(function(t){y.commandType(t,"object",n,d.commandStr);var r=t.fail||"keep",i=t.zfail||"keep",a=t.zpass||"keep";return y.commandParameter(r,nb,e+".fail",d.commandStr),y.commandParameter(i,nb,e+".zfail",d.commandStr),y.commandParameter(a,nb,e+".zpass",d.commandStr),[e===e2?1029:1028,nb[r],nb[i],nb[a]]},function(n,t,r){var i=n.constants.stencilOps;function a(a){return y.optional(function(){n.assert(t,'!("'+a+'" in '+r+")||("+r+"."+a+" in "+i+")","invalid "+e+"."+a+", must be one of "+Object.keys(nb))}),t.def('"',a,'" in ',r,"?",i,"[",r,".",a,"]:",7680)}return y.optional(function(){n.assert(t,r+"&&typeof "+r+'==="object"',"invalid "+e)}),[e===e2?1029:1028,a("fail"),a("zfail"),a("zpass")]});case eq:return t(function(e){y.commandType(e,"object",n,d.commandStr);var t=0|e.factor,r=0|e.units;return y.commandType(t,"number",n+".factor",d.commandStr),y.commandType(r,"number",n+".units",d.commandStr),[t,r]},function(n,t,r){return y.optional(function(){n.assert(t,r+"&&typeof "+r+'==="object"',"invalid "+e)}),[t.def(r,".factor|0"),t.def(r,".units|0")]});case eV:return t(function(e){var t=0;return"front"===e?t=1028:"back"===e&&(t=1029),y.command(!!t,n,d.commandStr),t},function(e,n,t){return y.optional(function(){e.assert(n,t+'==="front"||'+t+'==="back"',"invalid cull.face")}),n.def(t,'==="front"?',1028,":",1029)});case eH:return t(function(e){return y.command("number"==typeof e&&e>=i.lineWidthDims[0]&&e<=i.lineWidthDims[1],"invalid line width, must be a positive number between "+i.lineWidthDims[0]+" and "+i.lineWidthDims[1],d.commandStr),e},function(e,n,t){return y.optional(function(){e.assert(n,"typeof "+t+'==="number"&&'+t+">="+i.lineWidthDims[0]+"&&"+t+"<="+i.lineWidthDims[1],"invalid line width")}),t});case ej:return t(function(e){return y.commandParameter(e,n_,n,d.commandStr),n_[e]},function(e,n,t){return y.optional(function(){e.assert(n,t+'==="cw"||'+t+'==="ccw"',"invalid frontFace, must be one of cw,ccw")}),n.def(t+'==="cw"?2304:2305')});case eK:return t(function(e){return y.command(J(e)&&4===e.length,"color.mask must be length 4 array",d.commandStr),e.map(function(e){return!!e})},function(e,n,t){return y.optional(function(){e.assert(n,e.shared.isArrayLike+"("+t+")&&"+t+".length===4","invalid color.mask")}),D(4,function(e){return"!!"+t+"["+e+"]"})});case eX:return t(function(e){y.command("object"==typeof e&&e,n,d.commandStr);var t="value"in e?e.value:1,r=!!e.invert;return y.command("number"==typeof t&&t>=0&&t<=1,"sample.coverage.value must be a number between 0 and 1",d.commandStr),[t,r]},function(e,n,t){return y.optional(function(){e.assert(n,t+"&&typeof "+t+'==="object"',"invalid sample.coverage")}),[n.def('"value" in ',t,"?+",t,".value:1"),n.def("!!",t,".invert")]})}}),v),U=function(e,n,r){var i,a=e.static,o=e.dynamic;function s(e){if(e in a){var n=t.id(a[e]);y.optional(function(){c.shader(nx[e],n,y.guessCommand())});var r=nA(function(){return n});return r.id=n,r}if(e in o){var i=o[e];return nT(i,function(n,t){var r=n.invoke(t,i),a=t.def(n.shared.strings,".id(",r,")");return y.optional(function(){t(n.shared.shader,".shader(",nx[e],",",a,",",n.command,");")}),a})}return null}var f=s(e7),l=s(e9),u=null;return nM(f)&&nM(l)?(u=c.program(l.id,f.id,null,r),i=nA(function(e,n){return e.link(u)})):i=new nS(f&&f.thisDep||l&&l.thisDep,f&&f.contextDep||l&&l.contextDep,f&&f.propDep||l&&l.propDep,function(e,n){var t,r,i=e.shared.shader;t=f?f.append(e,n):n.def(i,".",e7),r=l?l.append(e,n):n.def(i,".",e9);var a=i+".program("+r+","+t;return y.optional(function(){a+=","+e.command}),n.def(a+")")}),{frag:f,vert:l,progVar:i,program:u}}(e,0,L);function B(e){var n=P[e];n&&(G[e]=n)}B(e5),B(F(e4));var K=Object.keys(G).length>0,$={framebuffer:z,draw:N,shader:U,state:G,dirty:K,scopeVAO:null,drawVAO:null,useVAO:!1,attributes:{}};if($.profile=function(e){var n,t=e.static,r=e.dynamic;if(e6 in t){var i=!!t[e6];(n=nA(function(e,n){return i})).enable=i}else if(e6 in r){var a=r[e6];n=nT(a,function(e,n){return e.invoke(n,a)})}return n}(e,d),$.uniforms=(x=s.static,_=s.dynamic,w={},Object.keys(x).forEach(function(e){var n,t=x[e];if("number"==typeof t||"boolean"==typeof t)n=nA(function(){return t});else if("function"==typeof t){var r=t._reglType;"texture2d"===r||"textureCube"===r?n=nA(function(e){return e.link(t)}):"framebuffer"===r||"framebufferCube"===r?(y.command(t.color.length>0,'missing color attachment for framebuffer sent to uniform "'+e+'"',d.commandStr),n=nA(function(e){return e.link(t.color[0])})):y.commandRaise('invalid data for uniform "'+e+'"',d.commandStr)}else J(t)?n=nA(function(n){return n.global.def("[",D(t.length,function(r){return y.command("number"==typeof t[r]||"boolean"==typeof t[r],"invalid uniform "+e,n.commandStr),t[r]}),"]")}):y.commandRaise('invalid or missing data for uniform "'+e+'"',d.commandStr);n.value=t,w[e]=n}),Object.keys(_).forEach(function(e){var n=_[e];w[e]=nT(n,function(e,t){return e.invoke(t,n)})}),w),$.drawVAO=$.scopeVAO=N.vao,!$.drawVAO&&U.program&&!L&&r.angle_instanced_arrays&&N.static.elements){var V=!0,j=U.program.attributes.map(function(e){var t=n.static[e];return V=V&&!!t,t});if(V&&j.length>0){var H=u.getVAO(u.createVAO({attributes:j,elements:N.static.elements}));$.drawVAO=new nS(null,null,null,function(e,n){return e.link(H)}),$.useVAO=!0}}return L?$.useVAO=!0:$.attributes=(S=n.static,A=n.dynamic,T={},Object.keys(S).forEach(function(e){var n=S[e],r=t.id(e),i=new h;if(ny(n))i.state=1,i.buffer=a.getBuffer(a.create(n,34962,!1,!0)),i.type=0;else{var o=a.getBuffer(n);if(o)i.state=1,i.buffer=o,i.type=0;else if(y.command("object"==typeof n&&n,"invalid data for attribute "+e,d.commandStr),"constant"in n){var s=n.constant;i.buffer="null",i.state=2,"number"==typeof s?i.x=s:(y.command(J(s)&&s.length>0&&s.length<=4,"invalid constant for attribute "+e,d.commandStr),ek.forEach(function(e,n){n<s.length&&(i[e]=s[n])}))}else{o=ny(n.buffer)?a.getBuffer(a.create(n.buffer,34962,!1,!0)):a.getBuffer(n.buffer),y.command(!!o,'missing buffer for attribute "'+e+'"',d.commandStr);var f=0|n.offset;y.command(f>=0,'invalid offset for attribute "'+e+'"',d.commandStr);var l=0|n.stride;y.command(l>=0&&l<256,'invalid stride for attribute "'+e+'", must be integer betweeen [0, 255]',d.commandStr);var u=0|n.size;y.command(!("size"in n)||u>0&&u<=4,'invalid size for attribute "'+e+'", must be 1,2,3,4',d.commandStr);var c=!!n.normalized,p=0;"type"in n&&(y.commandParameter(n.type,I,"invalid type for attribute "+e,d.commandStr),p=I[n.type]);var m=0|n.divisor;y.optional(function(){"divisor"in n&&(y.command(0===m||b,'cannot specify divisor for attribute "'+e+'", instancing not supported',d.commandStr),y.command(m>=0,'invalid divisor for attribute "'+e+'"',d.commandStr));var t=d.commandStr,r=["buffer","offset","divisor","normalized","type","size","stride"];Object.keys(n).forEach(function(n){y.command(r.indexOf(n)>=0,'unknown parameter "'+n+'" for attribute pointer "'+e+'" (valid parameters are '+r+")",t)})}),i.buffer=o,i.state=1,i.size=u,i.normalized=c,i.type=p||o.dtype,i.offset=f,i.stride=l,i.divisor=m}}T[e]=nA(function(e,n){var t=e.attribCache;if(r in t)return t[r];var a={isStream:!1};return Object.keys(i).forEach(function(e){a[e]=i[e]}),i.buffer&&(a.buffer=e.link(i.buffer),a.type=a.type||a.buffer+".dtype"),t[r]=a,a})}),Object.keys(A).forEach(function(e){var n=A[e];T[e]=nT(n,function(t,r){var i=t.invoke(r,n),a=t.shared,o=t.constants,s=a.isBufferArgs,f=a.buffer;y.optional(function(){t.assert(r,i+"&&(typeof "+i+'==="object"||typeof '+i+'==="function")&&('+s+"("+i+")||"+f+".getBuffer("+i+")||"+f+".getBuffer("+i+".buffer)||"+s+"("+i+'.buffer)||("constant" in '+i+"&&(typeof "+i+'.constant==="number"||'+a.isArrayLike+"("+i+".constant))))",'invalid dynamic attribute "'+e+'"')});var l={isStream:r.def(!1)},u=new h;u.state=1,Object.keys(u).forEach(function(e){l[e]=r.def(""+u[e])});var c=l.buffer,d=l.type;function p(e){r(l[e],"=",i,".",e,"|0;")}return r("if(",s,"(",i,")){",l.isStream,"=true;",c,"=",f,".createStream(",34962,",",i,");",d,"=",c,".dtype;","}else{",c,"=",f,".getBuffer(",i,");","if(",c,"){",d,"=",c,".dtype;",'}else if("constant" in ',i,"){",l.state,"=",2,";","if(typeof "+i+'.constant === "number"){',l[ek[0]],"=",i,".constant;",ek.slice(1).map(function(e){return l[e]}).join("="),"=0;","}else{",ek.map(function(e,n){return l[e]+"="+i+".constant.length>"+n+"?"+i+".constant["+n+"]:0;"}).join(""),"}}else{","if(",s,"(",i,".buffer)){",c,"=",f,".createStream(",34962,",",i,".buffer);","}else{",c,"=",f,".getBuffer(",i,".buffer);","}",d,'="type" in ',i,"?",o.glTypes,"[",i,".type]:",c,".dtype;",l.normalized,"=!!",i,".normalized;"),p("size"),p("offset"),p("stride"),p("divisor"),r("}}"),r.exit("if(",l.isStream,"){",f,".destroyStream(",c,");","}"),l})}),T),$.context=(O=l.static,E=l.dynamic,C={},Object.keys(O).forEach(function(e){var n=O[e];C[e]=nA(function(e,t){return"number"==typeof n||"boolean"==typeof n?""+n:e.link(n)})}),Object.keys(E).forEach(function(e){var n=E[e];C[e]=nT(n,function(e,t){return e.invoke(t,n)})}),C),$}(e,s,l,d,m);return function(e,n){var t=e.proc("draw",1);B(e,t),P(e,t,n.context),N(e,t,n.framebuffer),G(e,t,n),U(e,t,n.state),K(e,t,n,!1,!0);var r=n.shader.progVar.append(e,t);if(t(e.shared.gl,".useProgram(",r,".program);"),n.shader.program)W(e,t,n,n.shader.program);else{t(e.shared.vao,".setVAO(null);");var i=e.global.def("{}"),a=t.def(r,".id"),o=t.def(i,"[",a,"]");t(e.cond(o).then(o,".call(this,a0);").else(o,"=",i,"[",a,"]=",e.link(function(t){return H(W,e,n,t,1)}),"(",r,");",o,".call(this,a0);"))}Object.keys(n.state).length>0&&t(e.shared.current,".dirty=true;"),e.shared.vao&&t(e.shared.vao,".setVAO(null);")}(m,v),function(e,n){var r=e.proc("scope",3);e.batchId="a2";var i=e.shared,a=i.current;function o(t){var a=n.shader[t];a&&r.set(i.shader,"."+t,a.append(e,r))}P(e,r,n.context),n.framebuffer&&n.framebuffer.append(e,r),nw(Object.keys(n.state)).forEach(function(t){var a=n.state[t].append(e,r);J(a)?a.forEach(function(n,i){r.set(e.next[t],"["+i+"]",n)}):r.set(i.next,"."+t,a)}),K(e,r,n,!0,!0),[ne,nr,nt,ni,nn].forEach(function(t){var a=n.draw[t];a&&r.set(i.draw,"."+t,""+a.append(e,r))}),Object.keys(n.uniforms).forEach(function(a){var o=n.uniforms[a].append(e,r);Array.isArray(o)&&(o="["+o.join()+"]"),r.set(i.uniforms,"["+t.id(a)+"]",o)}),Object.keys(n.attributes).forEach(function(t){var i=n.attributes[t].append(e,r),a=e.scopeAttrib(t);Object.keys(new h).forEach(function(e){r.set(a,"."+e,i[e])})}),n.scopeVAO&&r.set(i.vao,".targetVAO",n.scopeVAO.append(e,r)),o(e9),o(e7),Object.keys(n.state).length>0&&(r(a,".dirty=true;"),r.exit(a,".dirty=true;")),r("a1(",e.shared.context,",a0,",e.batchId,");")}(m,v),function(e,n){var t=e.proc("batch",2);e.batchId="0",B(e,t);var r=!1,i=!0;Object.keys(n.context).forEach(function(e){r=r||n.context[e].propDep}),r||(P(e,t,n.context),i=!1);var a=n.framebuffer,o=!1;function s(e){return e.contextDep&&r||e.propDep}a?(a.propDep?r=o=!0:a.contextDep&&r&&(o=!0),o||N(e,t,a)):N(e,t,null),n.state.viewport&&n.state.viewport.propDep&&(r=!0),G(e,t,n),U(e,t,n.state,function(e){return!s(e)}),n.profile&&s(n.profile)||K(e,t,n,!1,"a1"),n.contextDep=r,n.needsContext=i,n.needsFramebuffer=o;var f=n.shader.progVar;if(f.contextDep&&r||f.propDep)Q(e,t,n,null);else{var l=f.append(e,t);if(t(e.shared.gl,".useProgram(",l,".program);"),n.shader.program)Q(e,t,n,n.shader.program);else{t(e.shared.vao,".setVAO(null);");var u=e.global.def("{}"),c=t.def(l,".id"),d=t.def(u,"[",c,"]");t(e.cond(d).then(d,".call(this,a0,a1);").else(d,"=",u,"[",c,"]=",e.link(function(t){return H(Q,e,n,t,2)}),"(",l,");",d,".call(this,a0,a1);"))}}Object.keys(n.state).length>0&&t(e.shared.current,".dirty=true;"),e.shared.vao&&t(e.shared.vao,".setVAO(null);")}(m,v),n(m.compile(),{destroy:function(){v.shader.program.destroy()}})}}}(o,u,d,x,_,w,0,G,{},S,M,b,g,p,a),Y=function(n,t,r,i,a,o,s){function f(f){null===t.next?(y(a.preserveDrawingBuffer,'you must create a webgl context with "preserveDrawingBuffer":true in order to read pixels from the drawing buffer'),l=5121):(y(null!==t.next.colorAttachments[0].texture,"You cannot read from a renderbuffer"),l=t.next.colorAttachments[0].texture._texture.type,y.optional(function(){o.oes_texture_float?(y(5121===l||5126===l,"Reading from a framebuffer is only allowed for the types 'uint8' and 'float'"),5126===l&&y(s.readFloat,"Reading 'float' values is not permitted in your browser. For a fallback, please see: https://www.npmjs.com/package/glsl-read-float")):y(5121===l,"Reading from a framebuffer is only allowed for the type 'uint8'")}));var l,u=0,c=0,d=i.framebufferWidth,p=i.framebufferHeight,m=null;e(f)?m=f:f&&(y.type(f,"object","invalid arguments to regl.read()"),u=0|f.x,c=0|f.y,y(u>=0&&u<i.framebufferWidth,"invalid x offset for regl.read"),y(c>=0&&c<i.framebufferHeight,"invalid y offset for regl.read"),d=0|(f.width||i.framebufferWidth-u),p=0|(f.height||i.framebufferHeight-c),m=f.data||null),m&&(5121===l?y(m instanceof Uint8Array,"buffer must be 'Uint8Array' when reading from a framebuffer of type 'uint8'"):5126===l&&y(m instanceof Float32Array,"buffer must be 'Float32Array' when reading from a framebuffer of type 'float'")),y(d>0&&d+u<=i.framebufferWidth,"invalid width for read pixels"),y(p>0&&p+c<=i.framebufferHeight,"invalid height for read pixels"),r();var v=d*p*4;return m||(5121===l?m=new Uint8Array(v):5126===l&&(m=m||new Float32Array(v))),y.isTypedArray(m,"data buffer for regl.read() must be a typedarray"),y(m.byteLength>=v,"data buffer for regl.read() too small"),n.pixelStorei(3333,4),n.readPixels(u,c,d,p,6408,l,m),m}return function(e){var n;return e&&"framebuffer"in e?(t.setFBO({framebuffer:e.framebuffer},function(){n=f(e)}),n):f(e)}}(o,G,U.procs.poll,g,s,d,x),Q=U.next,er=o.canvas,eu=[],ec=[],ed=[],ey=[a.onDestroy],na=null;function no(){if(0===eu.length){p&&p.update(),na=null;return}na=T.next(no),nI();for(var e=eu.length-1;e>=0;--e){var n=eu[e];n&&n(g,null,0)}o.flush(),p&&p.update()}function nc(){!na&&eu.length>0&&(na=T.next(no))}function nk(){na&&(T.cancel(no),na=null)}function nR(e){e.preventDefault(),f=!0,nk(),ec.forEach(function(e){e()})}function nL(e){o.getError(),f=!1,l.restore(),M.restore(),_.restore(),C.restore(),k.restore(),G.restore(),S.restore(),p&&p.restore(),U.procs.refresh(),nc(),ed.forEach(function(e){e()})}function nz(e){function t(e,n){var t={},r={};return Object.keys(e).forEach(function(i){var a=e[i];if(A.isDynamic(a)){r[i]=A.unbox(a,i);return}if(n&&Array.isArray(a)){for(var o=0;o<a.length;++o)if(A.isDynamic(a[o])){r[i]=A.unbox(a,i);return}}t[i]=a}),{dynamic:r,static:t}}y(!!e,"invalid args to regl({...})"),y.type(e,"object","invalid args to regl({...})");var r=t(e.context||{},!0),i=t(e.uniforms||{},!0),a=t(e.attributes||{},!1),o=t(function(e){var t=n({},e);function r(e){if(e in t){var n=t[e];delete t[e],Object.keys(n).forEach(function(r){t[e+"."+r]=n[r]})}}return delete t.uniforms,delete t.attributes,delete t.context,delete t.vao,"stencil"in t&&t.stencil.op&&(t.stencil.opBack=t.stencil.opFront=t.stencil.op,delete t.stencil.op),r("blend"),r("depth"),r("cull"),r("stencil"),r("polygonOffset"),r("scissor"),r("sample"),"vao"in e&&(t.vao=e.vao),t}(e),!1),s={gpuTime:0,cpuTime:0,count:0},l=U.compile(o,a,i,r,s),u=l.draw,c=l.batch,d=l.scope,p=[];return n(function(e,n){var t;if(f&&y.raise("context lost"),"function"==typeof e)return d.call(this,null,e,0);if("function"==typeof n){if("number"==typeof e)for(t=0;t<e;++t)d.call(this,null,n,t);else if(!Array.isArray(e))return d.call(this,e,n,0);else for(t=0;t<e.length;++t)d.call(this,e[t],n,t)}else if("number"==typeof e){if(e>0)return c.call(this,function(e){for(;p.length<e;)p.push(null);return p}(0|e),0|e)}else if(!Array.isArray(e))return u.call(this,e);else if(e.length)return c.call(this,e,e.length)},{stats:s,destroy:function(){l.destroy()}})}er&&(er.addEventListener(nE,nR,!1),er.addEventListener(nD,nL,!1));var nP=G.setFBO=nz({framebuffer:A.define.call(null,1,"framebuffer")});function nN(e,n){var t=0;U.procs.poll();var r=n.color;r&&(o.clearColor(+r[0]||0,+r[1]||0,+r[2]||0,+r[3]||0),t|=16384),"depth"in n&&(o.clearDepth(+n.depth),t|=256),"stencil"in n&&(o.clearStencil(0|n.stencil),t|=1024),y(!!t,"called regl.clear with no buffer specified"),o.clear(t)}function nG(e){return y.type(e,"function","regl.frame() callback must be a function"),eu.push(e),nc(),{cancel:function(){var n=nC(eu,e);y(n>=0,"cannot cancel a frame twice"),eu[n]=function e(){var n=nC(eu,e);eu[n]=eu[eu.length-1],eu.length-=1,eu.length<=0&&nk()}}}}function nU(){var e=Q.viewport,n=Q.scissor_box;e[0]=e[1]=n[0]=n[1]=0,g.viewportWidth=g.framebufferWidth=g.drawingBufferWidth=e[2]=n[2]=o.drawingBufferWidth,g.viewportHeight=g.framebufferHeight=g.drawingBufferHeight=e[3]=n[3]=o.drawingBufferHeight}function nI(){g.tick+=1,g.time=nK(),nU(),U.procs.poll()}function nB(){C.refresh(),nU(),U.procs.refresh(),p&&p.update()}function nK(){return(O()-m)/1e3}nB();var n$=n(nz,{clear:function(e){if(y("object"==typeof e&&e,"regl.clear() takes an object as input"),"framebuffer"in e){if(e.framebuffer&&"framebufferCube"===e.framebuffer_reglType)for(var t=0;t<6;++t)nP(n({framebuffer:e.framebuffer.faces[t]},e),nN);else nP(e,nN)}else nN(null,e)},prop:A.define.bind(null,1),context:A.define.bind(null,2),this:A.define.bind(null,3),draw:nz({}),buffer:function(e){return _.create(e,34962,!1,!1)},elements:function(e){return w.create(e,!1)},texture:C.create2D,cube:C.createCube,renderbuffer:k.create,framebuffer:G.create,framebufferCube:G.createCube,vao:S.createVAO,attributes:s,frame:nG,on:function(e,n){var t;switch(y.type(n,"function","listener callback must be a function"),e){case"frame":return nG(n);case"lost":t=ec;break;case"restore":t=ed;break;case"destroy":t=ey;break;default:y.raise("invalid event, must be one of frame,lost,restore,destroy")}return t.push(n),{cancel:function(){for(var e=0;e<t.length;++e)if(t[e]===n){t[e]=t[t.length-1],t.pop();return}}}},limits:x,hasExtension:function(e){return x.extensions.indexOf(e.toLowerCase())>=0},read:Y,destroy:function(){eu.length=0,nk(),er&&(er.removeEventListener(nE,nR),er.removeEventListener(nD,nL)),M.clear(),G.clear(),k.clear(),S.clear(),C.clear(),w.clear(),_.clear(),p&&p.clear(),ey.forEach(function(e){e()})},_gl:o,_refresh:nB,poll:function(){nI(),p&&p.update()},now:nK,stats:c});return a.onDone(null,n$),n$}}();const[tb,tx,t_,ty]=Q("*"),[tw,tS,tM,tA]=Q("/"),[tT,tO,tF,tE]=Y(([e,n])=>`${e}=1/${n};`);var tD={};tD="/** Optical-flow fragment shader. */\n\nprecision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D next;\nuniform sampler2D past;\nuniform float offset;\nuniform float lambda;\nuniform float alpha;\nuniform vec2 flip;\nuniform vec2 aspect;\n\nvarying vec2 opticalFlow_uv;\n\n/**\n * Optical flow GLSL module.\n * May work best if the views are pre-processed (e.g: blur).\n *\n * @see https://forum.openframeworks.cc/t/ofxflowtools-optical-flow-fluid-dynamics-and-particles-in-glsl/15470\n * @see https://github.com/moostrik/ofxFlowTools\n * @see https://github.com/diwi/PixelFlow\n * @see http://thomasdiewald.com/blog/?p=2766\n * @see https://adamferriss.com/gush/\n * @see https://github.com/princemio/ofxMIOFlowGLSL/blob/master/src/FlowShader.cpp\n */\n\n#define opticalFlowPixel_extern 0\n#define opticalFlowPixel_normal 1\n#define opticalFlowPixel_luma 2\n#ifndef opticalFlowPixel\n  #define opticalFlowPixel opticalFlowPixel_luma\n#endif\n\n#if opticalFlowPixel == opticalFlowPixel_luma\n  float luma(vec3 color) {\n  return dot(color, vec3(0.299, 0.587, 0.114));\n}\n\nfloat luma(vec4 color) {\n  return dot(color.rgb, vec3(0.299, 0.587, 0.114));\n}\n\n  vec4 pixel(sampler2D texture, vec2 uv) {\n    vec4 color = texture2D(texture, uv);\n\n    return vec4(vec3(luma(color)), color.a);\n  }\n#elif opticalFlowPixel == opticalFlowPixel_normal\n  vec4 pixel(sampler2D texture, vec2 uv) { return texture2D(texture, uv); }\n#else\n  // To provide external `pixel` lookup function.\n  vec4 pixel(sampler2D texture, vec2 uv);\n#endif\n\n// @todo Sample mimaps at different LODs/scales to capture wider features.\nvec2 opticalFlow(in vec2 uv, in sampler2D next, in sampler2D past,\n    in float offset, in float lambda) {\n  vec2 off = vec2(offset, 0.0);\n\n  vec4 gradX = (pixel(next, uv+off.xy)-pixel(next, uv-off.xy))+\n    (pixel(past, uv+off.xy)-pixel(past, uv-off.xy));\n\n  vec4 gradY = (pixel(next, uv+off.yx)-pixel(next, uv-off.yx))+\n    (pixel(past, uv+off.yx)-pixel(past, uv-off.yx));\n\n  vec4 gradMag = sqrt((gradX*gradX)+(gradY*gradY)+vec4(lambda));\n\n  vec4 diff = pixel(next, uv)-pixel(past, uv);\n\n  return vec2((diff*(gradX/gradMag)).x, (diff*(gradY/gradMag)).x);\n}\n\nvec2 opticalFlow(in vec2 uv, in sampler2D views[2], in float offset,\n    in float lambda) {\n  return opticalFlow(uv, views[0], views[1], offset, lambda);\n}\n\nvoid main() {\n  vec2 flow = opticalFlow(fract(opticalFlow_uv*flip)*aspect,\n    next, past, offset, lambda);\n\n  gl_FragColor.xy = flow;\n  // gl_FragColor.xy = abs(flow);\n  // gl_FragColor.a = 1.0;\n}\n";var tC={};tC="/** Optical-flow-to-grid fragment shader. */\n\n#ifdef GL_EXT_draw_buffers\n  #extension GL_EXT_draw_buffers : require\n#endif\n\nprecision highp float;\n#define GLSLIFY 1\n\n#if defined(grid_output_motionFull)\n  uniform vec2 rescaleMotion;\n  uniform vec2 rescaleFlow;\n  uniform sampler2D opticalFlow;\n  uniform float dt;\n#endif\n\nvarying vec2 opticalFlow_uv;\n\n#ifdef grid_output_motionFull\n  /** Exponential notation packed into a vector. */\nfloat exponent(vec2 basePower) { return basePower.s*pow(1e1, basePower.t); }\n\n#endif\n\nvoid main() {\n  #ifdef grid_output_motionFull\n    float rescaledFlow = exponent(rescaleFlow);\n    float rescaledMotion = exponent(rescaleMotion);\n    vec2 flow = rescaledFlow*dt*texture2D(opticalFlow, opticalFlow_uv).xy;\n\n    grid_output_motionFull = flow/rescaledMotion;\n  #endif\n}\n";const{min:tk,max:tR,sign:tL}=Math,{isFinite:tz}=Number,tP=em(),tN=(e,n,t=[])=>tO(t,tS(t,e,n(...e)));async function tG(e){let{$canvas:t,pixelRatio:r}=e,i=n(tg)({canvas:t,pixelRatio:r,extensions:td(),optionalExtensions:tp()}),{command:a=i,frame:o,texture:f,buffer:l,framebuffer:u,clear:c}=i,{frame:d,timer:{step:p},grid:m}=function(e,t={}){console.log("mpm",t);let{command:r=e,buffer:i,elements:a,clear:o,hasExtension:s,now:f,limits:l}=t.api=e,{pointSizeDims:u,lineWidthDims:c}=l,d=(to.extensionsInstances??=tc()).every(s);t.support={hasInstances:d};let p=t.vertex=[[1,1],[1,0],[0,0],[0,1]],m=t.quad=[[0,1,2],[2,3,0]],v=t.timer?.step??1e3/60;t.timer=nt({now:v?void 0:()=>1e3*f(),period:1e6,...t.timer,step:v||"-"}),t.g=[.5,.5,100*ta],t.rescale={mass:[1,0],position:[1,0],motion:[1,0],affine:[1,0],deform:[1,0],stress:[1,0]},t.head={kernelType:"",glsl:({kernelType:e}=t.head)=>(e?`#define kernelType${e}
`:"")+`
`};let h=t.grid={to:t,frag:n(n0),bounds:[-1,-1,1,1],limit:1e9,boundsIn:[2,2,-2,-2],boundsHit:1,...t.grid},g=h.fields=tm(new Map().set("mass",1).set("motionFull",2).set("motionBase",2)),b="grid_",x=[],{index:_,values:y,alias:w}=g,{mass:S,motionFull:M,motionBase:A}=_;x[M]=[M,S],x[A]=[A,S];let T={values:y,alias:w,derives:x},O=h.gpgpu=e9(e,{to:t,pre:b,maps:T,steps:2,stepNow:0,bound:1,side:200,macros:{vert:0},frags:[],...h.gpgpu,frag:(e,{to:{grid:n,head:t}})=>t.glsl(t)+n.frag,uniforms:{boundsIn:(e,n)=>n.to.grid.boundsIn,boundsHit:(e,n)=>n.to.grid.boundsHit,dt:(e,n)=>n.to.timer.dt,g:(e,n)=>n.to.g,rescaleMass:(e,n)=>n.to.rescale.mass,rescaleMotion:(e,n)=>n.to.rescale.motion}}),F=O.merge;h.clears={color:[0,0,0,0],depth:1,framebuffer:null},h.clear=({clears:e,gpgpu:n}=h)=>ew((t,r)=>{n.passNow=r,(e.framebuffer=e3(n)?.framebuffer)&&o(e)},n.maps.passes);let E=(t.points={to:t}).fields=tm(new Map().set("position",2).set("motion",2).set("mass",1).set("affine",4).set("deform",4).set("stress",4)),D=t.gridToPoints={to:t,frag:n(n1),mass:1,volume:1e-4,volumeSplit:[1e-6,-.001],motionAdjust:.97,positionAdjusts:[0,1],youngMod:5e5,poissonRatio:.3,bulkMod:null,shearMod:null,frictionAngle:nl(40),materialFriction:null,boundsClamp:!0,spawnOn:{any:!1,out:!0,slow:!1,centre:!1},wander:[0,0],...t.gridToPoints};D.volume??=(()=>{let{volume:e,volumeScale:n}=D;if(null!=e)return e;let[t,r]=h.gpgpu.size.shape;return n/t*(n/r)})();let{index:C,values:k,alias:R}=E,{position:L,motion:z,mass:P,affine:N,deform:G,stress:U}=C,I=[];I[L]=[L,z,P],I[z]=[z,L],I[P]=null,I[N]=[L],I[G]=[G],I[U]=null;let B={values:k,derives:I,alias:R},K="points_",$=tv({...th,pre:b,steps:2,merge:F,macros:{output:0},maps:eT({...T,...th.maps,derives:[[M,A]]})},(e,n)=>n.to.grid.gpgpu);D.link={grid:$};let{size:V,merge:j,bound:H}=D.gpgpu=e9(e,{to:t,pre:K,maps:B,stepNow:0,bound:1,steps:2,scale:8,macros:{vert:0},frags:[],...D.gpgpu,frag:(e,{to:{gridToPoints:{frag:n,link:t},head:r}})=>r.glsl(r)+t.grid.macros+n,uniforms:{...$.state.uniforms,mass:(e,n)=>n.to.gridToPoints.mass,volume:(e,n)=>n.to.gridToPoints.volume,volumeSplit:(e,n)=>n.to.gridToPoints.volumeSplit,motionAdjust:(e,n)=>n.to.gridToPoints.motionAdjust,positionAdjusts:(e,n)=>n.to.gridToPoints.positionAdjusts,bulkMod(e,{to:{gridToPoints:n}}){let{bulkMod:t,youngMod:r,poissonRatio:i}=n;return t??r/(3*(1-2*i))},shearMod(e,{to:{gridToPoints:n}}){let{shearMod:t,youngMod:r,poissonRatio:i}=n;return t??r/(2*(1+i))},materialFriction(e,{to:{gridToPoints:n}}){let{materialFriction:t,frictionAngle:r}=n;if(null!=t)return t;let i=ti(r);return 1.633*i/(3-i)},boundsClamp:(e,n)=>+(n.to.gridToPoints.boundsClamp||0),spawnOnAny:(e,n)=>+(n.to.gridToPoints.spawnOn.any||0),spawnOnOut:(e,n)=>+(n.to.gridToPoints.spawnOn.out||0),spawnOnSlow:(e,n)=>+(n.to.gridToPoints.spawnOn.slow||0),spawnOnCentre:(e,n)=>+(n.to.gridToPoints.spawnOn.centre||0),wander:(e,n)=>n.to.gridToPoints.wander,dt:(e,n)=>n.to.timer.dt,bounds:(e,n)=>n.to.grid.bounds,chaos:(e,n)=>n.to.chaos,rescaleMass:(e,n)=>n.to.rescale.mass,rescalePosition:(e,n)=>n.to.rescale.position,rescaleMotion:(e,n)=>n.to.rescale.motion,rescaleAffine:(e,n)=>n.to.rescale.affine,rescaleDeform:(e,n)=>n.to.rescale.deform,rescaleStress:(e,n)=>n.to.rescale.stress}}),{entries:W,steps:q}=V,Y=t.pointsToGrid={to:t,vert:n(n2),frag:n(n3),stretch:1,turn:1,blend:{enable:!0,func:{src:1,dst:1}},depth:{enable:!1}},{[S]:Q,[M]:X,[A]:J}=T.valueToPass,Z=Y.size={},ee=Y.splats=new Set().add(Q).add(X).add(J),en=Z.splats=ee.size,ei=Z.instances=W*en,eo=tv({...th,pre:K,steps:q,merge:j,macros:{output:0},maps:eT({...B,...th.maps,derives:[[L,z,P,N,U]]})},(e,n)=>n.to.gridToPoints.gpgpu),es=tv({...th,pre:b,steps:2,merge:F,bound:1,macros:{samples:0,taps:0},maps:eT({...T,...th.maps,derives:null})},(e,n)=>n.to.grid.gpgpu);Y.link={points:eo,grid:es};let ef=Y.quads??=u[1]<3,eu=Y.instanced??=d&&ef,ec=Y.batch??=!eu&&en>1,ed=Y.order??=eu?"point-splat":"splat-point",ep=Y.form??=ef?m:null,em=Z.forms=ep?.length??1,ev=Z.formVertexes=ep?.[0]?.length??1,eh=Y.formSource??=ef?p:[[.5,.5]],eg=Z.formSources=eh.length;Z.pointVertexes=em*ev;let eb=Z.formSourcesSplats=eg*en,ex=Z.instancesSources=ei*eg;Y.pass=r(Y.pipeline={vert:(e,{vert:n,quads:t,link:{points:r,grid:i},to:{head:a}})=>a.glsl(a)+(t?"#define points_grid_quads\n\n":"")+r.macros+i.macros+n,frag:(e,{frag:n,quads:t,link:r,to:{head:i}})=>i.glsl(i)+(t?"#define points_grid_quads\n\n":"")+r.grid.macros+n,primitive:(e,n)=>n.quads?"triangles":"points",attributes:{vertex:ef?i(Y.vertex=eu||ec?eh:er((e,n)=>ea(n,eh),el(ex),0)):Y.vertex={constant:eh},index:eu?{...Y.index="splat-point"===ed?{buffer:er((e,n)=>n,el(W),0),divisor:en}:{buffer:er((e,n)=>n%W,el(ei),0),divisor:1},buffer:i(Y.index.buffer)}:ec?"splat-point"===ed&&((e,n,t)=>(Y.index??=[])[t]??={constant:n9(t/n.splats.size)}):"splat-point"===ed&&i(Y.index=er((e,n)=>n9(n/eb),el(ex),0)),splat:eu?{...Y.splat="splat-point"===ed?{buffer:er((e,n)=>n%en,el(ei),0),divisor:1}:{buffer:er((e,n)=>n,el(en),0),divisor:W},buffer:i(Y.splat.buffer)}:ec?"splat-point"===ed&&((e,n,t)=>(Y.splat??=[])[t]??={constant:t%n.splats.size}):"splat-point"===ed&&i(Y.splat=er((e,n)=>n%eb,el(ex),0))},uniforms:{...eo.state.uniforms,...es.state.uniforms,stretch:(e,n)=>n.stretch,turn:(e,n)=>n.turn,bounds:(e,n)=>n.to.grid.bounds,rescaleMotion:(e,n)=>n.to.rescale.motion,rescaleMass:(e,n)=>n.to.rescale.mass,rescaleAffine:(e,n)=>n.to.rescale.affine,rescaleStress:(e,n)=>n.to.rescale.stress},blend:{enable:(e,n)=>n.blend.enable,func:{srcRGB:(e,{blend:{func:{src:n,srcRGB:t}}})=>t??n,srcAlpha:(e,{blend:{func:{src:n,srcAlpha:t}}})=>t??n,dstRGB:(e,{blend:{func:{dst:n,dstRGB:t}}})=>t??n,dstAlpha:(e,{blend:{func:{dst:n,dstAlpha:t}}})=>t??n}},depth:{enable:(e,n)=>n.depth.enable},elements:ep?a(Y.elements=eu||ec?ep:er((e,n)=>ni([],ea(n,ep),n9(n/em)*eg),el(ei*em),0)):Y.elements=null,count:(e,{instanced:n,batch:t,size:{pointVertexes:r,instances:i}})=>r*(n||t?1:i),instances:(e,{instanced:n,size:t})=>n?t.instances:1,framebuffer:(e,n)=>e3(n.to.grid.gpgpu)?.framebuffer}),Y.step=(e=Y)=>{let n=e.onStep?.(e)??e,{batch:t,pass:r,size:i}=n;if(!t)return r(n);let a=n.batchStates??=[];return r(el(a,n,0,a.length=i.instances))};let e_=t.screen={to:t,size:[1,1],aspect:[1,1],clears:{color:[0,0,0,0],depth:1},clear:(e=e_)=>o(e.clears)},ey=t.gridToScreen={to:t,vert:n(n4),frag:n(n5),angleHSLA:[1,.8,.7,.3],paceLinear:!1,ranges:[[0,5e12],[0,5e6]],curves:[[[0,0],[.2,.8],[1,1],[1,1]],[[0,0],[.5,.2],[.9,.9],[1,1]]],colorHi:tf(5635925,4),colorLo:[0,0,0,.1]},eS=tv({...th,pre:b,steps:2,merge:F,bound:+!F,macros:{output:0},maps:eT({...T,...th.maps,derives:[[M]]})},(e,n)=>n.to.grid.gpgpu);ey.link={grid:eS},ey.pass=r(ey.pipeline={vert:(e,{vert:n,link:t,to:{head:r}})=>r.glsl(r)+t.grid.macros+n,frag:(e,{frag:n,link:t,to:{head:r},angleHSLA:i,paceLinear:a})=>r.glsl(r)+t.grid.macros+(i?.[3]?"#define angleToHSLA\n\n":"")+(a?"#define paceLinear\n\n":"")+n,attributes:{[b+"position"]:O.positions},uniforms:{...eS.state.uniforms,angleHSLA:(e,n)=>n.angleHSLA,range:(e,{ranges:n,paceLinear:t})=>n[+t],...et((e,n,t)=>(e[`curve[${t}]`]=(e,{curves:n,paceLinear:r})=>n[+r][t],e),ey.curves[0],{}),colorHi:(e,n)=>n.colorHi,colorLo:(e,n)=>n.colorLo,aspect:(e,n)=>n.to.screen.aspect,rescaleMotion:(e,n)=>n.to.rescale.motion},depth:{enable:!1},count:O.count}),ey.draw=(e=ey)=>(e=e.onDraw?.(e)??e).pass(e);let eM=t.pointsToScreen={to:t,vert:n(n6),frag:n(n8),diffuseHi:tf(4282646656,4),diffuseLo:tf(1962934357,4),form:1,useDiscard:!1,lengthLinear:!1,wideHi:[.006,6e-6],wideLo:[.002,2e-6],widths:[,u,c],primitives:[,"points","lines"],blend:{enable:!0,func:{src:1,dst:1}},depth:{enable:!1},count:null},eA=+!j,eO=q-eA,eF=tv({...th,pre:K,steps:q,merge:j,bound:eA,macros:{output:0},maps:eT({...B,...th.maps,derives:[[L,P]]})},(e,n)=>n.to.gridToPoints.gpgpu);eM.link={points:eF};let eE=eM.counts=er((e,n)=>n&&nZ(eO,n,W),el(3),0);return eM.pass=r(eM.pipeline={vert:(e,{vert:n,link:t,to:{head:r}})=>r.glsl(r)+t.points.macros+n,frag:(e,{frag:n,link:t,to:{head:r},useDiscard:i,lengthLinear:a})=>r.glsl(r)+t.points.macros+(i?"#define useDiscard\n\n":"")+(a?"#define lengthLinear\n\n":"")+n,primitive:(e,{form:n,primitives:t})=>t[n],attributes:{index:eR(te(...eE))},uniforms:{...eF.state.uniforms,diffuseHi:(e,n)=>n.diffuseHi,diffuseLo:(e,n)=>n.diffuseLo,size:(e,n)=>n.to.screen.size,aspect:(e,n)=>n.to.screen.aspect,form:(e,n)=>n.form,wideHi:(e,{wideHi:n,lengthLinear:t,widths:r,form:i,to:a})=>nr(n[+t]*n7(...a.screen.size),...r[i]),wideLo:(e,{wideLo:n,lengthLinear:t,widths:r,form:i,to:a})=>nr(n[+t]*n7(...a.screen.size),...r[i]),widths:(e,{widths:n,form:t})=>n[t],dt:(e,n)=>n.to.timer.dt,bounds:(e,n)=>n.to.grid.bounds,rescaleMass:(e,n)=>n.to.rescale.mass,rescalePosition:(e,n)=>n.to.rescale.position},lineWidth:(e,{wideHi:n,lengthLinear:t,widths:r,to:i})=>nr(n[+t]*n7(...i.screen.size),...r[2]),blend:{enable:(e,n)=>n.blend.enable,func:{srcRGB:(e,{blend:{func:{src:n,srcRGB:t}}})=>t??n,srcAlpha:(e,{blend:{func:{src:n,srcAlpha:t}}})=>t??n,dstRGB:(e,{blend:{func:{dst:n,dstRGB:t}}})=>t??n,dstAlpha:(e,{blend:{func:{dst:n,dstAlpha:t}}})=>t??n}},depth:{enable:(e,n)=>n.depth.enable},count:(e,{count:n,counts:t,form:r})=>n??t[r]}),eM.draw=(e=eM)=>(e=e.onDraw?.(e)??e).pass(e),t.tick=(e=t.timer)=>{let{time:n,period:r}=nt(e);return e.loop=tn((n+r)%(2*r)-r),e},t.stepLinks??=!0,t.passTime??=!0,t.passDraw??=!0,t.stepPasses??=1,t.stepPass??=0,t.fps??=n(nd)({style:"color: #fff; background-color: #0006;"}),t.pass=(e=t)=>{let n=e.onPass?.(e)??e,{stepLinks:r,passTime:i,passDraw:a,pointsToGrid:o,grid:s,gridToPoints:f,screen:l,gridToScreen:u,pointsToScreen:c,timer:d,tick:p}=n,{gpgpu:m,clear:v}=s,h=f.gpgpu;return i&&p(d),n.chaos=tt(),a&&l.clear(l),v(s),n.eok?.(n),o.step(o),m.step(m),r&&++m.stepNow,h.step(h),r&&++h.stepNow,a&&(u.draw(u),c.draw(c),n.onDraw?.(n)),r&&(--m.stepNow,--h.stepNow),t},t.step=(e=t)=>{let n=e.onStep?.(e)??e,{timer:r,tick:i,pass:a,stepPasses:o,passTime:s,passDraw:f}=n,{time:l}=r,{time:u,dt:c}=s?i(r):r,d=r.dt=c/o;r.time=l,n.passTime=!1;for(let e=n.stepPass=0;e<o;e=++n.stepPass)r.time+=d,n.passDraw=f&&e===o-1,a(n);return r.time=u,r.dt=c,n.passTime=s,n.stepPass=0,t},t.frame=()=>t.step(),t}(i,e),{fields:{index:v},gpgpu:h}=m,{pre:g,size:b,merge:x,maps:_}=h,y=e.demo={to:e,...e.demo},w=document.createElement("video"),S=ep.replaceAll(ev,"opticalFlow_"),M=y.opticalFlow={to:e,vert:S,frag:n(tD),count:ec,offset:3,lambda:.001,alpha:100,flip:[-1,-1],aspect:[1,1],size:[0,0],at:0,...y.opticalFlow,media:y.opticalFlow?.mediaQuery??{width:200,height:200},input:{data:w,min:"linear",mag:"linear"},frames:er(()=>f(),el(2),0),blend:{enable:!0,func:{src:1,dst:0}},depth:{enable:!1},framebuffer:u({colorType:"float",depth:!1,stencil:!1})};M.pass=a(M.pipeline={vert:(e,n)=>n.vert,frag:(e,n)=>n.frag,attributes:{opticalFlow_position:l(tP)},uniforms:{next:(e,{frames:n,at:t})=>ea(t,n),past:(e,{frames:n,at:t})=>ea(t+1,n),offset:(e,n)=>n.offset,lambda:(e,n)=>n.lambda,alpha:(e,n)=>n.alpha,flip:(e,n)=>n.flip,aspect:(e,n)=>n.aspect},blend:{enable:(e,n)=>n.blend.enable,func:{srcRGB:(e,{blend:{func:{src:n,srcRGB:t}}})=>t??n,srcAlpha:(e,{blend:{func:{src:n,srcAlpha:t}}})=>t??n,dstRGB:(e,{blend:{func:{dst:n,dstRGB:t}}})=>t??n,dstAlpha:(e,{blend:{func:{dst:n,dstAlpha:t}}})=>t??n}},depth:{enable:(e,n)=>n.depth.enable},count:(e,n)=>n.count,framebuffer:(e,n)=>n.framebuffer}),M.step=(e=M)=>{let n=e.onStep?.(e)??e,{pass:t,at:r,frames:i,input:a}=n;i[n.at=(r+1)%i.length].subimage(a.data),t(n)};let A=y.opticalFlowToGrid={to:e,vert:S,frag:n(tC),count:ec,rescaleFlow:[3,5],blend:{enable:!0,func:{src:1,dst:1}},depth:{enable:!1},onStep:null},T=tv({...th,pre:g,steps:b.steps,merge:x,bound:1,macros:{samples:0,taps:0},maps:eT({..._,...th.maps,derives:null})},(e,n)=>n.to.grid.gpgpu);A.link={grid:T},A.pass=a(A.pipeline={vert:(e,n)=>n.vert,frag:(e,{frag:n,link:t,to:{head:r}})=>r.glsl(r)+t.grid.macros+n,attributes:{opticalFlow_position:l(tP)},uniforms:{rescaleFlow:(e,n)=>n.rescaleFlow,rescaleMotion:(e,n)=>n.to.rescale.motion,opticalFlow:(e,n)=>n.to.demo.opticalFlow.framebuffer.color[0],dt:(e,n)=>n.to.timer.dt},blend:{enable:(e,n)=>n.blend.enable,func:{srcRGB:(e,{blend:{func:{src:n,srcRGB:t}}})=>t??n,srcAlpha:(e,{blend:{func:{src:n,srcAlpha:t}}})=>t??n,dstRGB:(e,{blend:{func:{dst:n,dstRGB:t}}})=>t??n,dstAlpha:(e,{blend:{func:{dst:n,dstAlpha:t}}})=>t??n}},depth:{enable:(e,n)=>n.depth.enable},count:(e,n)=>n.count,framebuffer(e,{link:{grid:n},to:{grid:t}}){let{fields:r,gpgpu:{maps:i,passes:a,stepNow:o}}=t,s=i.valueToPass[r.index.motionFull];return ea(o-n.state.bound,a)[s].framebuffer}}),A.step=(e=A)=>{let n=e.onStep?.(e)??e;n.pass(n)};let O=y.setup=async()=>{let{demo:{opticalFlow:n},gridToPoints:t}=e,{input:r,frames:i,aspect:a,size:o}=n,f=t.gpgpu,{onStep:l}=f,u=r.data;await u.play();let{videoWidth:c,videoHeight:d}=u;tN(s(o,c,d),tk,a),n.framebuffer.resize(c,d),n.offset/=tR(c,d),ew(e=>e(r),i),f.onStep=(e,n)=>{let{stepPass:t,demo:{opticalFlow:r,opticalFlowToGrid:i}}=(l?.(e,n)??e).to;t||r.step(r),i.step(i)},u.removeEventListener("canplay",O)};w.addEventListener("canplay",O);let F=M.stream=await navigator.mediaDevices.getUserMedia({video:M.media});"srcObject"in w?w.srcObject=F:w.src=URL.createObjectURL(F);let E=y.resize=()=>{let{$canvas:n,screen:t,grid:{bounds:i,limit:a,gpgpu:o}}=e,{size:f,aspect:l}=t,[u,c]=tx(f,s(f,innerWidth,innerHeight),r);n.width=u,n.height=c,tN(f,tR,l),er((e,n)=>a*tL(e),i,0),tN(f,tk,l)};return addEventListener("resize",E),E(),e.queued=tz(p)?function n(){return e.queued=setTimeout(()=>e.queued=o(()=>n(d().queued.cancel())),p)}():o(d),self.mpm=e}const tU=(e,n,t)=>e+(n-e)*t,tI=()=>el([null,,,],.05,1);function tB(e){e.at??=0}function tK(e,n,t){e.at=tU(e.at,n.at,t)}function t$(e,n=tB){let t=null==e||isFinite(e)?{by:e}:e;return n?.(t)??t}const tV=(e,n,t=tK)=>et((r,i,a)=>{let o=e[a-1]=t$(r,n),s=t$(i,n);return e[a]=t(s,o,s.by??=.05)??s},e);var tj={};tj="/** Form-flow fragment shader. */\n\nprecision highp float;\n#define GLSLIFY 1\n\nformFlow_useSamples\n\n#ifdef formFlow_output_signedDistance\n  formFlow_useReads_signedDistance\n\n  #ifdef formFlow_mergedStates\n    uniform sampler2D formFlow_states;\n  #else\n    uniform sampler2D formFlow_states[formFlow_stepsPast*formFlow_textures];\n  #endif\n\n  #ifndef spreadRadius\n    #define spreadRadius 0\n  #endif\n  #if spreadRadius > 0\n    #define spreadRadius0 spreadRadius\n    #define spreadRadius1 spreadRadius\n  #else\n    #define spreadRadius0 0\n    #define spreadRadius1 1\n  #endif\n\n  #ifndef opticalFlowRadius\n    #define opticalFlowRadius 0\n  #endif\n  #if opticalFlowRadius > 0\n    #define opticalFlowRadius0 opticalFlowRadius\n    #define opticalFlowRadius1 opticalFlowRadius\n  #else\n    #define opticalFlowRadius0 0\n    #define opticalFlowRadius1 1\n  #endif\n\n  uniform float formFlow_stepNow;\n  uniform vec4 formFlow_stateShape;\n\n  /** The full SDF image. */\n  uniform sampler2D sdf;\n  /** The rate the field spreads. */\n  uniform vec4 spans;\n  /** How much of the central value to keep. */\n  uniform float spreadKeep;\n\n  uniform vec2 flip;\n  uniform vec2 aspect;\n  uniform vec2 offset;\n  // uniform vec2 size;\n\n  /** The current optical-flow frame. */\n  uniform sampler2D opticalFlow;\n  uniform vec2 opticalFlowSize;\n\n  uniform float dt;\n\n  uniform vec2 rescaleOpticalFlow;\n  uniform vec2 rescaleSpreadPace;\n  uniform vec2 rescaleSpreadSpan;\n#endif\n\nvarying vec2 formFlow_uv;\n\n#if defined(formFlow_output_signedDistance)\n  float map(float value, float inMin, float inMax, float outMin, float outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec2 map(vec2 value, vec2 inMin, vec2 inMax, vec2 outMin, vec2 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec3 map(vec3 value, vec3 inMin, vec3 inMax, vec3 outMin, vec3 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec4 map(vec4 value, vec4 inMin, vec4 inMax, vec4 outMin, vec4 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\n  float when_gt_1117569599(float x, float y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec2 when_gt_1117569599(vec2 x, vec2 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec3 when_gt_1117569599(vec3 x, vec3 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec4 when_gt_1117569599(vec4 x, vec4 y) {\n  return max(sign(x - y), 0.0);\n}\n\nfloat when_le_2281831123(float x, float y) {\n  return 1.0 - when_gt_1117569599(x, y);\n}\n\nvec2 when_le_2281831123(vec2 x, vec2 y) {\n  return 1.0 - when_gt_1117569599(x, y);\n}\n\nvec3 when_le_2281831123(vec3 x, vec3 y) {\n  return 1.0 - when_gt_1117569599(x, y);\n}\n\nvec4 when_le_2281831123(vec4 x, vec4 y) {\n  return 1.0 - when_gt_1117569599(x, y);\n}\n\n  // #pragma glslify: offsetUV = require(@epok.tech/gl-gpgpu/src/lookup/offset-uv);\n  /** Exponential notation packed into a vector. */\nfloat exponent(vec2 basePower) { return basePower.s*pow(1e1, basePower.t); }\n\n  float spreadSample(vec2 uv) {\n    formFlow_tapState(uv);\n\n    return formFlow_data[formFlow_reads_signedDistance_signedDistance]\n      .formFlow_channels_signedDistance;\n  }\n#endif\n\nvoid main() {\n  #if defined(formFlow_output_signedDistance)\n    float rescaledOpticalFlow = exponent(rescaleOpticalFlow);\n    float rescaledSpreadPace = exponent(rescaleSpreadPace);\n    float rescaledSpreadSpan = exponent(rescaleSpreadSpan);\n\n    // vec2 uv = offsetUV(formFlow_uv, formFlow_stateShape.xy);\n    vec2 uv = formFlow_uv;\n\n    #ifdef blurGauss\n      #if blurGauss < 5\n        vec3 blurWeights = vec3(0.2042, 0.3040, 0.0938);\n      #else\n        float blurWeights[5];\n\n        blurWeights[0] = 0.2270;\n        blurWeights[1] = 0.1946;\n        blurWeights[2] = 0.1210;\n        blurWeights[3] = 0.0540;\n        blurWeights[4] = 0.0162;\n      #endif\n\n      vec2 texelSize = 1.0/formFlow_stateShape.xy;\n      vec2 sds = vec2(spreadSample(uv)*blurWeights[0]);\n\n      sds.x += spreadSample(uv+vec2(texelSize.x, 0))*blurWeights[1];\n      sds.x += spreadSample(uv-vec2(texelSize.x, 0))*blurWeights[1];\n      sds.x += spreadSample(uv+vec2(2.0*texelSize.x, 0))*blurWeights[2];\n      sds.x += spreadSample(uv-vec2(2.0*texelSize.x, 0))*blurWeights[2];\n\n      sds.y += spreadSample(uv+vec2(0, texelSize.y))*blurWeights[1];\n      sds.y += spreadSample(uv-vec2(0, texelSize.y))*blurWeights[1];\n      sds.y += spreadSample(uv+vec2(0, 2.0*texelSize.y))*blurWeights[2];\n      sds.y += spreadSample(uv-vec2(0, 2.0*texelSize.y))*blurWeights[2];\n\n      #if blurGauss > 5\n        sds.x += spreadSample(uv+vec2(3.0*texelSize.x, 0))*blurWeights[3];\n        sds.x += spreadSample(uv-vec2(3.0*texelSize.x, 0))*blurWeights[3];\n        sds.x += spreadSample(uv+vec2(4.0*texelSize.x, 0))*blurWeights[4];\n        sds.x += spreadSample(uv-vec2(4.0*texelSize.x, 0))*blurWeights[4];\n\n        sds.y += spreadSample(uv+vec2(0, 3.0*texelSize.y))*blurWeights[3];\n        sds.y += spreadSample(uv-vec2(0, 3.0*texelSize.y))*blurWeights[3];\n        sds.y += spreadSample(uv+vec2(0, 4.0*texelSize.y))*blurWeights[4];\n        sds.y += spreadSample(uv-vec2(0, 4.0*texelSize.y))*blurWeights[4];\n      #endif\n\n      float to = (sds.x+sds.y)*0.5;\n    #else\n      float spreadPace = rescaledSpreadPace*dt;\n      vec3 spread = vec3(0);\n\n      for(int sx = -spreadRadius0; sx <= spreadRadius1; ++sx) {\n        for(int sy = -spreadRadius0; sy <= spreadRadius1; ++sy) {\n          vec2 by = rescaledSpreadSpan*vec2(sx, sy);\n\n          // float sd = spreadSample(offsetUV(formFlow_uv+(by/formFlow_stateShape.xy),\n          //   formFlow_stateShape.xy));\n          float sd = spreadSample(uv+(by/formFlow_stateShape.xy));\n\n          #ifdef lengthLinear\n            float fade = length(by);\n          #else\n            float fade = dot(by, by);\n          #endif\n\n          float keep = when_le_2281831123(fade, 0.0);\n          float blurry = 1.0-keep;\n\n          /** Central value unaltered, offset values aggregated. */\n          spread.x += sd*keep;\n          spread.y += sd*spreadPace*blurry;\n          spread.z += fade*blurry;\n        }\n      }\n\n      float to = (spread.x*spreadKeep*dt)+(spread.y/spread.z);\n    #endif\n\n    vec2 st = offset+(fract(uv*flip)*aspect);\n    float full = texture2D(sdf, st).a;\n    // float full = texture2D(sdf, st).r;\n\n    /** @todo Update this to handle different sizes and scales. */\n    vec2 pq = uv;\n    vec2 flow = vec2(0);\n\n    /** @todo Finish multi-sampling optical-flow to allow lower resolutions. */\n    for(int ox = -opticalFlowRadius0; ox <= opticalFlowRadius1; ++ox) {\n      for(int oy = -opticalFlowRadius0; oy <= opticalFlowRadius1; ++oy) {\n        flow = max(flow,\n          texture2D(opticalFlow, pq+(vec2(ox, oy)/opticalFlowSize)).xy);\n      }\n    }\n\n    flow *= rescaledOpticalFlow*dt;\n    to = min(to+dot(flow, flow), map(full, spans.x, spans.y, spans.z, spans.w));\n\n    /** Mask out anything out of range. */\n    formFlow_output_signedDistance = to*when_le_2281831123(spans.z, to)*when_le_2281831123(to, spans.w);\n  #endif\n}\n";var tH={};tH="/** Form-flow-to-grid fragment shader. */\n\nprecision highp float;\n\n#ifdef GL_EXT_draw_buffers\n  #extension GL_EXT_draw_buffers : require\n#define GLSLIFY 1\n#endif\n\nformFlow_useSamples\n\n#ifdef grid_output_motionFull\n  formFlow_useReads_signedDistance\n\n  #ifdef formFlow_mergedStates\n    uniform sampler2D formFlow_states;\n  #else\n    uniform sampler2D formFlow_states[formFlow_stepsPast*formFlow_textures];\n  #endif\n\n  uniform float formFlow_stepNow;\n  uniform vec4 formFlow_stateShape;\n\n  uniform float fieldGap;\n  uniform vec4 spanTo;\n  uniform vec2 rescaleFormFlow;\n  uniform vec2 rescaleMotion;\n  uniform float dt;\n#endif\n\nvarying vec2 formFlow_uv;\n\n#if defined(grid_output_motionFull)\n  float map(float value, float inMin, float inMax, float outMin, float outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec2 map(vec2 value, vec2 inMin, vec2 inMax, vec2 outMin, vec2 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec3 map(vec3 value, vec3 inMin, vec3 inMax, vec3 outMin, vec3 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec4 map(vec4 value, vec4 inMin, vec4 inMax, vec4 outMin, vec4 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\n  // #pragma glslify: offsetUV = require(@epok.tech/gl-gpgpu/src/lookup/offset-uv);\n  /** Exponential notation packed into a vector. */\nfloat exponent(vec2 basePower) { return basePower.s*pow(1e1, basePower.t); }\n\n  float mapSDF(vec2 uv) {\n    formFlow_tapState(uv);\n\n    return formFlow_data[formFlow_reads_signedDistance_signedDistance]\n      .formFlow_channels_signedDistance;\n  }\n\n  float mapSDF(vec3 uv) { return mapSDF(uv.xy); }\n  float mapSDF(vec4 uv) { return mapSDF(uv.xy); }\n\n  /**\n * SDF normal method of `glsl-sdf-normal`, in more dimensions.\n *\n * @see [3D `glsl-sdf-normal` implementation](https://github.com/glslify/glsl-sdf-normal/blob/master/index.glsl)\n * @see [Original Inigo Quilez article](https://iquilezles.org/articles/normalsSDF/)\n * @see [Original Inigo Quilez ShaderToy](https://www.shadertoy.com/view/ldfSWs)\n *\n * @todo Verify this works as expected across dimensions.\n */\n\nfloat when_gt_1117569599(float x, float y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec2 when_gt_1117569599(vec2 x, vec2 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec3 when_gt_1117569599(vec3 x, vec3 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec4 when_gt_1117569599(vec4 x, vec4 y) {\n  return max(sign(x - y), 0.0);\n}\n\n#define createToNormal(vec, n, map, gt) \\\n \\\nvec toNormal(vec at, float offset, out vec to) { \\\n  vec by = vec(1); \\\n   \\\n  to = by*map(at+(by*offset)); \\\n   \\\n  for(int i = 0; i < n; ++i) { \\\n    by = vec(-1); \\\n    by[i] = 1.0; \\\n    to += by*map(at+(by*offset)); \\\n  } \\\n   \\\n  float l = length(to); \\\n   \\\n  return (to = to/mix(1.0, l, gt(l, offset))); \\\n} \\\n \\\nvec toNormal(vec at, float offset) { \\\n  vec to; \\\n   \\\n  return toNormal(at, offset, to); \\\n} \\\n \\\nvec toNormal(vec at) { return toNormal(at, 2e-3); }\n\ncreateToNormal(vec2, 2, mapSDF, when_gt_1117569599)\ncreateToNormal(vec3, 3, mapSDF, when_gt_1117569599)\ncreateToNormal(vec4, 4, mapSDF, when_gt_1117569599)\n\n  const vec2 v1 = vec2(1);\n#endif\n\nvoid main() {\n  #if defined(grid_output_motionFull)\n    float rescaledFormFlow = exponent(rescaleFormFlow);\n    float rescaledMotion = exponent(rescaleMotion);\n    // vec2 uv = offsetUV(formFlow_uv, formFlow_stateShape.xy);\n    vec2 uv = formFlow_uv;\n    // vec2 normal = toSDFNormal(uv, fieldGap);\n    vec2 normal = toNormal(uv.xyy, fieldGap).xy;\n\n    vec2 motion = rescaledFormFlow*mapSDF(uv)*\n      map(normal, -v1, v1, spanTo.xy, spanTo.zw);\n\n    grid_output_motionFull = motion/rescaledMotion;\n  #endif\n}\n";var tW={};tW="/** Form-flow-to-points fragment shader. */\n\nprecision highp float;\n\n#ifdef GL_EXT_draw_buffers\n  #extension GL_EXT_draw_buffers : require\n#define GLSLIFY 1\n#endif\n\n#if defined(points_output_position) || defined(points_output_motion) || \\\n    defined(points_output_mass) || defined(points_output_affine) || \\\n    defined(points_output_deform) || defined(points_output_stress)\n  formFlow_useSamples\n  formFlow_useReads_signedDistance\n\n  points_useSamples\n  points_useReads_position\n\n  #ifdef formFlow_mergedStates\n    uniform sampler2D formFlow_states;\n  #else\n    uniform sampler2D formFlow_states[formFlow_stepsPast*formFlow_textures];\n  #endif\n\n  #ifdef points_mergedStates\n    uniform sampler2D points_states;\n  #else\n    uniform sampler2D points_states[points_stepsPast*points_textures];\n  #endif\n\n  uniform float formFlow_stepNow;\n  uniform vec4 formFlow_stateShape;\n\n  uniform float points_stepNow;\n  uniform vec4 points_stateShape;\n\n  uniform float signedDistanceSpawn;\n  uniform float massSpawn;\n\n  uniform vec2 rescaleMass;\n#endif\n#ifdef points_output_position\n  uniform vec2 rescalePosition;\n  uniform vec4 bounds;\n#endif\n#ifdef points_output_motion\n  // uniform vec2 rescaleMotion;\n#endif\n#ifdef points_output_affine\n  // uniform vec2 rescaleAffine;\n#endif\n#ifdef points_output_deform\n  uniform vec2 rescaleDeform;\n#endif\n#ifdef points_output_stress\n  // uniform vec2 rescaleStress;\n#endif\n\nvarying vec2 formFlow_uv;\n\n#if defined(points_output_position) || defined(points_output_motion) || \\\n    defined(points_output_mass) || defined(points_output_affine) || \\\n    defined(points_output_deform) || defined(points_output_stress)\n  float when_lt_1540259130(float x, float y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec2 when_lt_1540259130(vec2 x, vec2 y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec3 when_lt_1540259130(vec3 x, vec3 y) {\n  return max(sign(y - x), 0.0);\n}\n\nvec4 when_lt_1540259130(vec4 x, vec4 y) {\n  return max(sign(y - x), 0.0);\n}\n\n  float when_neq_1604150559(float x, float y) {\n  return abs(sign(x - y));\n}\n\nvec2 when_neq_1604150559(vec2 x, vec2 y) {\n  return abs(sign(x - y));\n}\n\nvec3 when_neq_1604150559(vec3 x, vec3 y) {\n  return abs(sign(x - y));\n}\n\nvec4 when_neq_1604150559(vec4 x, vec4 y) {\n  return abs(sign(x - y));\n}\n\n#endif\n#if defined(points_output_position)\n  float map(float value, float inMin, float inMax, float outMin, float outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec2 map(vec2 value, vec2 inMin, vec2 inMax, vec2 outMin, vec2 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec3 map(vec3 value, vec3 inMin, vec3 inMax, vec3 outMin, vec3 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec4 map(vec4 value, vec4 inMin, vec4 inMax, vec4 outMin, vec4 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\n#endif\n#if defined(points_output_position) || defined(points_output_motion) || \\\n    defined(points_output_mass) || defined(points_output_affine) || \\\n    defined(points_output_deform) || defined(points_output_stress)\n  // #pragma glslify: offsetUV = require(@epok.tech/gl-gpgpu/src/lookup/offset-uv);\n  /** Exponential notation packed into a vector. */\nfloat exponent(vec2 basePower) { return basePower.s*pow(1e1, basePower.t); }\n\n  const vec2 v0 = vec2(0);\n  const vec2 v1 = vec2(1);\n#endif\n\nvoid main() {\n  #if defined(points_output_position) || defined(points_output_motion) || \\\n      defined(points_output_mass) || defined(points_output_affine) || \\\n      defined(points_output_deform) || defined(points_output_stress)\n    // vec2 uv = offsetUV(formFlow_uv, formFlow_stateShape.xy);\n    vec2 uv = formFlow_uv;\n\n    formFlow_tapState(uv);\n    /** @todo Somehow, even sampling past points states alone changes result. */\n    // points_tapState(uv);\n\n    float sd = formFlow_data[formFlow_reads_signedDistance_signedDistance]\n      .formFlow_channels_signedDistance;\n\n    float rescaledMass = exponent(rescaleMass);\n\n    // float mass = rescaledMass*\n    //   points_data[points_reads_position_mass].points_channels_mass;\n\n    /** @todo Check particle material rather than mass? */\n    // if(lt(sd, signedDistanceSpawn)*neq(mass, massSpawn) > 0.0) { discard; }\n    if(when_lt_1540259130(sd, signedDistanceSpawn) > 0.0) { discard; }\n  #endif\n\n  // for(int p = 0; p < 5; ++p) { gl_FragData[p].rgba = vec4(0); }\n  // return;\n\n  #ifdef points_output_position\n    points_output_position = map(uv, v0, v1, bounds.xy, bounds.zw)/\n      exponent(rescalePosition);\n  #endif\n  #ifdef points_output_motion\n    // points_output_motion = v0/exponent(rescaleMotion);\n    points_output_motion = v0;\n  #endif\n  #ifdef points_output_mass\n    points_output_mass = massSpawn/rescaledMass;\n  #endif\n  #ifdef points_output_affine\n    points_output_affine = vec4(0);\n    // points_output_affine = vec4(0)/exponent(rescaleAffine);\n    // points_output_affine = vec4(mat2(1))/exponent(rescaleAffine);\n    // points_output_affine = vec4(1, 0, 0, 1)/exponent(rescaleAffine);\n  #endif\n  #ifdef points_output_deform\n    // points_output_deform = vec4(0);\n    // points_output_deform = vec4(0)/exponent(rescaleDeform);\n    // points_output_deform = vec4(mat2(1))/exponent(rescaleDeform);\n    points_output_deform = vec4(1, 0, 0, 1)/exponent(rescaleDeform);\n  #endif\n  #ifdef points_output_stress\n    points_output_stress = vec4(0);\n    // points_output_stress = vec4(0)/exponent(rescaleStress);\n    // points_output_stress = vec4(mat2(1))/exponent(rescaleStress);\n    // points_output_stress = vec4(1, 0, 0, 1)/exponent(rescaleStress);\n  #endif\n}\n";var tq={};tq="/** Form-flow-to-screen fragment shader. */\n\nprecision highp float;\n#define GLSLIFY 1\n\nformFlow_useSamples\nformFlow_useReads_signedDistance\n\n#ifdef formFlow_mergedStates\n  uniform sampler2D formFlow_states;\n#else\n  uniform sampler2D formFlow_states[formFlow_stepsPast*formFlow_textures];\n#endif\n\nuniform float formFlow_stepNow;\nuniform vec4 formFlow_stateShape;\n\nuniform sampler2D form;\nuniform vec2 curve[4];\nuniform vec2 flip;\nuniform vec2 aspect;\nuniform vec2 offset;\n// uniform vec2 size;\n\nvarying vec2 formFlow_uv;\n\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec2 map(vec2 value, vec2 inMin, vec2 inMax, vec2 outMin, vec2 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec3 map(vec3 value, vec3 inMin, vec3 inMax, vec3 outMin, vec3 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec4 map(vec4 value, vec4 inMin, vec4 inMax, vec4 outMin, vec4 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nfloat when_gt_1604150559(float x, float y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec2 when_gt_1604150559(vec2 x, vec2 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec3 when_gt_1604150559(vec3 x, vec3 y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec4 when_gt_1604150559(vec4 x, vec4 y) {\n  return max(sign(x - y), 0.0);\n}\n\nfloat when_le_2281831123(float x, float y) {\n  return 1.0 - when_gt_1604150559(x, y);\n}\n\nvec2 when_le_2281831123(vec2 x, vec2 y) {\n  return 1.0 - when_gt_1604150559(x, y);\n}\n\nvec3 when_le_2281831123(vec3 x, vec3 y) {\n  return 1.0 - when_gt_1604150559(x, y);\n}\n\nvec4 when_le_2281831123(vec4 x, vec4 y) {\n  return 1.0 - when_gt_1604150559(x, y);\n}\n\n// #pragma glslify: offsetUV = require(@epok.tech/gl-gpgpu/src/lookup/offset-uv);\n\n/**\n * Cubic Bézier interpolation, CSS-style.\n * Given p0, p1, p2, p3 as control points, and an input `x` value, find the\n * corresponding `y` value using the Bézier curve; note that this doesn't\n * directly use the usual `t` value as input for interpolation.\n *\n * @todo Split up and generalise.\n *\n * @see [Y-for-X in Pomax's guide](https://pomax.github.io/bezierinfo/#yforx)\n * @see [Finding Bézier roots and Newton-Raphson method in Pomax's guide](https://pomax.github.io/bezierinfo/#extremities)\n */\n\n// Code generated by `bezier-gen` - start:\n\nfloat bezier(float cp0, float cp1, float cp2, float t) {\n    float p0 = mix(cp0, cp1, t);\n    float p1 = mix(cp1, cp2, t);\n\n    return mix(p0, p1, t);\n}\n\nfloat bezier(float cp0, float cp1, float cp2, float cp3, float t) {\n    float p0 = mix(cp0, cp1, t);\n    float p1 = mix(cp1, cp2, t);\n    float p2 = mix(cp2, cp3, t);\n\n    p0 = mix(p0, p1, t);\n    p1 = mix(p1, p2, t);\n\n    return mix(p0, p1, t);\n}\n\nfloat bezier(float cp0, float cp1, float cp2, float cp3, float cp4, float t) {\n    float p0 = mix(cp0, cp1, t);\n    float p1 = mix(cp1, cp2, t);\n    float p2 = mix(cp2, cp3, t);\n    float p3 = mix(cp3, cp4, t);\n\n    p0 = mix(p0, p1, t);\n    p1 = mix(p1, p2, t);\n    p2 = mix(p2, p3, t);\n\n    p0 = mix(p0, p1, t);\n    p1 = mix(p1, p2, t);\n\n    return mix(p0, p1, t);\n}\n\n// Code generated by `bezier-gen` - end.\n\n// float bezier(float p0, float p1, float p2, float p3, float t) {\n//   float u = 1.0-t;\n\n//   return (3.0*u*u*t*p1)+(3.0*u*t*t*p2)+(t*t*t*p3);\n// }\n\n/** @todo Generalise to other orders. */\nfloat derivativeCubic(float p0, float p1, float p2, float p3, float t) {\n  float u = 1.0-t;\n\n  return (9.0*p1*u*u)+(6.0*(p2-p1)*u*t)+(3.0*p3*t*t);\n}\n\nfloat xToY(vec2 p0, vec2 p1, vec2 p2, vec2 p3, float x) {\n  float t = x;\n\n  // Netwon's method iteration.\n  for(int i = 0; i < 4; ++i) {\n    float xt = bezier(p0.x, p1.x, p2.x, p3.x, t);\n    float dtx = derivativeCubic(p0.x, p1.x, p2.x, p3.x, t);\n    float error = xt-x;\n\n    // Newton's iteration.\n    t = clamp(t-(error/dtx), 0.0, 1.0);\n  }\n\n  // Now that we have `t`, compute the corresponding `y` value.\n  return bezier(p0.y, p1.y, p2.y, p3.y, t);\n}\n\nvoid main() {\n  // vec2 uv = offsetUV(formFlow_uv, formFlow_stateShape.xy);\n  vec2 uv = formFlow_uv;\n\n  formFlow_tapState(uv);\n\n  float sd = formFlow_data[formFlow_reads_signedDistance_signedDistance]\n    .formFlow_channels_signedDistance;\n\n  float to = clamp(xToY(curve[0], curve[1], curve[2], curve[3], sd),\n    0.0, 1.0);\n\n  // gl_FragColor = texture2D(form, offset+(fract(uv*flip)*aspect));\n  gl_FragColor = to*texture2D(form, offset+(fract(uv*flip)*aspect));\n  gl_FragColor.rgb *= gl_FragColor.a;\n}\n";const{min:tY,max:tQ}=Math,tX=em(),tJ=((e=location.search)=>new URLSearchParams(e))(),tZ=document.body,t0=tZ.querySelector("canvas"),t1=tJ.get("back-video");var t2={};t2=new URL("gradient-loop-0.bf6136c2.mp4",import.meta.url).toString(),null!=t1&&((e=document.createElement("video")).src=decodeURIComponent(t1||new URL(t2)),e.muted=e.autoplay=e.loop=!0,tZ.appendChild(e));const t3=tJ.has("see-key")&&tZ.appendChild(document.createElement("output"));var t4={};t4=new URL("finastra-gradient-s-pad.ecfc4156.png",import.meta.url).toString();var t5={};t5=new URL("finastra-gradient-s-pad.85881eaf.png",import.meta.url).toString(),(async()=>{let e=parseFloat(tJ.get("optical-flow-side")||720,10),t=parseFloat(tJ.get("timer-fps")||24,10),r={$canvas:t0,pixelRatio:tQ(devicePixelRatio,1.5)||1.5,timer:{step:t?1e3/t:t},fps:!!tJ.has("see-fps")&&null,grid:{gpgpu:{scale:parseFloat(tJ.get("grid-data-scale")||200,10)}},gridToPoints:{gpgpu:{steps:parseFloat(tJ.get("points-data-steps")||2,10),scale:parseFloat(tJ.get("points-data-scale")||10,10)}},demo:{opticalFlow:{mediaQuery:{width:e,height:e}}}};await tG(r);let{api:i,g:a,grid:o,points:l,gridToPoints:u,gridToScreen:c,pointsToScreen:d,demo:{resize:p,opticalFlowToGrid:m}}=r,{command:v=i,texture:h,buffer:g}=i,b=r.sibos={to:r},x=b.formFlowMedia={color:{src:tJ.get("form-flow-color")||new URL(t4),shape:[2544,647],offset:[0,-1.5]},sdf:{src:tJ.get("form-flow-sdf")||new URL(t5),shape:[2544,647],offset:[0,-1.5]}},_=new Image,y=b.formFlow={to:r,frag:n(tj),input:{data:_,channels:1,format:"alpha",mag:"linear",min:"linear"},sdf:h(),spreadKeep:.98/(1e3/(t||60)),spans:function(e,n,t,r={}){return r.eases=e??=tI(),r.make=n??=tB,r.mix=t??=tK,r.easeTo=({eases:e,make:n,mix:t}=r)=>tV(e,n,t),r}(el([null,,],.03,1),e=>{e.at??=[.5,1,0,1]},({at:e},{at:n},t)=>{ee(e,e,n,t)}),offset:x.sdf.offset,flip:[1,-1],aspect:[1,1],size:[0,0],spreadRadius:2,opticalFlowRadius:0,lengthLinear:!1,rescaleOpticalFlow:[1,-1],rescaleSpreadPace:[2,-1],rescaleSpreadSpan:[[1,1],[7,-1]]},w="formFlow_",S=y.fields=tm(new Map().set("signedDistance",1)),M=y.derives=[],{index:A,values:T,alias:O}=S,{signedDistance:F}=A;M[F]=[F];let{merge:E,maps:D}=y.gpgpu=e9(i,{to:r,pre:w,steps:2,shape:x.sdf.shape,maps:{values:T,alias:O,derives:M},macros:{vert:0},frags:[],frag:(e,n)=>{let{frag:t,lengthLinear:r,spreadRadius:i,blurGauss:a,opticalFlowRadius:o}=n.to.sibos.formFlow;return(r?"#define lengthLinear\n\n":"")+(i?`#define spreadRadius ${i}

`:"")+(a?`#define blurGauss ${a}

`:"")+(o?`#define opticalFlowRadius ${o}

`:"")+t},uniforms:{sdf:(e,n)=>n.to.sibos.formFlow.sdf,spreadKeep:(e,n)=>n.to.sibos.formFlow.spreadKeep,spans:(e,n)=>n.to.sibos.formFlow.spans.eases.at(-1).at,flip:(e,n)=>n.to.sibos.formFlow.flip,aspect:(e,n)=>n.to.sibos.formFlow.aspect,offset:(e,n)=>n.to.sibos.formFlow.offset,size:(e,n)=>n.to.sibos.formFlow.size,rescaleOpticalFlow:(e,n)=>n.to.sibos.formFlow.rescaleOpticalFlow,rescaleSpreadPace:(e,n)=>n.to.sibos.formFlow.rescaleSpreadPace,rescaleSpreadSpan:(e,n)=>{let{rescaleSpreadSpan:t,lengthLinear:r}=n.to.sibos.formFlow;return t[+r]},dt:(e,n)=>n.to.timer.dt,opticalFlow:(e,n)=>n.to.demo.opticalFlow.framebuffer.color[0],opticalFlowSize:(e,n)=>n.to.demo.opticalFlow.size}}),C=ep.replaceAll(ev,w),k=b.formFlowToGrid={to:r,vert:C,frag:n(tH),count:ec,fieldGap:1,spanTo:[1,1,-1,-1],rescaleFormFlow:[5,6],blend:{enable:!0,func:{src:1,dst:1}},depth:{enable:!1},on:!0},R=tv({...th,pre:w,steps:2,merge:E,bound:1,macros:{output:0},maps:eT({...D,...th.maps,derives:[[F]]})},(e,n)=>n.to.sibos.formFlow.gpgpu),{fields:{index:L},gpgpu:z}=o,{pre:P,size:N,merge:G,maps:U}=z,I=tv({...th,pre:P,steps:N.steps,merge:G,bound:1,macros:{samples:0,taps:0},maps:eT({...U,...th.maps,derives:null})},(e,n)=>n.to.grid.gpgpu);k.link={formFlow:R,grid:I},k.pass=v(k.pipeline={vert:(e,n)=>n.vert,frag:(e,{frag:n,link:{formFlow:t,grid:r},to:{head:i}})=>i.glsl(i)+t.macros+r.macros+n,attributes:{formFlow_position:g(tX)},uniforms:{...R.state.uniforms,fieldGap:(e,n)=>n.fieldGap,spanTo:(e,n)=>n.spanTo,rescaleFormFlow:(e,n)=>n.rescaleFormFlow,rescaleMotion:(e,n)=>n.to.rescale.motion,dt:(e,n)=>n.to.timer.dt},blend:{enable:(e,n)=>n.blend.enable,func:{srcRGB:(e,{blend:{func:{src:n,srcRGB:t}}})=>t??n,srcAlpha:(e,{blend:{func:{src:n,srcAlpha:t}}})=>t??n,dstRGB:(e,{blend:{func:{dst:n,dstRGB:t}}})=>t??n,dstAlpha:(e,{blend:{func:{dst:n,dstAlpha:t}}})=>t??n}},depth:{enable:(e,n)=>n.depth.enable},count:(e,n)=>n.count,framebuffer(e,{link:{grid:n},to:{grid:t}}){let{fields:r,gpgpu:{maps:i,passes:a,stepNow:o}}=t,s=i.valueToPass[r.index.motionFull];return ea(o-n.state.bound,a)[s].framebuffer}}),k.step=(e=k)=>{let{on:n,pass:t}=e;n&&t(e)};let B=b.formFlowToPoints={to:r,vert:C,frag:n(tW),count:ec,signedDistanceSpawn:.1,massSpawn:0,blend:{enable:!1,func:{src:1,dst:0}},depth:{enable:!1},on:!0},K=tv({...th,pre:w,steps:2,merge:E,bound:1,macros:{output:0},maps:eT({...D,...th.maps,derives:[[F]]})},(e,n)=>n.to.sibos.formFlow.gpgpu),{index:$}=l.fields,{gpgpu:V}=u,{pre:j,size:H,merge:W,maps:q}=V,Y=tv({...th,pre:j,steps:H.steps,merge:W,bound:1,maps:eT({...q,...th.maps,derives:[[$.mass]]})},(e,n)=>n.to.gridToPoints.gpgpu);B.link={formFlow:K,gridToPoints:Y},B.pass=v(B.pipeline={vert:(e,n)=>n.vert,frag:(e,{frag:n,link:{formFlow:t,gridToPoints:r},to:{head:i}})=>i.glsl(i)+t.macros+r.macros+n,attributes:{formFlow_position:g(tX)},uniforms:{...K.state.uniforms,...Y.state.uniforms,massSpawn:(e,n)=>n.massSpawn,signedDistanceSpawn:(e,n)=>n.signedDistanceSpawn,bounds:(e,n)=>n.to.grid.bounds,rescaleMass:(e,n)=>n.to.rescale.mass,rescalePosition:(e,n)=>n.to.rescale.position,rescaleMotion:(e,n)=>n.to.rescale.motion,rescaleAffine:(e,n)=>n.to.rescale.affine,rescaleDeform:(e,n)=>n.to.rescale.deform,rescaleStress:(e,n)=>n.to.rescale.stress},blend:{enable:(e,n)=>n.blend.enable,func:{srcRGB:(e,{blend:{func:{src:n,srcRGB:t}}})=>t??n,srcAlpha:(e,{blend:{func:{src:n,srcAlpha:t}}})=>t??n,dstRGB:(e,{blend:{func:{dst:n,dstRGB:t}}})=>t??n,dstAlpha:(e,{blend:{func:{dst:n,dstAlpha:t}}})=>t??n}},depth:{enable:(e,n)=>n.depth.enable},count:(e,n)=>n.count,framebuffer(e,{link:n,to:{points:t,gridToPoints:r}}){let{gpgpu:{maps:i,passes:a,stepNow:o}}=r;return ea(o-n.gridToPoints.state.bound,a)[0].framebuffer}}),B.step=(e=B)=>{let{on:n,pass:t}=e;n&&t(e)};let Q=new Image,X=b.formFlowToScreen={to:r,vert:C,frag:n(tq),count:ec,input:{data:Q,mag:"linear",min:"linear"},form:h(),curve:[[0,0],[.1,0],[-.25,1.5],[1,1.5]],offset:x.color.offset,blend:{enable:!0,func:{src:1,dst:"one minus src alpha"}},depth:{enable:!1},on:!0},J=tv({...th,pre:w,steps:2,merge:E,bound:1,macros:{output:0},maps:eT({...D,...th.maps,derives:[[F]]})},(e,n)=>n.to.sibos.formFlow.gpgpu);X.link={formFlow:J},X.pass=v(X.pipeline={vert:(e,n)=>n.vert,frag:(e,{frag:n,link:t,to:{head:r}})=>r.glsl(r)+t.formFlow.macros+n,attributes:{formFlow_position:g(tX)},uniforms:{...J.state.uniforms,form:(e,n)=>n.form,flip:(e,{flip:n,to:t})=>n??t.sibos.formFlow.flip,aspect:(e,{aspect:n,to:t})=>n??t.sibos.formFlow.aspect,offset:(e,{offset:n,to:t})=>n??t.sibos.formFlow.offset,size:(e,{size:n,to:t})=>n??t.sibos.formFlow.size,...et((e,n,t)=>(e[`curve[${t}]`]=(e,n)=>n.curve[t])&&e,X.curve,{})},blend:{enable:(e,n)=>n.blend.enable,func:{srcRGB:(e,{blend:{func:{src:n,srcRGB:t}}})=>t??n,srcAlpha:(e,{blend:{func:{src:n,srcAlpha:t}}})=>t??n,dstRGB:(e,{blend:{func:{dst:n,dstRGB:t}}})=>t??n,dstAlpha:(e,{blend:{func:{dst:n,dstAlpha:t}}})=>t??n}},depth:{enable:(e,n)=>n.depth.enable},count:(e,n)=>n.count}),X.draw=(e=X)=>{let{on:n,pass:t}=e;n&&t(e)};let Z=X.setup=()=>{let{form:e,input:n,size:t,ar:r}=X,{width:i,height:a}=Q;e(n),t&&r&&tN(s(t,i,a),tQ,r),Q.removeEventListener("load",Z)};Q.addEventListener("load",Z),Q.src=x.color.src;let en=b.setup=()=>{let{sibos:e,demo:n,onDraw:t}=r,{formFlow:i,formFlowToGrid:a}=e,{opticalFlowToGrid:o}=n,f=o.onStep,{input:l,sdf:u,aspect:c,size:d}=i,{width:p,height:m}=_;u(l),tN(s(d,p,m),tQ,c),a.fieldGap/=tQ(p,m),o.onStep=e=>{let{sibos:n,stepPass:t}=(f?.(e)??e).to,{formFlow:r,formFlowToGrid:i,formFlowToPoints:a}=n,{gpgpu:o,spans:s}=r;t||(s.easeTo(),o.step(o)),i.step(i),a.step(a)},r.onDraw=e=>{let{formFlowToScreen:n}=(t?.(e)??e).sibos;n.draw(n)},_.removeEventListener("load",en)};_.addEventListener("load",en),_.src=x.sdf.src,tZ.addEventListener("click",()=>{let{at:e}=y.spans.eases[0],[,,n,t]=e;e[3]=n===t?1:n}),t3&&tZ.addEventListener("keyup",e=>t3.value="key: "+e.key);let[ei,eo,es]=a;f(a,parseFloat(tJ.get("g-x")||ei,10),parseFloat(tJ.get("g-y")||eo,10),parseFloat(tJ.get("g-force")||es,10)),o.boundsHit=(u.boundsClamp=!tJ.has("points-no-bounds"))?1:-1;let{colorHi:ef,colorLo:eu,angleHSLA:ed}=c;tf(tJ.get("grid-color-hi")||"5e47a966",null,ef),tf(tJ.get("grid-color-lo")||"2c0e5200",null,eu),tf(tJ.get("grid-color-angle")||"694ed644",null,ed);let{diffuseHi:em,diffuseLo:eh,form:eg,wideHi:eb,wideLo:ex,lengthLinear:e_}=d;tf(tJ.get("points-diffuse-hi")||"f04e98",null,em)[3]=parseFloat(tJ.get("points-diffuse-hi-a")??em[3],10),tf(tJ.get("points-diffuse-lo")||"c137a2",null,eh)[3]=parseFloat(tJ.get("points-diffuse-lo-a")??eh[3],10),d.form=parseInt(tJ.get("points-form")||eg,10),eb[+e_]=parseFloat(tJ.get("points-wide-hi")??(e_?4e-6:.004),10),ex[+e_]=parseFloat(tJ.get("points-wide-lo")??(e_?2e-6:.002),10);let ey=tJ.get("points-blend")??"none";d.blend="alpha"===ey?{enable:!0,func:{src:1,dst:"one minus src alpha"}}:"add"===ey?{enable:!0,func:{src:1,dst:1}}:"none"===ey?{enable:!1,func:{src:1,dst:1}}:d.blend,d.useDiscard="none"===ey,o.limit=parseFloat(tJ.get("grid-bounds-scale")??5e9,10),p(),m.rescaleFlow=er(e=>parseFloat(e,10),parseFloat(tJ.get("optical-flow-force")??3e5,10).toExponential().split("e"),0),y.spreadKeep=parseFloat(tJ.get("form-spread-keep")??y.spreadKeep,10),k.on=!tJ.has("form-grid-off"),B.on=!tJ.has("form-points-off"),X.on=!tJ.has("form-screen-off")})();